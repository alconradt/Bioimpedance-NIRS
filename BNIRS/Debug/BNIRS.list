
BNIRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08006190  08006190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006264  08006264  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  08006264  08006264  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006264  08006264  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006264  08006264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800626c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d10  200000f0  0800635c  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e00  0800635c  00024e00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106be  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002256  00000000  00000000  000307de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f68  00000000  00000000  00032a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e50  00000000  00000000  000339a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f32d  00000000  00000000  000347f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c763  00000000  00000000  00053b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9f54  00000000  00000000  00060280  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011a1d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004798  00000000  00000000  0011a250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006178 	.word	0x08006178

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	08006178 	.word	0x08006178

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f001 f83e 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 fbb4 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 fd5e 	bl	8000d4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000290:	f000 fd2a 	bl	8000ce8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000294:	f000 fcf8 	bl	8000c88 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000298:	f000 fcc0 	bl	8000c1c <MX_TIM6_Init>
  MX_ADC2_Init();
 800029c:	f000 fc10 	bl	8000ac0 <MX_ADC2_Init>
  MX_TIM3_Init();
 80002a0:	f000 fc6e 	bl	8000b80 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  Measurement0();
 80002a4:	f000 f802 	bl	80002ac <Measurement0>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <main+0x28>
	...

080002ac <Measurement0>:
  }
  /* USER CODE END 3 */
}

void Measurement0(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Init(&htim6);
 80002b0:	482c      	ldr	r0, [pc, #176]	; (8000364 <Measurement0+0xb8>)
 80002b2:	f004 f919 	bl	80044e8 <HAL_TIM_Base_Init>
	  HAL_TIM_Base_Start(&htim6);
 80002b6:	482b      	ldr	r0, [pc, #172]	; (8000364 <Measurement0+0xb8>)
 80002b8:	f004 f942 	bl	8004540 <HAL_TIM_Base_Start>

	  hdma_tim6_up.Instance = DMA1_Channel3;
 80002bc:	4b2a      	ldr	r3, [pc, #168]	; (8000368 <Measurement0+0xbc>)
 80002be:	4a2b      	ldr	r2, [pc, #172]	; (800036c <Measurement0+0xc0>)
 80002c0:	601a      	str	r2, [r3, #0]
	  hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80002c2:	4b29      	ldr	r3, [pc, #164]	; (8000368 <Measurement0+0xbc>)
 80002c4:	2210      	movs	r2, #16
 80002c6:	605a      	str	r2, [r3, #4]
	  hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80002c8:	4b27      	ldr	r3, [pc, #156]	; (8000368 <Measurement0+0xbc>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
	  hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 80002ce:	4b26      	ldr	r3, [pc, #152]	; (8000368 <Measurement0+0xbc>)
 80002d0:	2280      	movs	r2, #128	; 0x80
 80002d2:	60da      	str	r2, [r3, #12]
	  hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80002d4:	4b24      	ldr	r3, [pc, #144]	; (8000368 <Measurement0+0xbc>)
 80002d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002da:	611a      	str	r2, [r3, #16]
	  hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80002dc:	4b22      	ldr	r3, [pc, #136]	; (8000368 <Measurement0+0xbc>)
 80002de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80002e2:	615a      	str	r2, [r3, #20]
	  hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 80002e4:	4b20      	ldr	r3, [pc, #128]	; (8000368 <Measurement0+0xbc>)
 80002e6:	2220      	movs	r2, #32
 80002e8:	619a      	str	r2, [r3, #24]
	  hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 80002ea:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <Measurement0+0xbc>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_tim6_up);
 80002f0:	481d      	ldr	r0, [pc, #116]	; (8000368 <Measurement0+0xbc>)
 80002f2:	f002 f9c2 	bl	800267a <HAL_DMA_Init>

	  HAL_DMA_Start(&hdma_tim6_up, (uint32_t)DIBS_sequence, (uint32_t)&GPIOA->BSRR, 32); //initialization of data transfer in the DIBS_sequence buffer to the GPIOA periphery
 80002f6:	491e      	ldr	r1, [pc, #120]	; (8000370 <Measurement0+0xc4>)
 80002f8:	2320      	movs	r3, #32
 80002fa:	4a1e      	ldr	r2, [pc, #120]	; (8000374 <Measurement0+0xc8>)
 80002fc:	481a      	ldr	r0, [pc, #104]	; (8000368 <Measurement0+0xbc>)
 80002fe:	f002 fa03 	bl	8002708 <HAL_DMA_Start>
	  __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8000302:	4b18      	ldr	r3, [pc, #96]	; (8000364 <Measurement0+0xb8>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	68da      	ldr	r2, [r3, #12]
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <Measurement0+0xb8>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000310:	60da      	str	r2, [r3, #12]

	  HAL_TIM_Base_Start(&htim3);
 8000312:	4819      	ldr	r0, [pc, #100]	; (8000378 <Measurement0+0xcc>)
 8000314:	f004 f914 	bl	8004540 <HAL_TIM_Base_Start>

	  hdma_adc2.Instance = DMA2_Channel1;
 8000318:	4b18      	ldr	r3, [pc, #96]	; (800037c <Measurement0+0xd0>)
 800031a:	4a19      	ldr	r2, [pc, #100]	; (8000380 <Measurement0+0xd4>)
 800031c:	601a      	str	r2, [r3, #0]
	  hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <Measurement0+0xd0>)
 8000320:	2200      	movs	r2, #0
 8000322:	605a      	str	r2, [r3, #4]
	  hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <Measurement0+0xd0>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
	  hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800032a:	4b14      	ldr	r3, [pc, #80]	; (800037c <Measurement0+0xd0>)
 800032c:	2280      	movs	r2, #128	; 0x80
 800032e:	60da      	str	r2, [r3, #12]
	  hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <Measurement0+0xd0>)
 8000332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000336:	611a      	str	r2, [r3, #16]
	  hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000338:	4b10      	ldr	r3, [pc, #64]	; (800037c <Measurement0+0xd0>)
 800033a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800033e:	615a      	str	r2, [r3, #20]
	  hdma_adc2.Init.Mode = DMA_NORMAL;
 8000340:	4b0e      	ldr	r3, [pc, #56]	; (800037c <Measurement0+0xd0>)
 8000342:	2200      	movs	r2, #0
 8000344:	619a      	str	r2, [r3, #24]
	  hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000346:	4b0d      	ldr	r3, [pc, #52]	; (800037c <Measurement0+0xd0>)
 8000348:	2200      	movs	r2, #0
 800034a:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_adc2);
 800034c:	480b      	ldr	r0, [pc, #44]	; (800037c <Measurement0+0xd0>)
 800034e:	f002 f994 	bl	800267a <HAL_DMA_Init>

	  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC_BIA0, 800);
 8000352:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000356:	490b      	ldr	r1, [pc, #44]	; (8000384 <Measurement0+0xd8>)
 8000358:	480b      	ldr	r0, [pc, #44]	; (8000388 <Measurement0+0xdc>)
 800035a:	f001 fa47 	bl	80017ec <HAL_ADC_Start_DMA>
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20002e34 	.word	0x20002e34
 8000368:	200027b0 	.word	0x200027b0
 800036c:	40020030 	.word	0x40020030
 8000370:	20000000 	.word	0x20000000
 8000374:	48000018 	.word	0x48000018
 8000378:	200014b0 	.word	0x200014b0
 800037c:	20004134 	.word	0x20004134
 8000380:	40020408 	.word	0x40020408
 8000384:	200027f4 	.word	0x200027f4
 8000388:	20001460 	.word	0x20001460

0800038c <Measurement1>:

void Measurement1(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Init(&htim6);
 8000390:	482c      	ldr	r0, [pc, #176]	; (8000444 <Measurement1+0xb8>)
 8000392:	f004 f8a9 	bl	80044e8 <HAL_TIM_Base_Init>
	  HAL_TIM_Base_Start(&htim6);
 8000396:	482b      	ldr	r0, [pc, #172]	; (8000444 <Measurement1+0xb8>)
 8000398:	f004 f8d2 	bl	8004540 <HAL_TIM_Base_Start>

	  hdma_tim6_up.Instance = DMA1_Channel3;
 800039c:	4b2a      	ldr	r3, [pc, #168]	; (8000448 <Measurement1+0xbc>)
 800039e:	4a2b      	ldr	r2, [pc, #172]	; (800044c <Measurement1+0xc0>)
 80003a0:	601a      	str	r2, [r3, #0]
	  hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80003a2:	4b29      	ldr	r3, [pc, #164]	; (8000448 <Measurement1+0xbc>)
 80003a4:	2210      	movs	r2, #16
 80003a6:	605a      	str	r2, [r3, #4]
	  hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80003a8:	4b27      	ldr	r3, [pc, #156]	; (8000448 <Measurement1+0xbc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
	  hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 80003ae:	4b26      	ldr	r3, [pc, #152]	; (8000448 <Measurement1+0xbc>)
 80003b0:	2280      	movs	r2, #128	; 0x80
 80003b2:	60da      	str	r2, [r3, #12]
	  hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80003b4:	4b24      	ldr	r3, [pc, #144]	; (8000448 <Measurement1+0xbc>)
 80003b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003ba:	611a      	str	r2, [r3, #16]
	  hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80003bc:	4b22      	ldr	r3, [pc, #136]	; (8000448 <Measurement1+0xbc>)
 80003be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80003c2:	615a      	str	r2, [r3, #20]
	  hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 80003c4:	4b20      	ldr	r3, [pc, #128]	; (8000448 <Measurement1+0xbc>)
 80003c6:	2220      	movs	r2, #32
 80003c8:	619a      	str	r2, [r3, #24]
	  hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 80003ca:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <Measurement1+0xbc>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_tim6_up);
 80003d0:	481d      	ldr	r0, [pc, #116]	; (8000448 <Measurement1+0xbc>)
 80003d2:	f002 f952 	bl	800267a <HAL_DMA_Init>

	  HAL_DMA_Start(&hdma_tim6_up, (uint32_t)DIBS_sequence, (uint32_t)&GPIOA->BSRR, 32); //initialization of data transfer in the DIBS_sequence buffer to the GPIOA periphery
 80003d6:	491e      	ldr	r1, [pc, #120]	; (8000450 <Measurement1+0xc4>)
 80003d8:	2320      	movs	r3, #32
 80003da:	4a1e      	ldr	r2, [pc, #120]	; (8000454 <Measurement1+0xc8>)
 80003dc:	481a      	ldr	r0, [pc, #104]	; (8000448 <Measurement1+0xbc>)
 80003de:	f002 f993 	bl	8002708 <HAL_DMA_Start>
	  __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 80003e2:	4b18      	ldr	r3, [pc, #96]	; (8000444 <Measurement1+0xb8>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	68da      	ldr	r2, [r3, #12]
 80003e8:	4b16      	ldr	r3, [pc, #88]	; (8000444 <Measurement1+0xb8>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80003f0:	60da      	str	r2, [r3, #12]

	  HAL_TIM_Base_Start(&htim3);
 80003f2:	4819      	ldr	r0, [pc, #100]	; (8000458 <Measurement1+0xcc>)
 80003f4:	f004 f8a4 	bl	8004540 <HAL_TIM_Base_Start>

	  hdma_adc2.Instance = DMA2_Channel1;
 80003f8:	4b18      	ldr	r3, [pc, #96]	; (800045c <Measurement1+0xd0>)
 80003fa:	4a19      	ldr	r2, [pc, #100]	; (8000460 <Measurement1+0xd4>)
 80003fc:	601a      	str	r2, [r3, #0]
	  hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003fe:	4b17      	ldr	r3, [pc, #92]	; (800045c <Measurement1+0xd0>)
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
	  hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <Measurement1+0xd0>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
	  hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <Measurement1+0xd0>)
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	60da      	str	r2, [r3, #12]
	  hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <Measurement1+0xd0>)
 8000412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000416:	611a      	str	r2, [r3, #16]
	  hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000418:	4b10      	ldr	r3, [pc, #64]	; (800045c <Measurement1+0xd0>)
 800041a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800041e:	615a      	str	r2, [r3, #20]
	  hdma_adc2.Init.Mode = DMA_NORMAL;
 8000420:	4b0e      	ldr	r3, [pc, #56]	; (800045c <Measurement1+0xd0>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
	  hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000426:	4b0d      	ldr	r3, [pc, #52]	; (800045c <Measurement1+0xd0>)
 8000428:	2200      	movs	r2, #0
 800042a:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_adc2);
 800042c:	480b      	ldr	r0, [pc, #44]	; (800045c <Measurement1+0xd0>)
 800042e:	f002 f924 	bl	800267a <HAL_DMA_Init>

	  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC_BIA1, 800);
 8000432:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000436:	490b      	ldr	r1, [pc, #44]	; (8000464 <Measurement1+0xd8>)
 8000438:	480b      	ldr	r0, [pc, #44]	; (8000468 <Measurement1+0xdc>)
 800043a:	f001 f9d7 	bl	80017ec <HAL_ADC_Start_DMA>
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20002e34 	.word	0x20002e34
 8000448:	200027b0 	.word	0x200027b0
 800044c:	40020030 	.word	0x40020030
 8000450:	20000000 	.word	0x20000000
 8000454:	48000018 	.word	0x48000018
 8000458:	200014b0 	.word	0x200014b0
 800045c:	20004134 	.word	0x20004134
 8000460:	40020408 	.word	0x40020408
 8000464:	20002e74 	.word	0x20002e74
 8000468:	20001460 	.word	0x20001460

0800046c <Measurement2>:

void Measurement2(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Init(&htim6);
 8000470:	482c      	ldr	r0, [pc, #176]	; (8000524 <Measurement2+0xb8>)
 8000472:	f004 f839 	bl	80044e8 <HAL_TIM_Base_Init>
	  HAL_TIM_Base_Start(&htim6);
 8000476:	482b      	ldr	r0, [pc, #172]	; (8000524 <Measurement2+0xb8>)
 8000478:	f004 f862 	bl	8004540 <HAL_TIM_Base_Start>

	  hdma_tim6_up.Instance = DMA1_Channel3;
 800047c:	4b2a      	ldr	r3, [pc, #168]	; (8000528 <Measurement2+0xbc>)
 800047e:	4a2b      	ldr	r2, [pc, #172]	; (800052c <Measurement2+0xc0>)
 8000480:	601a      	str	r2, [r3, #0]
	  hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000482:	4b29      	ldr	r3, [pc, #164]	; (8000528 <Measurement2+0xbc>)
 8000484:	2210      	movs	r2, #16
 8000486:	605a      	str	r2, [r3, #4]
	  hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000488:	4b27      	ldr	r3, [pc, #156]	; (8000528 <Measurement2+0xbc>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
	  hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 800048e:	4b26      	ldr	r3, [pc, #152]	; (8000528 <Measurement2+0xbc>)
 8000490:	2280      	movs	r2, #128	; 0x80
 8000492:	60da      	str	r2, [r3, #12]
	  hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000494:	4b24      	ldr	r3, [pc, #144]	; (8000528 <Measurement2+0xbc>)
 8000496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800049a:	611a      	str	r2, [r3, #16]
	  hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800049c:	4b22      	ldr	r3, [pc, #136]	; (8000528 <Measurement2+0xbc>)
 800049e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004a2:	615a      	str	r2, [r3, #20]
	  hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 80004a4:	4b20      	ldr	r3, [pc, #128]	; (8000528 <Measurement2+0xbc>)
 80004a6:	2220      	movs	r2, #32
 80004a8:	619a      	str	r2, [r3, #24]
	  hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 80004aa:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <Measurement2+0xbc>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_tim6_up);
 80004b0:	481d      	ldr	r0, [pc, #116]	; (8000528 <Measurement2+0xbc>)
 80004b2:	f002 f8e2 	bl	800267a <HAL_DMA_Init>

	  HAL_DMA_Start(&hdma_tim6_up, (uint32_t)DIBS_sequence, (uint32_t)&GPIOA->BSRR, 32); //initialization of data transfer in the DIBS_sequence buffer to the GPIOA periphery
 80004b6:	491e      	ldr	r1, [pc, #120]	; (8000530 <Measurement2+0xc4>)
 80004b8:	2320      	movs	r3, #32
 80004ba:	4a1e      	ldr	r2, [pc, #120]	; (8000534 <Measurement2+0xc8>)
 80004bc:	481a      	ldr	r0, [pc, #104]	; (8000528 <Measurement2+0xbc>)
 80004be:	f002 f923 	bl	8002708 <HAL_DMA_Start>
	  __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 80004c2:	4b18      	ldr	r3, [pc, #96]	; (8000524 <Measurement2+0xb8>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	68da      	ldr	r2, [r3, #12]
 80004c8:	4b16      	ldr	r3, [pc, #88]	; (8000524 <Measurement2+0xb8>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004d0:	60da      	str	r2, [r3, #12]

	  HAL_TIM_Base_Start(&htim3);
 80004d2:	4819      	ldr	r0, [pc, #100]	; (8000538 <Measurement2+0xcc>)
 80004d4:	f004 f834 	bl	8004540 <HAL_TIM_Base_Start>

	  hdma_adc2.Instance = DMA2_Channel1;
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <Measurement2+0xd0>)
 80004da:	4a19      	ldr	r2, [pc, #100]	; (8000540 <Measurement2+0xd4>)
 80004dc:	601a      	str	r2, [r3, #0]
	  hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <Measurement2+0xd0>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	605a      	str	r2, [r3, #4]
	  hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <Measurement2+0xd0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
	  hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80004ea:	4b14      	ldr	r3, [pc, #80]	; (800053c <Measurement2+0xd0>)
 80004ec:	2280      	movs	r2, #128	; 0x80
 80004ee:	60da      	str	r2, [r3, #12]
	  hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <Measurement2+0xd0>)
 80004f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004f6:	611a      	str	r2, [r3, #16]
	  hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004f8:	4b10      	ldr	r3, [pc, #64]	; (800053c <Measurement2+0xd0>)
 80004fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004fe:	615a      	str	r2, [r3, #20]
	  hdma_adc2.Init.Mode = DMA_NORMAL;
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <Measurement2+0xd0>)
 8000502:	2200      	movs	r2, #0
 8000504:	619a      	str	r2, [r3, #24]
	  hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <Measurement2+0xd0>)
 8000508:	2200      	movs	r2, #0
 800050a:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_adc2);
 800050c:	480b      	ldr	r0, [pc, #44]	; (800053c <Measurement2+0xd0>)
 800050e:	f002 f8b4 	bl	800267a <HAL_DMA_Init>

	  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC_BIA2, 800);
 8000512:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000516:	490b      	ldr	r1, [pc, #44]	; (8000544 <Measurement2+0xd8>)
 8000518:	480b      	ldr	r0, [pc, #44]	; (8000548 <Measurement2+0xdc>)
 800051a:	f001 f967 	bl	80017ec <HAL_ADC_Start_DMA>
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20002e34 	.word	0x20002e34
 8000528:	200027b0 	.word	0x200027b0
 800052c:	40020030 	.word	0x40020030
 8000530:	20000000 	.word	0x20000000
 8000534:	48000018 	.word	0x48000018
 8000538:	200014b0 	.word	0x200014b0
 800053c:	20004134 	.word	0x20004134
 8000540:	40020408 	.word	0x40020408
 8000544:	20002170 	.word	0x20002170
 8000548:	20001460 	.word	0x20001460

0800054c <Measurement3>:

void Measurement3(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Init(&htim6);
 8000550:	482c      	ldr	r0, [pc, #176]	; (8000604 <Measurement3+0xb8>)
 8000552:	f003 ffc9 	bl	80044e8 <HAL_TIM_Base_Init>
	  HAL_TIM_Base_Start(&htim6);
 8000556:	482b      	ldr	r0, [pc, #172]	; (8000604 <Measurement3+0xb8>)
 8000558:	f003 fff2 	bl	8004540 <HAL_TIM_Base_Start>

	  hdma_tim6_up.Instance = DMA1_Channel3;
 800055c:	4b2a      	ldr	r3, [pc, #168]	; (8000608 <Measurement3+0xbc>)
 800055e:	4a2b      	ldr	r2, [pc, #172]	; (800060c <Measurement3+0xc0>)
 8000560:	601a      	str	r2, [r3, #0]
	  hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000562:	4b29      	ldr	r3, [pc, #164]	; (8000608 <Measurement3+0xbc>)
 8000564:	2210      	movs	r2, #16
 8000566:	605a      	str	r2, [r3, #4]
	  hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000568:	4b27      	ldr	r3, [pc, #156]	; (8000608 <Measurement3+0xbc>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
	  hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 800056e:	4b26      	ldr	r3, [pc, #152]	; (8000608 <Measurement3+0xbc>)
 8000570:	2280      	movs	r2, #128	; 0x80
 8000572:	60da      	str	r2, [r3, #12]
	  hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000574:	4b24      	ldr	r3, [pc, #144]	; (8000608 <Measurement3+0xbc>)
 8000576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800057a:	611a      	str	r2, [r3, #16]
	  hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <Measurement3+0xbc>)
 800057e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000582:	615a      	str	r2, [r3, #20]
	  hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 8000584:	4b20      	ldr	r3, [pc, #128]	; (8000608 <Measurement3+0xbc>)
 8000586:	2220      	movs	r2, #32
 8000588:	619a      	str	r2, [r3, #24]
	  hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 800058a:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <Measurement3+0xbc>)
 800058c:	2200      	movs	r2, #0
 800058e:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_tim6_up);
 8000590:	481d      	ldr	r0, [pc, #116]	; (8000608 <Measurement3+0xbc>)
 8000592:	f002 f872 	bl	800267a <HAL_DMA_Init>

	  HAL_DMA_Start(&hdma_tim6_up, (uint32_t)DIBS_sequence, (uint32_t)&GPIOA->BSRR, 32); //initialization of data transfer in the DIBS_sequence buffer to the GPIOA periphery
 8000596:	491e      	ldr	r1, [pc, #120]	; (8000610 <Measurement3+0xc4>)
 8000598:	2320      	movs	r3, #32
 800059a:	4a1e      	ldr	r2, [pc, #120]	; (8000614 <Measurement3+0xc8>)
 800059c:	481a      	ldr	r0, [pc, #104]	; (8000608 <Measurement3+0xbc>)
 800059e:	f002 f8b3 	bl	8002708 <HAL_DMA_Start>
	  __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 80005a2:	4b18      	ldr	r3, [pc, #96]	; (8000604 <Measurement3+0xb8>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	68da      	ldr	r2, [r3, #12]
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <Measurement3+0xb8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005b0:	60da      	str	r2, [r3, #12]

	  HAL_TIM_Base_Start(&htim3);
 80005b2:	4819      	ldr	r0, [pc, #100]	; (8000618 <Measurement3+0xcc>)
 80005b4:	f003 ffc4 	bl	8004540 <HAL_TIM_Base_Start>

	  hdma_adc2.Instance = DMA2_Channel1;
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <Measurement3+0xd0>)
 80005ba:	4a19      	ldr	r2, [pc, #100]	; (8000620 <Measurement3+0xd4>)
 80005bc:	601a      	str	r2, [r3, #0]
	  hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <Measurement3+0xd0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	605a      	str	r2, [r3, #4]
	  hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <Measurement3+0xd0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
	  hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <Measurement3+0xd0>)
 80005cc:	2280      	movs	r2, #128	; 0x80
 80005ce:	60da      	str	r2, [r3, #12]
	  hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <Measurement3+0xd0>)
 80005d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005d6:	611a      	str	r2, [r3, #16]
	  hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <Measurement3+0xd0>)
 80005da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005de:	615a      	str	r2, [r3, #20]
	  hdma_adc2.Init.Mode = DMA_NORMAL;
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <Measurement3+0xd0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
	  hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <Measurement3+0xd0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_adc2);
 80005ec:	480b      	ldr	r0, [pc, #44]	; (800061c <Measurement3+0xd0>)
 80005ee:	f002 f844 	bl	800267a <HAL_DMA_Init>

	  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC_BIA3, 800);
 80005f2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005f6:	490b      	ldr	r1, [pc, #44]	; (8000624 <Measurement3+0xd8>)
 80005f8:	480b      	ldr	r0, [pc, #44]	; (8000628 <Measurement3+0xdc>)
 80005fa:	f001 f8f7 	bl	80017ec <HAL_ADC_Start_DMA>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20002e34 	.word	0x20002e34
 8000608:	200027b0 	.word	0x200027b0
 800060c:	40020030 	.word	0x40020030
 8000610:	20000000 	.word	0x20000000
 8000614:	48000018 	.word	0x48000018
 8000618:	200014b0 	.word	0x200014b0
 800061c:	20004134 	.word	0x20004134
 8000620:	40020408 	.word	0x40020408
 8000624:	20000120 	.word	0x20000120
 8000628:	20001460 	.word	0x20001460

0800062c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b092      	sub	sp, #72	; 0x48
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc2);
 8000634:	4899      	ldr	r0, [pc, #612]	; (800089c <HAL_ADC_ConvCpltCallback+0x270>)
 8000636:	f001 f9f5 	bl	8001a24 <HAL_ADC_Stop_DMA>
	HAL_DMA_Abort(&hdma_tim6_up);
 800063a:	4899      	ldr	r0, [pc, #612]	; (80008a0 <HAL_ADC_ConvCpltCallback+0x274>)
 800063c:	f002 f905 	bl	800284a <HAL_DMA_Abort>

	if(Decade == 0)
 8000640:	4b98      	ldr	r3, [pc, #608]	; (80008a4 <HAL_ADC_ConvCpltCallback+0x278>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d166      	bne.n	8000716 <HAL_ADC_ConvCpltCallback+0xea>
	{
		htim3.Init.Prescaler = 999;
 8000648:	4b97      	ldr	r3, [pc, #604]	; (80008a8 <HAL_ADC_ConvCpltCallback+0x27c>)
 800064a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800064e:	605a      	str	r2, [r3, #4]
		htim6.Init.Prescaler = 35999;
 8000650:	4b96      	ldr	r3, [pc, #600]	; (80008ac <HAL_ADC_ConvCpltCallback+0x280>)
 8000652:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000656:	605a      	str	r2, [r3, #4]

		for(int i = 0;i < 800;i++)
 8000658:	2300      	movs	r3, #0
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
 800065c:	e00f      	b.n	800067e <HAL_ADC_ConvCpltCallback+0x52>
		{
			DECADA0[i] = DECADA0[i] + ADC_BIA0[i];
 800065e:	4a94      	ldr	r2, [pc, #592]	; (80008b0 <HAL_ADC_ConvCpltCallback+0x284>)
 8000660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000666:	4993      	ldr	r1, [pc, #588]	; (80008b4 <HAL_ADC_ConvCpltCallback+0x288>)
 8000668:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800066a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800066e:	441a      	add	r2, r3
 8000670:	498f      	ldr	r1, [pc, #572]	; (80008b0 <HAL_ADC_ConvCpltCallback+0x284>)
 8000672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0;i < 800;i++)
 8000678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800067a:	3301      	adds	r3, #1
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
 800067e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000680:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000684:	dbeb      	blt.n	800065e <HAL_ADC_ConvCpltCallback+0x32>
			//printf("%i\n",ADC_BIA[i]);
		}
		for(int i = 0;i < 800;i++)
 8000686:	2300      	movs	r3, #0
 8000688:	643b      	str	r3, [r7, #64]	; 0x40
 800068a:	e007      	b.n	800069c <HAL_ADC_ConvCpltCallback+0x70>
		{
			ADC_BIA0[i] = 0;
 800068c:	4a89      	ldr	r2, [pc, #548]	; (80008b4 <HAL_ADC_ConvCpltCallback+0x288>)
 800068e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000690:	2100      	movs	r1, #0
 8000692:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0;i < 800;i++)
 8000696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000698:	3301      	adds	r3, #1
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
 800069c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800069e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80006a2:	dbf3      	blt.n	800068c <HAL_ADC_ConvCpltCallback+0x60>
		}
		if(Measures < 100)
 80006a4:	4b84      	ldr	r3, [pc, #528]	; (80008b8 <HAL_ADC_ConvCpltCallback+0x28c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b63      	cmp	r3, #99	; 0x63
 80006aa:	dc07      	bgt.n	80006bc <HAL_ADC_ConvCpltCallback+0x90>
		{
			Measures ++;
 80006ac:	4b82      	ldr	r3, [pc, #520]	; (80008b8 <HAL_ADC_ConvCpltCallback+0x28c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a81      	ldr	r2, [pc, #516]	; (80008b8 <HAL_ADC_ConvCpltCallback+0x28c>)
 80006b4:	6013      	str	r3, [r2, #0]
			Measurement0();
 80006b6:	f7ff fdf9 	bl	80002ac <Measurement0>
 80006ba:	e02c      	b.n	8000716 <HAL_ADC_ConvCpltCallback+0xea>
		}
		else
		{
			for(int i = 0;i < 800;i++)
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006c0:	e00e      	b.n	80006e0 <HAL_ADC_ConvCpltCallback+0xb4>
			{
				DECADA0[i] = DECADA0[i]/100;
 80006c2:	4a7b      	ldr	r2, [pc, #492]	; (80008b0 <HAL_ADC_ConvCpltCallback+0x284>)
 80006c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ca:	4a7c      	ldr	r2, [pc, #496]	; (80008bc <HAL_ADC_ConvCpltCallback+0x290>)
 80006cc:	fba2 2303 	umull	r2, r3, r2, r3
 80006d0:	095a      	lsrs	r2, r3, #5
 80006d2:	4977      	ldr	r1, [pc, #476]	; (80008b0 <HAL_ADC_ConvCpltCallback+0x284>)
 80006d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0;i < 800;i++)
 80006da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006dc:	3301      	adds	r3, #1
 80006de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006e2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80006e6:	dbec      	blt.n	80006c2 <HAL_ADC_ConvCpltCallback+0x96>
			}
			for(int i = 0;i < 800;i++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80006ec:	e00a      	b.n	8000704 <HAL_ADC_ConvCpltCallback+0xd8>
			{
				printf("%i\n",DECADA0[i]);
 80006ee:	4a70      	ldr	r2, [pc, #448]	; (80008b0 <HAL_ADC_ConvCpltCallback+0x284>)
 80006f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f6:	4619      	mov	r1, r3
 80006f8:	4871      	ldr	r0, [pc, #452]	; (80008c0 <HAL_ADC_ConvCpltCallback+0x294>)
 80006fa:	f004 fe59 	bl	80053b0 <iprintf>
			for(int i = 0;i < 800;i++)
 80006fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000700:	3301      	adds	r3, #1
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
 8000704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000706:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800070a:	dbf0      	blt.n	80006ee <HAL_ADC_ConvCpltCallback+0xc2>
			}
			Decade ++;
 800070c:	4b65      	ldr	r3, [pc, #404]	; (80008a4 <HAL_ADC_ConvCpltCallback+0x278>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a64      	ldr	r2, [pc, #400]	; (80008a4 <HAL_ADC_ConvCpltCallback+0x278>)
 8000714:	6013      	str	r3, [r2, #0]
		}
	}
	if(Decade == 1)
 8000716:	4b63      	ldr	r3, [pc, #396]	; (80008a4 <HAL_ADC_ConvCpltCallback+0x278>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d165      	bne.n	80007ea <HAL_ADC_ConvCpltCallback+0x1be>
	{
		htim3.Init.Prescaler = 99;
 800071e:	4b62      	ldr	r3, [pc, #392]	; (80008a8 <HAL_ADC_ConvCpltCallback+0x27c>)
 8000720:	2263      	movs	r2, #99	; 0x63
 8000722:	605a      	str	r2, [r3, #4]
		htim6.Init.Prescaler = 3599;
 8000724:	4b61      	ldr	r3, [pc, #388]	; (80008ac <HAL_ADC_ConvCpltCallback+0x280>)
 8000726:	f640 620f 	movw	r2, #3599	; 0xe0f
 800072a:	605a      	str	r2, [r3, #4]

		for(int i = 0;i < 800;i++)
 800072c:	2300      	movs	r3, #0
 800072e:	637b      	str	r3, [r7, #52]	; 0x34
 8000730:	e00f      	b.n	8000752 <HAL_ADC_ConvCpltCallback+0x126>
		{
			DECADA1[i] = DECADA1[i] + ADC_BIA1[i];
 8000732:	4a64      	ldr	r2, [pc, #400]	; (80008c4 <HAL_ADC_ConvCpltCallback+0x298>)
 8000734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073a:	4963      	ldr	r1, [pc, #396]	; (80008c8 <HAL_ADC_ConvCpltCallback+0x29c>)
 800073c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800073e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000742:	441a      	add	r2, r3
 8000744:	495f      	ldr	r1, [pc, #380]	; (80008c4 <HAL_ADC_ConvCpltCallback+0x298>)
 8000746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0;i < 800;i++)
 800074c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800074e:	3301      	adds	r3, #1
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
 8000752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000754:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000758:	dbeb      	blt.n	8000732 <HAL_ADC_ConvCpltCallback+0x106>
			//printf("%i\n",ADC_BIA[i]);
		}
		for(int i = 0;i < 800;i++)
 800075a:	2300      	movs	r3, #0
 800075c:	633b      	str	r3, [r7, #48]	; 0x30
 800075e:	e007      	b.n	8000770 <HAL_ADC_ConvCpltCallback+0x144>
		{
			ADC_BIA1[i] = 0;
 8000760:	4a59      	ldr	r2, [pc, #356]	; (80008c8 <HAL_ADC_ConvCpltCallback+0x29c>)
 8000762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0;i < 800;i++)
 800076a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800076c:	3301      	adds	r3, #1
 800076e:	633b      	str	r3, [r7, #48]	; 0x30
 8000770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000772:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000776:	dbf3      	blt.n	8000760 <HAL_ADC_ConvCpltCallback+0x134>
		}
		if(Measures < 200)
 8000778:	4b4f      	ldr	r3, [pc, #316]	; (80008b8 <HAL_ADC_ConvCpltCallback+0x28c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2bc7      	cmp	r3, #199	; 0xc7
 800077e:	dc07      	bgt.n	8000790 <HAL_ADC_ConvCpltCallback+0x164>
		{
			Measures ++;
 8000780:	4b4d      	ldr	r3, [pc, #308]	; (80008b8 <HAL_ADC_ConvCpltCallback+0x28c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	4a4c      	ldr	r2, [pc, #304]	; (80008b8 <HAL_ADC_ConvCpltCallback+0x28c>)
 8000788:	6013      	str	r3, [r2, #0]
			Measurement1();
 800078a:	f7ff fdff 	bl	800038c <Measurement1>
 800078e:	e02c      	b.n	80007ea <HAL_ADC_ConvCpltCallback+0x1be>
		}
		else
		{
			for(int i = 0;i < 800;i++)
 8000790:	2300      	movs	r3, #0
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000794:	e00e      	b.n	80007b4 <HAL_ADC_ConvCpltCallback+0x188>
			{
				DECADA1[i] = DECADA1[i]/100;
 8000796:	4a4b      	ldr	r2, [pc, #300]	; (80008c4 <HAL_ADC_ConvCpltCallback+0x298>)
 8000798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800079a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079e:	4a47      	ldr	r2, [pc, #284]	; (80008bc <HAL_ADC_ConvCpltCallback+0x290>)
 80007a0:	fba2 2303 	umull	r2, r3, r2, r3
 80007a4:	095a      	lsrs	r2, r3, #5
 80007a6:	4947      	ldr	r1, [pc, #284]	; (80008c4 <HAL_ADC_ConvCpltCallback+0x298>)
 80007a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0;i < 800;i++)
 80007ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b0:	3301      	adds	r3, #1
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80007ba:	dbec      	blt.n	8000796 <HAL_ADC_ConvCpltCallback+0x16a>
			}
			for(int i = 0;i < 800;i++)
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
 80007c0:	e00a      	b.n	80007d8 <HAL_ADC_ConvCpltCallback+0x1ac>
			{
				printf("%i\n",DECADA1[i]);
 80007c2:	4a40      	ldr	r2, [pc, #256]	; (80008c4 <HAL_ADC_ConvCpltCallback+0x298>)
 80007c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ca:	4619      	mov	r1, r3
 80007cc:	483c      	ldr	r0, [pc, #240]	; (80008c0 <HAL_ADC_ConvCpltCallback+0x294>)
 80007ce:	f004 fdef 	bl	80053b0 <iprintf>
			for(int i = 0;i < 800;i++)
 80007d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d4:	3301      	adds	r3, #1
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80007d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007da:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80007de:	dbf0      	blt.n	80007c2 <HAL_ADC_ConvCpltCallback+0x196>
			}
			Decade ++;
 80007e0:	4b30      	ldr	r3, [pc, #192]	; (80008a4 <HAL_ADC_ConvCpltCallback+0x278>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	4a2f      	ldr	r2, [pc, #188]	; (80008a4 <HAL_ADC_ConvCpltCallback+0x278>)
 80007e8:	6013      	str	r3, [r2, #0]
		}
	}
	if(Decade == 2)
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <HAL_ADC_ConvCpltCallback+0x278>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	f040 8084 	bne.w	80008fc <HAL_ADC_ConvCpltCallback+0x2d0>
	{
		htim3.Init.Prescaler = 9;
 80007f4:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <HAL_ADC_ConvCpltCallback+0x27c>)
 80007f6:	2209      	movs	r2, #9
 80007f8:	605a      	str	r2, [r3, #4]
		htim6.Init.Prescaler = 359;
 80007fa:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <HAL_ADC_ConvCpltCallback+0x280>)
 80007fc:	f240 1267 	movw	r2, #359	; 0x167
 8000800:	605a      	str	r2, [r3, #4]

		for(int i = 0;i < 800;i++)
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
 8000806:	e00f      	b.n	8000828 <HAL_ADC_ConvCpltCallback+0x1fc>
		{
			DECADA2[i] = DECADA2[i] + ADC_BIA2[i];
 8000808:	4a30      	ldr	r2, [pc, #192]	; (80008cc <HAL_ADC_ConvCpltCallback+0x2a0>)
 800080a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000810:	492f      	ldr	r1, [pc, #188]	; (80008d0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000814:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000818:	441a      	add	r2, r3
 800081a:	492c      	ldr	r1, [pc, #176]	; (80008cc <HAL_ADC_ConvCpltCallback+0x2a0>)
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0;i < 800;i++)
 8000822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000824:	3301      	adds	r3, #1
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
 8000828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800082e:	dbeb      	blt.n	8000808 <HAL_ADC_ConvCpltCallback+0x1dc>
			//printf("%i\n",ADC_BIA[i]);
		}
		for(int i = 0;i < 800;i++)
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
 8000834:	e007      	b.n	8000846 <HAL_ADC_ConvCpltCallback+0x21a>
		{
			ADC_BIA2[i] = 0;
 8000836:	4a26      	ldr	r2, [pc, #152]	; (80008d0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000838:	6a3b      	ldr	r3, [r7, #32]
 800083a:	2100      	movs	r1, #0
 800083c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0;i < 800;i++)
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	3301      	adds	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
 8000846:	6a3b      	ldr	r3, [r7, #32]
 8000848:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800084c:	dbf3      	blt.n	8000836 <HAL_ADC_ConvCpltCallback+0x20a>
		}
		if(Measures < 300)
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <HAL_ADC_ConvCpltCallback+0x28c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000856:	da07      	bge.n	8000868 <HAL_ADC_ConvCpltCallback+0x23c>
		{
			Measures ++;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <HAL_ADC_ConvCpltCallback+0x28c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	4a16      	ldr	r2, [pc, #88]	; (80008b8 <HAL_ADC_ConvCpltCallback+0x28c>)
 8000860:	6013      	str	r3, [r2, #0]
			Measurement2();
 8000862:	f7ff fe03 	bl	800046c <Measurement2>
 8000866:	e049      	b.n	80008fc <HAL_ADC_ConvCpltCallback+0x2d0>
		}
		else
		{
			for(int i = 0;i < 800;i++)
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	e00e      	b.n	800088c <HAL_ADC_ConvCpltCallback+0x260>
			{
				DECADA2[i] = DECADA2[i]/100;
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <HAL_ADC_ConvCpltCallback+0x2a0>)
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000876:	4a11      	ldr	r2, [pc, #68]	; (80008bc <HAL_ADC_ConvCpltCallback+0x290>)
 8000878:	fba2 2303 	umull	r2, r3, r2, r3
 800087c:	095a      	lsrs	r2, r3, #5
 800087e:	4913      	ldr	r1, [pc, #76]	; (80008cc <HAL_ADC_ConvCpltCallback+0x2a0>)
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0;i < 800;i++)
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3301      	adds	r3, #1
 800088a:	61fb      	str	r3, [r7, #28]
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000892:	dbec      	blt.n	800086e <HAL_ADC_ConvCpltCallback+0x242>
			}
			for(int i = 0;i < 800;i++)
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
 8000898:	e027      	b.n	80008ea <HAL_ADC_ConvCpltCallback+0x2be>
 800089a:	bf00      	nop
 800089c:	20001460 	.word	0x20001460
 80008a0:	200027b0 	.word	0x200027b0
 80008a4:	20000110 	.word	0x20000110
 80008a8:	200014b0 	.word	0x200014b0
 80008ac:	20002e34 	.word	0x20002e34
 80008b0:	20004178 	.word	0x20004178
 80008b4:	200027f4 	.word	0x200027f4
 80008b8:	2000010c 	.word	0x2000010c
 80008bc:	51eb851f 	.word	0x51eb851f
 80008c0:	08006190 	.word	0x08006190
 80008c4:	200014f0 	.word	0x200014f0
 80008c8:	20002e74 	.word	0x20002e74
 80008cc:	20000760 	.word	0x20000760
 80008d0:	20002170 	.word	0x20002170
			{
				printf("%i\n",DECADA2[i]);
 80008d4:	4a3e      	ldr	r2, [pc, #248]	; (80009d0 <HAL_ADC_ConvCpltCallback+0x3a4>)
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008dc:	4619      	mov	r1, r3
 80008de:	483d      	ldr	r0, [pc, #244]	; (80009d4 <HAL_ADC_ConvCpltCallback+0x3a8>)
 80008e0:	f004 fd66 	bl	80053b0 <iprintf>
			for(int i = 0;i < 800;i++)
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	3301      	adds	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80008f0:	dbf0      	blt.n	80008d4 <HAL_ADC_ConvCpltCallback+0x2a8>
			}
			Decade ++;
 80008f2:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <HAL_ADC_ConvCpltCallback+0x3ac>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	4a37      	ldr	r2, [pc, #220]	; (80009d8 <HAL_ADC_ConvCpltCallback+0x3ac>)
 80008fa:	6013      	str	r3, [r2, #0]
		}
	}
	if(Decade == 3)
 80008fc:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <HAL_ADC_ConvCpltCallback+0x3ac>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b03      	cmp	r3, #3
 8000902:	d160      	bne.n	80009c6 <HAL_ADC_ConvCpltCallback+0x39a>
	{
		htim3.Init.Prescaler = 0;
 8000904:	4b35      	ldr	r3, [pc, #212]	; (80009dc <HAL_ADC_ConvCpltCallback+0x3b0>)
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
		htim6.Init.Prescaler = 35;
 800090a:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <HAL_ADC_ConvCpltCallback+0x3b4>)
 800090c:	2223      	movs	r2, #35	; 0x23
 800090e:	605a      	str	r2, [r3, #4]

		for(int i = 0;i < 800;i++)
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	e00f      	b.n	8000936 <HAL_ADC_ConvCpltCallback+0x30a>
		{
			DECADA3[i] = DECADA3[i] + ADC_BIA3[i];
 8000916:	4a33      	ldr	r2, [pc, #204]	; (80009e4 <HAL_ADC_ConvCpltCallback+0x3b8>)
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091e:	4932      	ldr	r1, [pc, #200]	; (80009e8 <HAL_ADC_ConvCpltCallback+0x3bc>)
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000926:	441a      	add	r2, r3
 8000928:	492e      	ldr	r1, [pc, #184]	; (80009e4 <HAL_ADC_ConvCpltCallback+0x3b8>)
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0;i < 800;i++)
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3301      	adds	r3, #1
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800093c:	dbeb      	blt.n	8000916 <HAL_ADC_ConvCpltCallback+0x2ea>
			//printf("%i\n",ADC_BIA[i]);
		}
		for(int i = 0;i < 800;i++)
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	e007      	b.n	8000954 <HAL_ADC_ConvCpltCallback+0x328>
		{
			ADC_BIA3[i] = 0;
 8000944:	4a28      	ldr	r2, [pc, #160]	; (80009e8 <HAL_ADC_ConvCpltCallback+0x3bc>)
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	2100      	movs	r1, #0
 800094a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0;i < 800;i++)
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	3301      	adds	r3, #1
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800095a:	dbf3      	blt.n	8000944 <HAL_ADC_ConvCpltCallback+0x318>
		}
		if(Measures < 400)
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <HAL_ADC_ConvCpltCallback+0x3c0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000964:	da07      	bge.n	8000976 <HAL_ADC_ConvCpltCallback+0x34a>
		{
			Measures ++;
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <HAL_ADC_ConvCpltCallback+0x3c0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3301      	adds	r3, #1
 800096c:	4a1f      	ldr	r2, [pc, #124]	; (80009ec <HAL_ADC_ConvCpltCallback+0x3c0>)
 800096e:	6013      	str	r3, [r2, #0]
			Measurement3();
 8000970:	f7ff fdec 	bl	800054c <Measurement3>
			{
				printf("%i\n",DECADA3[i]);
			}
		}
	}
}
 8000974:	e027      	b.n	80009c6 <HAL_ADC_ConvCpltCallback+0x39a>
			for(int i = 0;i < 800;i++)
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	e00e      	b.n	800099a <HAL_ADC_ConvCpltCallback+0x36e>
				DECADA3[i] = DECADA3[i]/100;
 800097c:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <HAL_ADC_ConvCpltCallback+0x3b8>)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000984:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <HAL_ADC_ConvCpltCallback+0x3c4>)
 8000986:	fba2 2303 	umull	r2, r3, r2, r3
 800098a:	095a      	lsrs	r2, r3, #5
 800098c:	4915      	ldr	r1, [pc, #84]	; (80009e4 <HAL_ADC_ConvCpltCallback+0x3b8>)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0;i < 800;i++)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3301      	adds	r3, #1
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80009a0:	dbec      	blt.n	800097c <HAL_ADC_ConvCpltCallback+0x350>
			for(int i = 0;i < 800;i++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	e00a      	b.n	80009be <HAL_ADC_ConvCpltCallback+0x392>
				printf("%i\n",DECADA3[i]);
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <HAL_ADC_ConvCpltCallback+0x3b8>)
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b0:	4619      	mov	r1, r3
 80009b2:	4808      	ldr	r0, [pc, #32]	; (80009d4 <HAL_ADC_ConvCpltCallback+0x3a8>)
 80009b4:	f004 fcfc 	bl	80053b0 <iprintf>
			for(int i = 0;i < 800;i++)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	3301      	adds	r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80009c4:	dbf0      	blt.n	80009a8 <HAL_ADC_ConvCpltCallback+0x37c>
}
 80009c6:	bf00      	nop
 80009c8:	3748      	adds	r7, #72	; 0x48
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000760 	.word	0x20000760
 80009d4:	08006190 	.word	0x08006190
 80009d8:	20000110 	.word	0x20000110
 80009dc:	200014b0 	.word	0x200014b0
 80009e0:	20002e34 	.word	0x20002e34
 80009e4:	200034b4 	.word	0x200034b4
 80009e8:	20000120 	.word	0x20000120
 80009ec:	2000010c 	.word	0x2000010c
 80009f0:	51eb851f 	.word	0x51eb851f

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b0a6      	sub	sp, #152	; 0x98
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009fe:	2228      	movs	r2, #40	; 0x28
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 fccc 	bl	80053a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2258      	movs	r2, #88	; 0x58
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f004 fcbe 	bl	80053a0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a24:	2302      	movs	r3, #2
 8000a26:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a32:	2302      	movs	r3, #2
 8000a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a40:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 f9de 	bl	8002e14 <HAL_RCC_OscConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 f9f5 	bl	8000e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a62:	230f      	movs	r3, #15
 8000a64:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a66:	2302      	movs	r3, #2
 8000a68:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a72:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 f8de 	bl	8003c40 <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a8a:	f000 f9df 	bl	8000e4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC12
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <SystemClock_Config+0xc8>)
 8000a90:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 fb02 	bl	80040ac <HAL_RCCEx_PeriphCLKConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000aae:	f000 f9cd 	bl	8000e4c <Error_Handler>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3798      	adds	r7, #152	; 0x98
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	00200084 	.word	0x00200084

08000ac0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
 8000ad4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000ad6:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <MX_ADC2_Init+0xb8>)
 8000ad8:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000ada:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <MX_ADC2_Init+0xb8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <MX_ADC2_Init+0xb8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <MX_ADC2_Init+0xb8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000aee:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <MX_ADC2_Init+0xb8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000af4:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <MX_ADC2_Init+0xb8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <MX_ADC2_Init+0xb8>)
 8000afe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <MX_ADC2_Init+0xb8>)
 8000b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_ADC2_Init+0xb8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <MX_ADC2_Init+0xb8>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_ADC2_Init+0xb8>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_ADC2_Init+0xb8>)
 8000b22:	2204      	movs	r2, #4
 8000b24:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_ADC2_Init+0xb8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_ADC2_Init+0xb8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b32:	4811      	ldr	r0, [pc, #68]	; (8000b78 <MX_ADC2_Init+0xb8>)
 8000b34:	f000 fc60 	bl	80013f8 <HAL_ADC_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8000b3e:	f000 f985 	bl	8000e4c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b42:	2303      	movs	r3, #3
 8000b44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4806      	ldr	r0, [pc, #24]	; (8000b78 <MX_ADC2_Init+0xb8>)
 8000b60:	f000 ffbc 	bl	8001adc <HAL_ADC_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8000b6a:	f000 f96f 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20001460 	.word	0x20001460
 8000b7c:	50000100 	.word	0x50000100

08000b80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	; (8000c18 <MX_TIM3_Init+0x98>)
 8000ba2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 179;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000ba6:	22b3      	movs	r2, #179	; 0xb3
 8000ba8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bc2:	4814      	ldr	r0, [pc, #80]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000bc4:	f003 fc90 	bl	80044e8 <HAL_TIM_Base_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000bce:	f000 f93d 	bl	8000e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480d      	ldr	r0, [pc, #52]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000be0:	f003 fcd8 	bl	8004594 <HAL_TIM_ConfigClockSource>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000bea:	f000 f92f 	bl	8000e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bee:	2320      	movs	r3, #32
 8000bf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000bfc:	f003 febc 	bl	8004978 <HAL_TIMEx_MasterConfigSynchronization>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000c06:	f000 f921 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	3720      	adds	r7, #32
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200014b0 	.word	0x200014b0
 8000c18:	40000400 	.word	0x40000400

08000c1c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_TIM6_Init+0x64>)
 8000c2e:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <MX_TIM6_Init+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1799;
 8000c32:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <MX_TIM6_Init+0x64>)
 8000c34:	f240 7207 	movw	r2, #1799	; 0x707
 8000c38:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_TIM6_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_TIM6_Init+0x64>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_TIM6_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <MX_TIM6_Init+0x64>)
 8000c4e:	f003 fc4b 	bl	80044e8 <HAL_TIM_Base_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c58:	f000 f8f8 	bl	8000e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_TIM6_Init+0x64>)
 8000c6a:	f003 fe85 	bl	8004978 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c74:	f000 f8ea 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20002e34 	.word	0x20002e34
 8000c84:	40001000 	.word	0x40001000

08000c88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000c8e:	4a15      	ldr	r2, [pc, #84]	; (8000ce4 <MX_USART3_UART_Init+0x5c>)
 8000c90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000c94:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000c98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_USART3_UART_Init+0x58>)
 8000ccc:	f003 fee0 	bl	8004a90 <HAL_UART_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cd6:	f000 f8b9 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200013e0 	.word	0x200013e0
 8000ce4:	40004800 	.word	0x40004800

08000ce8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_DMA_Init+0x60>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <MX_DMA_Init+0x60>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6153      	str	r3, [r2, #20]
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <MX_DMA_Init+0x60>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <MX_DMA_Init+0x60>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <MX_DMA_Init+0x60>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6153      	str	r3, [r2, #20]
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <MX_DMA_Init+0x60>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	200d      	movs	r0, #13
 8000d24:	f001 fc73 	bl	800260e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d28:	200d      	movs	r0, #13
 8000d2a:	f001 fc8c 	bl	8002646 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	2038      	movs	r0, #56	; 0x38
 8000d34:	f001 fc6b 	bl	800260e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000d38:	2038      	movs	r0, #56	; 0x38
 8000d3a:	f001 fc84 	bl	8002646 <HAL_NVIC_EnableIRQ>

}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000

08000d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d62:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <MX_GPIO_Init+0xd4>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	4a2e      	ldr	r2, [pc, #184]	; (8000e20 <MX_GPIO_Init+0xd4>)
 8000d68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d6c:	6153      	str	r3, [r2, #20]
 8000d6e:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <MX_GPIO_Init+0xd4>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <MX_GPIO_Init+0xd4>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	4a28      	ldr	r2, [pc, #160]	; (8000e20 <MX_GPIO_Init+0xd4>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	6153      	str	r3, [r2, #20]
 8000d86:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <MX_GPIO_Init+0xd4>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <MX_GPIO_Init+0xd4>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	4a22      	ldr	r2, [pc, #136]	; (8000e20 <MX_GPIO_Init+0xd4>)
 8000d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d9c:	6153      	str	r3, [r2, #20]
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <MX_GPIO_Init+0xd4>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <MX_GPIO_Init+0xd4>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <MX_GPIO_Init+0xd4>)
 8000db0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000db4:	6153      	str	r3, [r2, #20]
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <MX_GPIO_Init+0xd4>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dca:	f002 f80b 	bl	8002de4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd4:	4813      	ldr	r0, [pc, #76]	; (8000e24 <MX_GPIO_Init+0xd8>)
 8000dd6:	f002 f805 	bl	8002de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df4:	f001 fe6c 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000df8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <MX_GPIO_Init+0xd8>)
 8000e12:	f001 fe5d 	bl	8002ad0 <HAL_GPIO_Init>

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000
 8000e24:	48000400 	.word	0x48000400

08000e28 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000e30:	1d39      	adds	r1, r7, #4
 8000e32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e36:	2201      	movs	r2, #1
 8000e38:	4803      	ldr	r0, [pc, #12]	; (8000e48 <__io_putchar+0x20>)
 8000e3a:	f003 fe77 	bl	8004b2c <HAL_UART_Transmit>

  return ch;
 8000e3e:	687b      	ldr	r3, [r7, #4]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200013e0 	.word	0x200013e0

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6193      	str	r3, [r2, #24]
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a29      	ldr	r2, [pc, #164]	; (8000f68 <HAL_ADC_MspInit+0xc4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d14c      	bne.n	8000f60 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ec6:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <HAL_ADC_MspInit+0xc8>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	4a28      	ldr	r2, [pc, #160]	; (8000f6c <HAL_ADC_MspInit+0xc8>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	6153      	str	r3, [r2, #20]
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <HAL_ADC_MspInit+0xc8>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <HAL_ADC_MspInit+0xc8>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	4a22      	ldr	r2, [pc, #136]	; (8000f6c <HAL_ADC_MspInit+0xc8>)
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee8:	6153      	str	r3, [r2, #20]
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <HAL_ADC_MspInit+0xc8>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PA6     ------> ADC2_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ef6:	2340      	movs	r3, #64	; 0x40
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efa:	2303      	movs	r3, #3
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f001 fde0 	bl	8002ad0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <HAL_ADC_MspInit+0xcc>)
 8000f12:	4a18      	ldr	r2, [pc, #96]	; (8000f74 <HAL_ADC_MspInit+0xd0>)
 8000f14:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_ADC_MspInit+0xcc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_ADC_MspInit+0xcc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_ADC_MspInit+0xcc>)
 8000f24:	2280      	movs	r2, #128	; 0x80
 8000f26:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <HAL_ADC_MspInit+0xcc>)
 8000f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f2e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_ADC_MspInit+0xcc>)
 8000f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f36:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_ADC_MspInit+0xcc>)
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_ADC_MspInit+0xcc>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000f44:	480a      	ldr	r0, [pc, #40]	; (8000f70 <HAL_ADC_MspInit+0xcc>)
 8000f46:	f001 fb98 	bl	800267a <HAL_DMA_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000f50:	f7ff ff7c 	bl	8000e4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <HAL_ADC_MspInit+0xcc>)
 8000f58:	639a      	str	r2, [r3, #56]	; 0x38
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <HAL_ADC_MspInit+0xcc>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	50000100 	.word	0x50000100
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	20004134 	.word	0x20004134
 8000f74:	40020408 	.word	0x40020408

08000f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a29      	ldr	r2, [pc, #164]	; (800102c <HAL_TIM_Base_MspInit+0xb4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10c      	bne.n	8000fa4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f8a:	4b29      	ldr	r3, [pc, #164]	; (8001030 <HAL_TIM_Base_MspInit+0xb8>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a28      	ldr	r2, [pc, #160]	; (8001030 <HAL_TIM_Base_MspInit+0xb8>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b26      	ldr	r3, [pc, #152]	; (8001030 <HAL_TIM_Base_MspInit+0xb8>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000fa2:	e03e      	b.n	8001022 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM6)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a22      	ldr	r2, [pc, #136]	; (8001034 <HAL_TIM_Base_MspInit+0xbc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d139      	bne.n	8001022 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <HAL_TIM_Base_MspInit+0xb8>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a1f      	ldr	r2, [pc, #124]	; (8001030 <HAL_TIM_Base_MspInit+0xb8>)
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <HAL_TIM_Base_MspInit+0xb8>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Channel3;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <HAL_TIM_Base_MspInit+0xc0>)
 8000fc8:	4a1c      	ldr	r2, [pc, #112]	; (800103c <HAL_TIM_Base_MspInit+0xc4>)
 8000fca:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <HAL_TIM_Base_MspInit+0xc0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <HAL_TIM_Base_MspInit+0xc0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_TIM_Base_MspInit+0xc0>)
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_TIM_Base_MspInit+0xc0>)
 8000fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe4:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_TIM_Base_MspInit+0xc0>)
 8000fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fec:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_TIM_Base_MspInit+0xc0>)
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_TIM_Base_MspInit+0xc0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8000ffa:	480f      	ldr	r0, [pc, #60]	; (8001038 <HAL_TIM_Base_MspInit+0xc0>)
 8000ffc:	f001 fb3d 	bl	800267a <HAL_DMA_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 8001006:	f7ff ff21 	bl	8000e4c <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_TIM_Base_MspInit+0xc8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a0c      	ldr	r2, [pc, #48]	; (8001040 <HAL_TIM_Base_MspInit+0xc8>)
 8001010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001014:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_TIM_Base_MspInit+0xc0>)
 800101a:	621a      	str	r2, [r3, #32]
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_TIM_Base_MspInit+0xc0>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40000400 	.word	0x40000400
 8001030:	40021000 	.word	0x40021000
 8001034:	40001000 	.word	0x40001000
 8001038:	200027b0 	.word	0x200027b0
 800103c:	40020030 	.word	0x40020030
 8001040:	40010000 	.word	0x40010000

08001044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <HAL_UART_MspInit+0x7c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d128      	bne.n	80010b8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_UART_MspInit+0x80>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <HAL_UART_MspInit+0x80>)
 800106c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001070:	61d3      	str	r3, [r2, #28]
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_UART_MspInit+0x80>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_UART_MspInit+0x80>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4a10      	ldr	r2, [pc, #64]	; (80010c4 <HAL_UART_MspInit+0x80>)
 8001084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001088:	6153      	str	r3, [r2, #20]
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_UART_MspInit+0x80>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001096:	f44f 7340 	mov.w	r3, #768	; 0x300
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010a8:	2307      	movs	r3, #7
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <HAL_UART_MspInit+0x84>)
 80010b4:	f001 fd0c 	bl	8002ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	; 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40004800 	.word	0x40004800
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48000c00 	.word	0x48000c00

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <MemManage_Handler+0x4>

080010e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001120:	f000 f936 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}

08001128 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <DMA1_Channel3_IRQHandler+0x10>)
 800112e:	f001 fbc5 	bl	80028bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200027b0 	.word	0x200027b0

0800113c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <DMA2_Channel1_IRQHandler+0x10>)
 8001142:	f001 fbbb 	bl	80028bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20004134 	.word	0x20004134

08001150 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e00a      	b.n	8001178 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001162:	f3af 8000 	nop.w
 8001166:	4601      	mov	r1, r0
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	60ba      	str	r2, [r7, #8]
 800116e:	b2ca      	uxtb	r2, r1
 8001170:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	429a      	cmp	r2, r3
 800117e:	dbf0      	blt.n	8001162 <_read+0x12>
	}

return len;
 8001180:	687b      	ldr	r3, [r7, #4]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	e009      	b.n	80011b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	60ba      	str	r2, [r7, #8]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fe3f 	bl	8000e28 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3301      	adds	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dbf1      	blt.n	800119c <_write+0x12>
	}
	return len;
 80011b8:	687b      	ldr	r3, [r7, #4]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_close>:

int _close(int file)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	return -1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ea:	605a      	str	r2, [r3, #4]
	return 0;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <_isatty>:

int _isatty(int file)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
	return 1;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
	return 0;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <_sbrk+0x50>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <_sbrk+0x16>
		heap_end = &end;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <_sbrk+0x50>)
 800123e:	4a10      	ldr	r2, [pc, #64]	; (8001280 <_sbrk+0x54>)
 8001240:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <_sbrk+0x50>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <_sbrk+0x50>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	466a      	mov	r2, sp
 8001252:	4293      	cmp	r3, r2
 8001254:	d907      	bls.n	8001266 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001256:	f004 f879 	bl	800534c <__errno>
 800125a:	4602      	mov	r2, r0
 800125c:	230c      	movs	r3, #12
 800125e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001264:	e006      	b.n	8001274 <_sbrk+0x48>
	}

	heap_end += incr;
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <_sbrk+0x50>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	4a03      	ldr	r2, [pc, #12]	; (800127c <_sbrk+0x50>)
 8001270:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000114 	.word	0x20000114
 8001280:	20004e00 	.word	0x20004e00

08001284 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <SystemInit+0x28>)
 800128a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128e:	4a07      	ldr	r2, [pc, #28]	; (80012ac <SystemInit+0x28>)
 8001290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SystemInit+0x28>)
 800129a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800129e:	609a      	str	r2, [r3, #8]
#endif
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012b6:	e003      	b.n	80012c0 <LoopCopyDataInit>

080012b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012be:	3104      	adds	r1, #4

080012c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012c0:	480b      	ldr	r0, [pc, #44]	; (80012f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012c8:	d3f6      	bcc.n	80012b8 <CopyDataInit>
	ldr	r2, =_sbss
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012cc:	e002      	b.n	80012d4 <LoopFillZerobss>

080012ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012d0:	f842 3b04 	str.w	r3, [r2], #4

080012d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <LoopForever+0x16>)
	cmp	r2, r3
 80012d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012d8:	d3f9      	bcc.n	80012ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012da:	f7ff ffd3 	bl	8001284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012de:	f004 f83b 	bl	8005358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012e2:	f7fe ffcd 	bl	8000280 <main>

080012e6 <LoopForever>:

LoopForever:
    b LoopForever
 80012e6:	e7fe      	b.n	80012e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012e8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80012ec:	0800626c 	.word	0x0800626c
	ldr	r0, =_sdata
 80012f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012f4:	200000f0 	.word	0x200000f0
	ldr	r2, =_sbss
 80012f8:	200000f0 	.word	0x200000f0
	ldr	r3, = _ebss
 80012fc:	20004e00 	.word	0x20004e00

08001300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC1_2_IRQHandler>
	...

08001304 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_Init+0x28>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_Init+0x28>)
 800130e:	f043 0310 	orr.w	r3, r3, #16
 8001312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001314:	2003      	movs	r0, #3
 8001316:	f001 f96f 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f808 	bl	8001330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001320:	f7ff fd9c 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40022000 	.word	0x40022000

08001330 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x54>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x58>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	fbb3 f3f1 	udiv	r3, r3, r1
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f001 f987 	bl	8002662 <HAL_SYSTICK_Config>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e00e      	b.n	800137c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d80a      	bhi.n	800137a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800136c:	f001 f94f 	bl	800260e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_InitTick+0x5c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000080 	.word	0x20000080
 8001388:	20000088 	.word	0x20000088
 800138c:	20000084 	.word	0x20000084

08001390 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x20>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_IncTick+0x24>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000088 	.word	0x20000088
 80013b4:	20004df8 	.word	0x20004df8

080013b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_GetTick+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20004df8 	.word	0x20004df8

080013d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b09a      	sub	sp, #104	; 0x68
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e1e3      	b.n	80017e0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	2b00      	cmp	r3, #0
 8001428:	d176      	bne.n	8001518 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	2b00      	cmp	r3, #0
 8001430:	d152      	bne.n	80014d8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff fd29 	bl	8000ea4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d13b      	bne.n	80014d8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 feeb 	bl	800223c <ADC_Disable>
 8001466:	4603      	mov	r3, r0
 8001468:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	2b00      	cmp	r3, #0
 8001476:	d12f      	bne.n	80014d8 <HAL_ADC_Init+0xe0>
 8001478:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800147c:	2b00      	cmp	r3, #0
 800147e:	d12b      	bne.n	80014d8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001488:	f023 0302 	bic.w	r3, r3, #2
 800148c:	f043 0202 	orr.w	r2, r3, #2
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014a2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014b2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014b4:	4b92      	ldr	r3, [pc, #584]	; (8001700 <HAL_ADC_Init+0x308>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a92      	ldr	r2, [pc, #584]	; (8001704 <HAL_ADC_Init+0x30c>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	0c9a      	lsrs	r2, r3, #18
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014ca:	e002      	b.n	80014d2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f9      	bne.n	80014cc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d007      	beq.n	80014f6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014f4:	d110      	bne.n	8001518 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f023 0312 	bic.w	r3, r3, #18
 80014fe:	f043 0210 	orr.w	r2, r3, #16
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f043 0201 	orr.w	r2, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	2b00      	cmp	r3, #0
 8001522:	f040 8150 	bne.w	80017c6 <HAL_ADC_Init+0x3ce>
 8001526:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800152a:	2b00      	cmp	r3, #0
 800152c:	f040 814b 	bne.w	80017c6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800153a:	2b00      	cmp	r3, #0
 800153c:	f040 8143 	bne.w	80017c6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001548:	f043 0202 	orr.w	r2, r3, #2
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001558:	d004      	beq.n	8001564 <HAL_ADC_Init+0x16c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a6a      	ldr	r2, [pc, #424]	; (8001708 <HAL_ADC_Init+0x310>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d101      	bne.n	8001568 <HAL_ADC_Init+0x170>
 8001564:	4b69      	ldr	r3, [pc, #420]	; (800170c <HAL_ADC_Init+0x314>)
 8001566:	e000      	b.n	800156a <HAL_ADC_Init+0x172>
 8001568:	4b69      	ldr	r3, [pc, #420]	; (8001710 <HAL_ADC_Init+0x318>)
 800156a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001574:	d102      	bne.n	800157c <HAL_ADC_Init+0x184>
 8001576:	4b64      	ldr	r3, [pc, #400]	; (8001708 <HAL_ADC_Init+0x310>)
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	e01a      	b.n	80015b2 <HAL_ADC_Init+0x1ba>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a61      	ldr	r2, [pc, #388]	; (8001708 <HAL_ADC_Init+0x310>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d103      	bne.n	800158e <HAL_ADC_Init+0x196>
 8001586:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	e011      	b.n	80015b2 <HAL_ADC_Init+0x1ba>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a60      	ldr	r2, [pc, #384]	; (8001714 <HAL_ADC_Init+0x31c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d102      	bne.n	800159e <HAL_ADC_Init+0x1a6>
 8001598:	4b5f      	ldr	r3, [pc, #380]	; (8001718 <HAL_ADC_Init+0x320>)
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	e009      	b.n	80015b2 <HAL_ADC_Init+0x1ba>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a5d      	ldr	r2, [pc, #372]	; (8001718 <HAL_ADC_Init+0x320>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d102      	bne.n	80015ae <HAL_ADC_Init+0x1b6>
 80015a8:	4b5a      	ldr	r3, [pc, #360]	; (8001714 <HAL_ADC_Init+0x31c>)
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	e001      	b.n	80015b2 <HAL_ADC_Init+0x1ba>
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d108      	bne.n	80015d2 <HAL_ADC_Init+0x1da>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d101      	bne.n	80015d2 <HAL_ADC_Init+0x1da>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_ADC_Init+0x1dc>
 80015d2:	2300      	movs	r3, #0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d11c      	bne.n	8001612 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015d8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d010      	beq.n	8001600 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d107      	bne.n	80015fa <HAL_ADC_Init+0x202>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_Init+0x202>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_ADC_Init+0x204>
 80015fa:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d108      	bne.n	8001612 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	431a      	orrs	r2, r3
 800160e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001610:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7e5b      	ldrb	r3, [r3, #25]
 8001616:	035b      	lsls	r3, r3, #13
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800161c:	2a01      	cmp	r2, #1
 800161e:	d002      	beq.n	8001626 <HAL_ADC_Init+0x22e>
 8001620:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001624:	e000      	b.n	8001628 <HAL_ADC_Init+0x230>
 8001626:	2200      	movs	r2, #0
 8001628:	431a      	orrs	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	4313      	orrs	r3, r2
 8001636:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001638:	4313      	orrs	r3, r2
 800163a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d11b      	bne.n	800167e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7e5b      	ldrb	r3, [r3, #25]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	3b01      	subs	r3, #1
 8001654:	045a      	lsls	r2, r3, #17
 8001656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001658:	4313      	orrs	r3, r2
 800165a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165e:	663b      	str	r3, [r7, #96]	; 0x60
 8001660:	e00d      	b.n	800167e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800166a:	f043 0220 	orr.w	r2, r3, #32
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f043 0201 	orr.w	r2, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	2b01      	cmp	r3, #1
 8001684:	d054      	beq.n	8001730 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a22      	ldr	r2, [pc, #136]	; (8001714 <HAL_ADC_Init+0x31c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d004      	beq.n	800169a <HAL_ADC_Init+0x2a2>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a20      	ldr	r2, [pc, #128]	; (8001718 <HAL_ADC_Init+0x320>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d140      	bne.n	800171c <HAL_ADC_Init+0x324>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80016a2:	d02a      	beq.n	80016fa <HAL_ADC_Init+0x302>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ac:	d022      	beq.n	80016f4 <HAL_ADC_Init+0x2fc>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80016b6:	d01a      	beq.n	80016ee <HAL_ADC_Init+0x2f6>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80016c0:	d012      	beq.n	80016e8 <HAL_ADC_Init+0x2f0>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80016ca:	d00a      	beq.n	80016e2 <HAL_ADC_Init+0x2ea>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80016d4:	d002      	beq.n	80016dc <HAL_ADC_Init+0x2e4>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	e023      	b.n	8001724 <HAL_ADC_Init+0x32c>
 80016dc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016e0:	e020      	b.n	8001724 <HAL_ADC_Init+0x32c>
 80016e2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016e6:	e01d      	b.n	8001724 <HAL_ADC_Init+0x32c>
 80016e8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80016ec:	e01a      	b.n	8001724 <HAL_ADC_Init+0x32c>
 80016ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f2:	e017      	b.n	8001724 <HAL_ADC_Init+0x32c>
 80016f4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80016f8:	e014      	b.n	8001724 <HAL_ADC_Init+0x32c>
 80016fa:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80016fe:	e011      	b.n	8001724 <HAL_ADC_Init+0x32c>
 8001700:	20000080 	.word	0x20000080
 8001704:	431bde83 	.word	0x431bde83
 8001708:	50000100 	.word	0x50000100
 800170c:	50000300 	.word	0x50000300
 8001710:	50000700 	.word	0x50000700
 8001714:	50000400 	.word	0x50000400
 8001718:	50000500 	.word	0x50000500
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001728:	4313      	orrs	r3, r2
 800172a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800172c:	4313      	orrs	r3, r2
 800172e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b00      	cmp	r3, #0
 800173c:	d114      	bne.n	8001768 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800174c:	f023 0302 	bic.w	r3, r3, #2
 8001750:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7e1b      	ldrb	r3, [r3, #24]
 8001756:	039a      	lsls	r2, r3, #14
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4313      	orrs	r3, r2
 8001762:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001764:	4313      	orrs	r3, r2
 8001766:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_ADC_Init+0x3f0>)
 8001770:	4013      	ands	r3, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001778:	430b      	orrs	r3, r1
 800177a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d10c      	bne.n	800179e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f023 010f 	bic.w	r1, r3, #15
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	1e5a      	subs	r2, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	631a      	str	r2, [r3, #48]	; 0x30
 800179c:	e007      	b.n	80017ae <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 020f 	bic.w	r2, r2, #15
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f023 0303 	bic.w	r3, r3, #3
 80017bc:	f043 0201 	orr.w	r2, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	641a      	str	r2, [r3, #64]	; 0x40
 80017c4:	e00a      	b.n	80017dc <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f023 0312 	bic.w	r3, r3, #18
 80017ce:	f043 0210 	orr.w	r2, r3, #16
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80017d6:	2301      	movs	r3, #1
 80017d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80017dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3768      	adds	r7, #104	; 0x68
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	fff0c007 	.word	0xfff0c007

080017ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b00      	cmp	r3, #0
 8001808:	f040 80f7 	bne.w	80019fa <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_ADC_Start_DMA+0x2e>
 8001816:	2302      	movs	r3, #2
 8001818:	e0f2      	b.n	8001a00 <HAL_ADC_Start_DMA+0x214>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800182a:	d004      	beq.n	8001836 <HAL_ADC_Start_DMA+0x4a>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a75      	ldr	r2, [pc, #468]	; (8001a08 <HAL_ADC_Start_DMA+0x21c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d109      	bne.n	800184a <HAL_ADC_Start_DMA+0x5e>
 8001836:	4b75      	ldr	r3, [pc, #468]	; (8001a0c <HAL_ADC_Start_DMA+0x220>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	2b00      	cmp	r3, #0
 8001840:	bf0c      	ite	eq
 8001842:	2301      	moveq	r3, #1
 8001844:	2300      	movne	r3, #0
 8001846:	b2db      	uxtb	r3, r3
 8001848:	e008      	b.n	800185c <HAL_ADC_Start_DMA+0x70>
 800184a:	4b71      	ldr	r3, [pc, #452]	; (8001a10 <HAL_ADC_Start_DMA+0x224>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	2b00      	cmp	r3, #0
 8001854:	bf0c      	ite	eq
 8001856:	2301      	moveq	r3, #1
 8001858:	2300      	movne	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80c5 	beq.w	80019ec <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 fc8c 	bl	8002180 <ADC_Enable>
 8001868:	4603      	mov	r3, r0
 800186a:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 80b7 	bne.w	80019e2 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001890:	d004      	beq.n	800189c <HAL_ADC_Start_DMA+0xb0>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a5c      	ldr	r2, [pc, #368]	; (8001a08 <HAL_ADC_Start_DMA+0x21c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d106      	bne.n	80018aa <HAL_ADC_Start_DMA+0xbe>
 800189c:	4b5b      	ldr	r3, [pc, #364]	; (8001a0c <HAL_ADC_Start_DMA+0x220>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 031f 	and.w	r3, r3, #31
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d010      	beq.n	80018ca <HAL_ADC_Start_DMA+0xde>
 80018a8:	e005      	b.n	80018b6 <HAL_ADC_Start_DMA+0xca>
 80018aa:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <HAL_ADC_Start_DMA+0x224>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_ADC_Start_DMA+0xde>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018be:	d004      	beq.n	80018ca <HAL_ADC_Start_DMA+0xde>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a53      	ldr	r2, [pc, #332]	; (8001a14 <HAL_ADC_Start_DMA+0x228>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d115      	bne.n	80018f6 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d036      	beq.n	8001952 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80018f4:	e02d      	b.n	8001952 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800190a:	d004      	beq.n	8001916 <HAL_ADC_Start_DMA+0x12a>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a3d      	ldr	r2, [pc, #244]	; (8001a08 <HAL_ADC_Start_DMA+0x21c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d10a      	bne.n	800192c <HAL_ADC_Start_DMA+0x140>
 8001916:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf14      	ite	ne
 8001924:	2301      	movne	r3, #1
 8001926:	2300      	moveq	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	e008      	b.n	800193e <HAL_ADC_Start_DMA+0x152>
 800192c:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <HAL_ADC_Start_DMA+0x228>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf14      	ite	ne
 8001938:	2301      	movne	r3, #1
 800193a:	2300      	moveq	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d007      	beq.n	8001952 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800194a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800195a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800195e:	d106      	bne.n	800196e <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	f023 0206 	bic.w	r2, r3, #6
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	645a      	str	r2, [r3, #68]	; 0x44
 800196c:	e002      	b.n	8001974 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001980:	4a25      	ldr	r2, [pc, #148]	; (8001a18 <HAL_ADC_Start_DMA+0x22c>)
 8001982:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001988:	4a24      	ldr	r2, [pc, #144]	; (8001a1c <HAL_ADC_Start_DMA+0x230>)
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001990:	4a23      	ldr	r2, [pc, #140]	; (8001a20 <HAL_ADC_Start_DMA+0x234>)
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	221c      	movs	r2, #28
 800199a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0210 	orr.w	r2, r2, #16
 80019aa:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3340      	adds	r3, #64	; 0x40
 80019c6:	4619      	mov	r1, r3
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f000 fede 	bl	800278c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0204 	orr.w	r2, r2, #4
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	e00d      	b.n	80019fe <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80019ea:	e008      	b.n	80019fe <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80019f8:	e001      	b.n	80019fe <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019fa:	2302      	movs	r3, #2
 80019fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	50000100 	.word	0x50000100
 8001a0c:	50000300 	.word	0x50000300
 8001a10:	50000700 	.word	0x50000700
 8001a14:	50000400 	.word	0x50000400
 8001a18:	080020b5 	.word	0x080020b5
 8001a1c:	0800212f 	.word	0x0800212f
 8001a20:	0800214b 	.word	0x0800214b

08001a24 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_Stop_DMA+0x1a>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e04a      	b.n	8001ad4 <HAL_ADC_Stop_DMA+0xb0>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001a46:	216c      	movs	r1, #108	; 0x6c
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fc57 	bl	80022fc <ADC_ConversionStop>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d138      	bne.n	8001aca <HAL_ADC_Stop_DMA+0xa6>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0201 	bic.w	r2, r2, #1
 8001a66:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 feec 	bl	800284a <HAL_DMA_Abort>
 8001a72:	4603      	mov	r3, r0
 8001a74:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_ADC_Stop_DMA+0x64>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0210 	bic.w	r2, r2, #16
 8001a96:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d105      	bne.n	8001aaa <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fbcc 	bl	800223c <ADC_Disable>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	e002      	b.n	8001ab0 <HAL_ADC_Stop_DMA+0x8c>
    }
    else
    {
      ADC_Disable(hadc);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 fbc6 	bl	800223c <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HAL_ADC_Stop_DMA+0xa6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	f043 0201 	orr.w	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b09b      	sub	sp, #108	; 0x6c
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x22>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e2cb      	b.n	8002096 <HAL_ADC_ConfigChannel+0x5ba>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f040 82af 	bne.w	8002074 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d81c      	bhi.n	8001b58 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	461a      	mov	r2, r3
 8001b32:	231f      	movs	r3, #31
 8001b34:	4093      	lsls	r3, r2
 8001b36:	43db      	mvns	r3, r3
 8001b38:	4019      	ands	r1, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	631a      	str	r2, [r3, #48]	; 0x30
 8001b56:	e063      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b09      	cmp	r3, #9
 8001b5e:	d81e      	bhi.n	8001b9e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	3b1e      	subs	r3, #30
 8001b74:	221f      	movs	r2, #31
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	4019      	ands	r1, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	3b1e      	subs	r3, #30
 8001b90:	fa00 f203 	lsl.w	r2, r0, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	635a      	str	r2, [r3, #52]	; 0x34
 8001b9c:	e040      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b0e      	cmp	r3, #14
 8001ba4:	d81e      	bhi.n	8001be4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	3b3c      	subs	r3, #60	; 0x3c
 8001bba:	221f      	movs	r2, #31
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	4019      	ands	r1, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	3b3c      	subs	r3, #60	; 0x3c
 8001bd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38
 8001be2:	e01d      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	3b5a      	subs	r3, #90	; 0x5a
 8001bf8:	221f      	movs	r2, #31
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	4019      	ands	r1, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	3b5a      	subs	r3, #90	; 0x5a
 8001c14:	fa00 f203 	lsl.w	r2, r0, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f040 80e5 	bne.w	8001dfa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b09      	cmp	r3, #9
 8001c36:	d91c      	bls.n	8001c72 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6999      	ldr	r1, [r3, #24]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	3b1e      	subs	r3, #30
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4019      	ands	r1, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6898      	ldr	r0, [r3, #8]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	3b1e      	subs	r3, #30
 8001c64:	fa00 f203 	lsl.w	r2, r0, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	619a      	str	r2, [r3, #24]
 8001c70:	e019      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6959      	ldr	r1, [r3, #20]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	2207      	movs	r2, #7
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	4019      	ands	r1, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6898      	ldr	r0, [r3, #8]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d84f      	bhi.n	8001d68 <HAL_ADC_ConfigChannel+0x28c>
 8001cc8:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <HAL_ADC_ConfigChannel+0x1f4>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001ce1 	.word	0x08001ce1
 8001cd4:	08001d03 	.word	0x08001d03
 8001cd8:	08001d25 	.word	0x08001d25
 8001cdc:	08001d47 	.word	0x08001d47
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ce6:	4b9f      	ldr	r3, [pc, #636]	; (8001f64 <HAL_ADC_ConfigChannel+0x488>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	0691      	lsls	r1, r2, #26
 8001cf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cfe:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d00:	e07e      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d08:	4b96      	ldr	r3, [pc, #600]	; (8001f64 <HAL_ADC_ConfigChannel+0x488>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	0691      	lsls	r1, r2, #26
 8001d12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d14:	430a      	orrs	r2, r1
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d20:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d22:	e06d      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d2a:	4b8e      	ldr	r3, [pc, #568]	; (8001f64 <HAL_ADC_ConfigChannel+0x488>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	0691      	lsls	r1, r2, #26
 8001d34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d36:	430a      	orrs	r2, r1
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d42:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d44:	e05c      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d4c:	4b85      	ldr	r3, [pc, #532]	; (8001f64 <HAL_ADC_ConfigChannel+0x488>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	0691      	lsls	r1, r2, #26
 8001d56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d64:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d66:	e04b      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	069b      	lsls	r3, r3, #26
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d107      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d8a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	069b      	lsls	r3, r3, #26
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d107      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dae:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001db6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	069b      	lsls	r3, r3, #26
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d107      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dd2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	069b      	lsls	r3, r3, #26
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d10a      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001df6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001df8:	e001      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001dfa:	bf00      	nop
 8001dfc:	e000      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001dfe:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d108      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x344>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x344>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x346>
 8001e20:	2300      	movs	r3, #0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 8131 	bne.w	800208a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d00f      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	400a      	ands	r2, r1
 8001e4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001e4e:	e049      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b09      	cmp	r3, #9
 8001e70:	d91c      	bls.n	8001eac <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6999      	ldr	r1, [r3, #24]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	3b1b      	subs	r3, #27
 8001e84:	2207      	movs	r2, #7
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	4019      	ands	r1, r3
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	6898      	ldr	r0, [r3, #8]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4613      	mov	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3b1b      	subs	r3, #27
 8001e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	619a      	str	r2, [r3, #24]
 8001eaa:	e01b      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6959      	ldr	r1, [r3, #20]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	4019      	ands	r1, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6898      	ldr	r0, [r3, #8]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eec:	d004      	beq.n	8001ef8 <HAL_ADC_ConfigChannel+0x41c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1d      	ldr	r2, [pc, #116]	; (8001f68 <HAL_ADC_ConfigChannel+0x48c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x420>
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <HAL_ADC_ConfigChannel+0x490>)
 8001efa:	e000      	b.n	8001efe <HAL_ADC_ConfigChannel+0x422>
 8001efc:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <HAL_ADC_ConfigChannel+0x494>)
 8001efe:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d105      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d015      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f18:	2b11      	cmp	r3, #17
 8001f1a:	d105      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00b      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f2c:	2b12      	cmp	r3, #18
 8001f2e:	f040 80ac 	bne.w	800208a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 80a5 	bne.w	800208a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f48:	d102      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x474>
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <HAL_ADC_ConfigChannel+0x48c>)
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	e023      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x4bc>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <HAL_ADC_ConfigChannel+0x48c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10c      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x498>
 8001f5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	e01a      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x4bc>
 8001f62:	bf00      	nop
 8001f64:	83fff000 	.word	0x83fff000
 8001f68:	50000100 	.word	0x50000100
 8001f6c:	50000300 	.word	0x50000300
 8001f70:	50000700 	.word	0x50000700
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a4a      	ldr	r2, [pc, #296]	; (80020a4 <HAL_ADC_ConfigChannel+0x5c8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d102      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x4a8>
 8001f7e:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <HAL_ADC_ConfigChannel+0x5cc>)
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	e009      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x4bc>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a47      	ldr	r2, [pc, #284]	; (80020a8 <HAL_ADC_ConfigChannel+0x5cc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d102      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x4b8>
 8001f8e:	4b45      	ldr	r3, [pc, #276]	; (80020a4 <HAL_ADC_ConfigChannel+0x5c8>)
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	e001      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x4bc>
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d108      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x4dc>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x4dc>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_ADC_ConfigChannel+0x4de>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d150      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001fbe:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d010      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d107      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x504>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x504>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x506>
 8001fe0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d13c      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b10      	cmp	r3, #16
 8001fec:	d11d      	bne.n	800202a <HAL_ADC_ConfigChannel+0x54e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ff6:	d118      	bne.n	800202a <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002002:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002004:	4b29      	ldr	r3, [pc, #164]	; (80020ac <HAL_ADC_ConfigChannel+0x5d0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a29      	ldr	r2, [pc, #164]	; (80020b0 <HAL_ADC_ConfigChannel+0x5d4>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0c9a      	lsrs	r2, r3, #18
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800201a:	e002      	b.n	8002022 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	3b01      	subs	r3, #1
 8002020:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f9      	bne.n	800201c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002028:	e02e      	b.n	8002088 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b11      	cmp	r3, #17
 8002030:	d10b      	bne.n	800204a <HAL_ADC_ConfigChannel+0x56e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800203a:	d106      	bne.n	800204a <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800203c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002046:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002048:	e01e      	b.n	8002088 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b12      	cmp	r3, #18
 8002050:	d11a      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800205a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800205c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800205e:	e013      	b.n	8002088 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f043 0220 	orr.w	r2, r3, #32
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002072:	e00a      	b.n	800208a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002086:	e000      	b.n	800208a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002088:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002092:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002096:	4618      	mov	r0, r3
 8002098:	376c      	adds	r7, #108	; 0x6c
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	50000400 	.word	0x50000400
 80020a8:	50000500 	.word	0x50000500
 80020ac:	20000080 	.word	0x20000080
 80020b0:	431bde83 	.word	0x431bde83

080020b4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d126      	bne.n	800211c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d115      	bne.n	8002114 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d111      	bne.n	8002114 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d105      	bne.n	8002114 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f043 0201 	orr.w	r2, r3, #1
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f7fe fa89 	bl	800062c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800211a:	e004      	b.n	8002126 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	4798      	blx	r3
}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff f947 	bl	80013d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	f043 0204 	orr.w	r2, r3, #4
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f7ff f937 	bl	80013e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b01      	cmp	r3, #1
 8002198:	d108      	bne.n	80021ac <ADC_Enable+0x2c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <ADC_Enable+0x2c>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <ADC_Enable+0x2e>
 80021ac:	2300      	movs	r3, #0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d13c      	bne.n	800222c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <ADC_Enable+0xb8>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00d      	beq.n	80021dc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f043 0210 	orr.w	r2, r3, #16
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e028      	b.n	800222e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80021ec:	f7ff f8e4 	bl	80013b8 <HAL_GetTick>
 80021f0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021f2:	e014      	b.n	800221e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021f4:	f7ff f8e0 	bl	80013b8 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d90d      	bls.n	800221e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f043 0210 	orr.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e007      	b.n	800222e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d1e3      	bne.n	80021f4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	8000003f 	.word	0x8000003f

0800223c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b01      	cmp	r3, #1
 8002254:	d108      	bne.n	8002268 <ADC_Disable+0x2c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <ADC_Disable+0x2c>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <ADC_Disable+0x2e>
 8002268:	2300      	movs	r3, #0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d040      	beq.n	80022f0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 030d 	and.w	r3, r3, #13
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10f      	bne.n	800229c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0202 	orr.w	r2, r2, #2
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2203      	movs	r2, #3
 8002292:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002294:	f7ff f890 	bl	80013b8 <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800229a:	e022      	b.n	80022e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f043 0210 	orr.w	r2, r3, #16
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	f043 0201 	orr.w	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e01c      	b.n	80022f2 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022b8:	f7ff f87e 	bl	80013b8 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d90d      	bls.n	80022e2 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f043 0210 	orr.w	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f043 0201 	orr.w	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e007      	b.n	80022f2 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d0e3      	beq.n	80022b8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8093 	beq.w	8002448 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002330:	d12a      	bne.n	8002388 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002336:	2b01      	cmp	r3, #1
 8002338:	d126      	bne.n	8002388 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800233e:	2b01      	cmp	r3, #1
 8002340:	d122      	bne.n	8002388 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002342:	230c      	movs	r3, #12
 8002344:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002346:	e014      	b.n	8002372 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4a42      	ldr	r2, [pc, #264]	; (8002454 <ADC_ConversionStop+0x158>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d90d      	bls.n	800236c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f043 0210 	orr.w	r2, r3, #16
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e06e      	b.n	800244a <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	3301      	adds	r3, #1
 8002370:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	d1e3      	bne.n	8002348 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2240      	movs	r2, #64	; 0x40
 8002386:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b60      	cmp	r3, #96	; 0x60
 800238c:	d015      	beq.n	80023ba <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b04      	cmp	r3, #4
 800239a:	d10e      	bne.n	80023ba <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d107      	bne.n	80023ba <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0210 	orr.w	r2, r2, #16
 80023b8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	d015      	beq.n	80023ec <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d10e      	bne.n	80023ec <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d107      	bne.n	80023ec <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0220 	orr.w	r2, r2, #32
 80023ea:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b60      	cmp	r3, #96	; 0x60
 80023f0:	d004      	beq.n	80023fc <ADC_ConversionStop+0x100>
 80023f2:	2b6c      	cmp	r3, #108	; 0x6c
 80023f4:	d105      	bne.n	8002402 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80023f6:	230c      	movs	r3, #12
 80023f8:	617b      	str	r3, [r7, #20]
        break;
 80023fa:	e005      	b.n	8002408 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80023fc:	2308      	movs	r3, #8
 80023fe:	617b      	str	r3, [r7, #20]
        break;
 8002400:	e002      	b.n	8002408 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002402:	2304      	movs	r3, #4
 8002404:	617b      	str	r3, [r7, #20]
        break;
 8002406:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002408:	f7fe ffd6 	bl	80013b8 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800240e:	e014      	b.n	800243a <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002410:	f7fe ffd2 	bl	80013b8 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b0b      	cmp	r3, #11
 800241c:	d90d      	bls.n	800243a <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f043 0210 	orr.w	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e007      	b.n	800244a <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e3      	bne.n	8002410 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	000993ff 	.word	0x000993ff

08002458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002474:	4013      	ands	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248a:	4a04      	ldr	r2, [pc, #16]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <__NVIC_GetPriorityGrouping+0x18>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 0307 	and.w	r3, r3, #7
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db0b      	blt.n	80024e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4907      	ldr	r1, [pc, #28]	; (80024f4 <__NVIC_EnableIRQ+0x38>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2001      	movs	r0, #1
 80024de:	fa00 f202 	lsl.w	r2, r0, r2
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	; (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c4:	d301      	bcc.n	80025ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00f      	b.n	80025ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <SysTick_Config+0x40>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d2:	210f      	movs	r1, #15
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025d8:	f7ff ff8e 	bl	80024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <SysTick_Config+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e2:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <SysTick_Config+0x40>)
 80025e4:	2207      	movs	r2, #7
 80025e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000e010 	.word	0xe000e010

080025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff29 	bl	8002458 <__NVIC_SetPriorityGrouping>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002620:	f7ff ff3e 	bl	80024a0 <__NVIC_GetPriorityGrouping>
 8002624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff ff8e 	bl	800254c <NVIC_EncodePriority>
 8002630:	4602      	mov	r2, r0
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff5d 	bl	80024f8 <__NVIC_SetPriority>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff31 	bl	80024bc <__NVIC_EnableIRQ>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ffa2 	bl	80025b4 <SysTick_Config>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e037      	b.n	8002700 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f9b8 	bl	8002a58 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}  
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_DMA_Start+0x20>
 8002724:	2302      	movs	r3, #2
 8002726:	e02d      	b.n	8002784 <HAL_DMA_Start+0x7c>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002736:	2b01      	cmp	r3, #1
 8002738:	d11d      	bne.n	8002776 <HAL_DMA_Start+0x6e>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f94b 	bl	80029fa <DMA_SetConfig>
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;  
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	e005      	b.n	8002782 <HAL_DMA_Start+0x7a>
  }
  else
  {
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	/* Remain BUSY */
  	status = HAL_BUSY;
 800277e:	2302      	movs	r3, #2
 8002780:	75fb      	strb	r3, [r7, #23]
  }  

  return status; 
 8002782:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_DMA_Start_IT+0x20>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e04a      	b.n	8002842 <HAL_DMA_Start_IT+0xb6>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d13a      	bne.n	8002834 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2202      	movs	r2, #2
 80027c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0201 	bic.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f909 	bl	80029fa <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 020e 	orr.w	r2, r2, #14
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	e00f      	b.n	8002822 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 020a 	orr.w	r2, r2, #10
 8002810:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0204 	bic.w	r2, r2, #4
 8002820:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0201 	orr.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	e005      	b.n	8002840 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800283c:	2302      	movs	r3, #2
 800283e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002840:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002858:	2b02      	cmp	r3, #2
 800285a:	d008      	beq.n	800286e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2204      	movs	r2, #4
 8002860:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e020      	b.n	80028b0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 020e 	bic.w	r2, r2, #14
 800287c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	2101      	movs	r1, #1
 8002898:	fa01 f202 	lsl.w	r2, r1, r2
 800289c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	2204      	movs	r2, #4
 80028da:	409a      	lsls	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d024      	beq.n	800292e <HAL_DMA_IRQHandler+0x72>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d01f      	beq.n	800292e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d107      	bne.n	800290c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0204 	bic.w	r2, r2, #4
 800290a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002914:	2104      	movs	r1, #4
 8002916:	fa01 f202 	lsl.w	r2, r1, r2
 800291a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d066      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x136>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800292c:	e061      	b.n	80029f2 <HAL_DMA_IRQHandler+0x136>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	2202      	movs	r2, #2
 8002934:	409a      	lsls	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4013      	ands	r3, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d028      	beq.n	8002990 <HAL_DMA_IRQHandler+0xd4>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d023      	beq.n	8002990 <HAL_DMA_IRQHandler+0xd4>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b00      	cmp	r3, #0
 8002954:	d107      	bne.n	8002966 <HAL_DMA_IRQHandler+0xaa>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 020a 	bic.w	r2, r2, #10
 8002964:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		//hdma->State = HAL_DMA_STATE_READY;
  	}
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	2102      	movs	r1, #2
 8002970:	fa01 f202 	lsl.w	r2, r1, r2
 8002974:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	d035      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x136>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800298e:	e030      	b.n	80029f2 <HAL_DMA_IRQHandler+0x136>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	2208      	movs	r2, #8
 8002996:	409a      	lsls	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d028      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x136>
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d023      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x136>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 020e 	bic.w	r2, r2, #14
 80029b8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	2101      	movs	r1, #1
 80029c4:	fa01 f202 	lsl.w	r2, r1, r2
 80029c8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d004      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x136>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
    }
  }
}  
 80029f0:	e7ff      	b.n	80029f2 <HAL_DMA_IRQHandler+0x136>
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a10:	2101      	movs	r1, #1
 8002a12:	fa01 f202 	lsl.w	r2, r1, r2
 8002a16:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d108      	bne.n	8002a3a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a38:	e007      	b.n	8002a4a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	60da      	str	r2, [r3, #12]
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <DMA_CalcBaseAndBitshift+0x60>)
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d80f      	bhi.n	8002a8c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b12      	ldr	r3, [pc, #72]	; (8002abc <DMA_CalcBaseAndBitshift+0x64>)
 8002a74:	4413      	add	r3, r2
 8002a76:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <DMA_CalcBaseAndBitshift+0x68>)
 8002a78:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	009a      	lsls	r2, r3, #2
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a0f      	ldr	r2, [pc, #60]	; (8002ac4 <DMA_CalcBaseAndBitshift+0x6c>)
 8002a88:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002a8a:	e00e      	b.n	8002aaa <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <DMA_CalcBaseAndBitshift+0x70>)
 8002a94:	4413      	add	r3, r2
 8002a96:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <DMA_CalcBaseAndBitshift+0x68>)
 8002a98:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	009a      	lsls	r2, r3, #2
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a09      	ldr	r2, [pc, #36]	; (8002acc <DMA_CalcBaseAndBitshift+0x74>)
 8002aa8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40020407 	.word	0x40020407
 8002abc:	bffdfff8 	.word	0xbffdfff8
 8002ac0:	cccccccd 	.word	0xcccccccd
 8002ac4:	40020000 	.word	0x40020000
 8002ac8:	bffdfbf8 	.word	0xbffdfbf8
 8002acc:	40020400 	.word	0x40020400

08002ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ade:	e160      	b.n	8002da2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	4013      	ands	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 8152 	beq.w	8002d9c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x38>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b12      	cmp	r3, #18
 8002b06:	d123      	bne.n	8002b50 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	08da      	lsrs	r2, r3, #3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3208      	adds	r2, #8
 8002b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	220f      	movs	r2, #15
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	08da      	lsrs	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3208      	adds	r2, #8
 8002b4a:	6939      	ldr	r1, [r7, #16]
 8002b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4013      	ands	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0203 	and.w	r2, r3, #3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d00b      	beq.n	8002ba4 <HAL_GPIO_Init+0xd4>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d007      	beq.n	8002ba4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b98:	2b11      	cmp	r3, #17
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b12      	cmp	r3, #18
 8002ba2:	d130      	bne.n	8002c06 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	2203      	movs	r2, #3
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bda:	2201      	movs	r2, #1
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	f003 0201 	and.w	r2, r3, #1
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	2203      	movs	r2, #3
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80ac 	beq.w	8002d9c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c44:	4b5e      	ldr	r3, [pc, #376]	; (8002dc0 <HAL_GPIO_Init+0x2f0>)
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	4a5d      	ldr	r2, [pc, #372]	; (8002dc0 <HAL_GPIO_Init+0x2f0>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6193      	str	r3, [r2, #24]
 8002c50:	4b5b      	ldr	r3, [pc, #364]	; (8002dc0 <HAL_GPIO_Init+0x2f0>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c5c:	4a59      	ldr	r2, [pc, #356]	; (8002dc4 <HAL_GPIO_Init+0x2f4>)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	089b      	lsrs	r3, r3, #2
 8002c62:	3302      	adds	r3, #2
 8002c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	220f      	movs	r2, #15
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c86:	d025      	beq.n	8002cd4 <HAL_GPIO_Init+0x204>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a4f      	ldr	r2, [pc, #316]	; (8002dc8 <HAL_GPIO_Init+0x2f8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d01f      	beq.n	8002cd0 <HAL_GPIO_Init+0x200>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a4e      	ldr	r2, [pc, #312]	; (8002dcc <HAL_GPIO_Init+0x2fc>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d019      	beq.n	8002ccc <HAL_GPIO_Init+0x1fc>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a4d      	ldr	r2, [pc, #308]	; (8002dd0 <HAL_GPIO_Init+0x300>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d013      	beq.n	8002cc8 <HAL_GPIO_Init+0x1f8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a4c      	ldr	r2, [pc, #304]	; (8002dd4 <HAL_GPIO_Init+0x304>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00d      	beq.n	8002cc4 <HAL_GPIO_Init+0x1f4>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a4b      	ldr	r2, [pc, #300]	; (8002dd8 <HAL_GPIO_Init+0x308>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d007      	beq.n	8002cc0 <HAL_GPIO_Init+0x1f0>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a4a      	ldr	r2, [pc, #296]	; (8002ddc <HAL_GPIO_Init+0x30c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d101      	bne.n	8002cbc <HAL_GPIO_Init+0x1ec>
 8002cb8:	2306      	movs	r3, #6
 8002cba:	e00c      	b.n	8002cd6 <HAL_GPIO_Init+0x206>
 8002cbc:	2307      	movs	r3, #7
 8002cbe:	e00a      	b.n	8002cd6 <HAL_GPIO_Init+0x206>
 8002cc0:	2305      	movs	r3, #5
 8002cc2:	e008      	b.n	8002cd6 <HAL_GPIO_Init+0x206>
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	e006      	b.n	8002cd6 <HAL_GPIO_Init+0x206>
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e004      	b.n	8002cd6 <HAL_GPIO_Init+0x206>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e002      	b.n	8002cd6 <HAL_GPIO_Init+0x206>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_GPIO_Init+0x206>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	f002 0203 	and.w	r2, r2, #3
 8002cdc:	0092      	lsls	r2, r2, #2
 8002cde:	4093      	lsls	r3, r2
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ce6:	4937      	ldr	r1, [pc, #220]	; (8002dc4 <HAL_GPIO_Init+0x2f4>)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	089b      	lsrs	r3, r3, #2
 8002cec:	3302      	adds	r3, #2
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf4:	4b3a      	ldr	r3, [pc, #232]	; (8002de0 <HAL_GPIO_Init+0x310>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d18:	4a31      	ldr	r2, [pc, #196]	; (8002de0 <HAL_GPIO_Init+0x310>)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d1e:	4b30      	ldr	r3, [pc, #192]	; (8002de0 <HAL_GPIO_Init+0x310>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d42:	4a27      	ldr	r2, [pc, #156]	; (8002de0 <HAL_GPIO_Init+0x310>)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d48:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <HAL_GPIO_Init+0x310>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d6c:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <HAL_GPIO_Init+0x310>)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_GPIO_Init+0x310>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d96:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <HAL_GPIO_Init+0x310>)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f47f ae97 	bne.w	8002ae0 <HAL_GPIO_Init+0x10>
  }
}
 8002db2:	bf00      	nop
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40010000 	.word	0x40010000
 8002dc8:	48000400 	.word	0x48000400
 8002dcc:	48000800 	.word	0x48000800
 8002dd0:	48000c00 	.word	0x48000c00
 8002dd4:	48001000 	.word	0x48001000
 8002dd8:	48001400 	.word	0x48001400
 8002ddc:	48001800 	.word	0x48001800
 8002de0:	40010400 	.word	0x40010400

08002de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
 8002df0:	4613      	mov	r3, r2
 8002df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002df4:	787b      	ldrb	r3, [r7, #1]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dfa:	887a      	ldrh	r2, [r7, #2]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e00:	e002      	b.n	8002e08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e02:	887a      	ldrh	r2, [r7, #2]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	1d3b      	adds	r3, r7, #4
 8002e1e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d102      	bne.n	8002e2e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	f000 bf01 	b.w	8003c30 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 8160 	beq.w	80030fe <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e3e:	4bae      	ldr	r3, [pc, #696]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d00c      	beq.n	8002e64 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e4a:	4bab      	ldr	r3, [pc, #684]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d159      	bne.n	8002f0a <HAL_RCC_OscConfig+0xf6>
 8002e56:	4ba8      	ldr	r3, [pc, #672]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e62:	d152      	bne.n	8002f0a <HAL_RCC_OscConfig+0xf6>
 8002e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e68:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e78:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d102      	bne.n	8002e96 <HAL_RCC_OscConfig+0x82>
 8002e90:	4b99      	ldr	r3, [pc, #612]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	e015      	b.n	8002ec2 <HAL_RCC_OscConfig+0xae>
 8002e96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e9a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002eb2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002ebe:	4b8e      	ldr	r3, [pc, #568]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ec6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002eca:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002ece:	fa92 f2a2 	rbit	r2, r2
 8002ed2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002ed6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002eda:	fab2 f282 	clz	r2, r2
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	f042 0220 	orr.w	r2, r2, #32
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	f002 021f 	and.w	r2, r2, #31
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8102 	beq.w	80030fc <HAL_RCC_OscConfig+0x2e8>
 8002ef8:	1d3b      	adds	r3, r7, #4
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f040 80fc 	bne.w	80030fc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f000 be93 	b.w	8003c30 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f14:	d106      	bne.n	8002f24 <HAL_RCC_OscConfig+0x110>
 8002f16:	4b78      	ldr	r3, [pc, #480]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a77      	ldr	r2, [pc, #476]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e030      	b.n	8002f86 <HAL_RCC_OscConfig+0x172>
 8002f24:	1d3b      	adds	r3, r7, #4
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x134>
 8002f2e:	4b72      	ldr	r3, [pc, #456]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a71      	ldr	r2, [pc, #452]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b6f      	ldr	r3, [pc, #444]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a6e      	ldr	r2, [pc, #440]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e01e      	b.n	8002f86 <HAL_RCC_OscConfig+0x172>
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f52:	d10c      	bne.n	8002f6e <HAL_RCC_OscConfig+0x15a>
 8002f54:	4b68      	ldr	r3, [pc, #416]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a67      	ldr	r2, [pc, #412]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002f5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	4b65      	ldr	r3, [pc, #404]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a64      	ldr	r2, [pc, #400]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	e00b      	b.n	8002f86 <HAL_RCC_OscConfig+0x172>
 8002f6e:	4b62      	ldr	r3, [pc, #392]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a61      	ldr	r2, [pc, #388]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b5f      	ldr	r3, [pc, #380]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a5e      	ldr	r2, [pc, #376]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d059      	beq.n	8003044 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fe fa12 	bl	80013b8 <HAL_GetTick>
 8002f94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f9a:	f7fe fa0d 	bl	80013b8 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d902      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	f000 be40 	b.w	8003c30 <HAL_RCC_OscConfig+0xe1c>
 8002fb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fb4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002fc4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc8:	fab3 f383 	clz	r3, r3
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d102      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x1ce>
 8002fdc:	4b46      	ldr	r3, [pc, #280]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	e015      	b.n	800300e <HAL_RCC_OscConfig+0x1fa>
 8002fe2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fe6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ffa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ffe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800300a:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003012:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003016:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800301a:	fa92 f2a2 	rbit	r2, r2
 800301e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003022:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003026:	fab2 f282 	clz	r2, r2
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	f042 0220 	orr.w	r2, r2, #32
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	f002 021f 	and.w	r2, r2, #31
 8003036:	2101      	movs	r1, #1
 8003038:	fa01 f202 	lsl.w	r2, r1, r2
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0ab      	beq.n	8002f9a <HAL_RCC_OscConfig+0x186>
 8003042:	e05c      	b.n	80030fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe f9b8 	bl	80013b8 <HAL_GetTick>
 8003048:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304c:	e00a      	b.n	8003064 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304e:	f7fe f9b3 	bl	80013b8 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	; 0x64
 800305c:	d902      	bls.n	8003064 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	f000 bde6 	b.w	8003c30 <HAL_RCC_OscConfig+0xe1c>
 8003064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003068:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003078:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d102      	bne.n	8003096 <HAL_RCC_OscConfig+0x282>
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	e015      	b.n	80030c2 <HAL_RCC_OscConfig+0x2ae>
 8003096:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800309a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80030a2:	fa93 f3a3 	rbit	r3, r3
 80030a6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80030aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80030b2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <HAL_RCC_OscConfig+0x2e4>)
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030c6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80030ca:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80030ce:	fa92 f2a2 	rbit	r2, r2
 80030d2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80030d6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80030da:	fab2 f282 	clz	r2, r2
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	f042 0220 	orr.w	r2, r2, #32
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	f002 021f 	and.w	r2, r2, #31
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f202 	lsl.w	r2, r1, r2
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1ab      	bne.n	800304e <HAL_RCC_OscConfig+0x23a>
 80030f6:	e002      	b.n	80030fe <HAL_RCC_OscConfig+0x2ea>
 80030f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	1d3b      	adds	r3, r7, #4
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8170 	beq.w	80033ee <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800310e:	4bd0      	ldr	r3, [pc, #832]	; (8003450 <HAL_RCC_OscConfig+0x63c>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00c      	beq.n	8003134 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800311a:	4bcd      	ldr	r3, [pc, #820]	; (8003450 <HAL_RCC_OscConfig+0x63c>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b08      	cmp	r3, #8
 8003124:	d16d      	bne.n	8003202 <HAL_RCC_OscConfig+0x3ee>
 8003126:	4bca      	ldr	r3, [pc, #808]	; (8003450 <HAL_RCC_OscConfig+0x63c>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800312e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003132:	d166      	bne.n	8003202 <HAL_RCC_OscConfig+0x3ee>
 8003134:	2302      	movs	r3, #2
 8003136:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003146:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d102      	bne.n	8003164 <HAL_RCC_OscConfig+0x350>
 800315e:	4bbc      	ldr	r3, [pc, #752]	; (8003450 <HAL_RCC_OscConfig+0x63c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	e013      	b.n	800318c <HAL_RCC_OscConfig+0x378>
 8003164:	2302      	movs	r3, #2
 8003166:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003176:	2302      	movs	r3, #2
 8003178:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800317c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003180:	fa93 f3a3 	rbit	r3, r3
 8003184:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003188:	4bb1      	ldr	r3, [pc, #708]	; (8003450 <HAL_RCC_OscConfig+0x63c>)
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	2202      	movs	r2, #2
 800318e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003192:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003196:	fa92 f2a2 	rbit	r2, r2
 800319a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800319e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80031a2:	fab2 f282 	clz	r2, r2
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	f042 0220 	orr.w	r2, r2, #32
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f002 021f 	and.w	r2, r2, #31
 80031b2:	2101      	movs	r1, #1
 80031b4:	fa01 f202 	lsl.w	r2, r1, r2
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <HAL_RCC_OscConfig+0x3ba>
 80031be:	1d3b      	adds	r3, r7, #4
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d002      	beq.n	80031ce <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f000 bd31 	b.w	8003c30 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ce:	4ba0      	ldr	r3, [pc, #640]	; (8003450 <HAL_RCC_OscConfig+0x63c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031d6:	1d3b      	adds	r3, r7, #4
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	21f8      	movs	r1, #248	; 0xf8
 80031de:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80031e6:	fa91 f1a1 	rbit	r1, r1
 80031ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80031ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80031f2:	fab1 f181 	clz	r1, r1
 80031f6:	b2c9      	uxtb	r1, r1
 80031f8:	408b      	lsls	r3, r1
 80031fa:	4995      	ldr	r1, [pc, #596]	; (8003450 <HAL_RCC_OscConfig+0x63c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003200:	e0f5      	b.n	80033ee <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8085 	beq.w	8003318 <HAL_RCC_OscConfig+0x504>
 800320e:	2301      	movs	r3, #1
 8003210:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003220:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003224:	fab3 f383 	clz	r3, r3
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800322e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	461a      	mov	r2, r3
 8003236:	2301      	movs	r3, #1
 8003238:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323a:	f7fe f8bd 	bl	80013b8 <HAL_GetTick>
 800323e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003242:	e00a      	b.n	800325a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003244:	f7fe f8b8 	bl	80013b8 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d902      	bls.n	800325a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	f000 bceb 	b.w	8003c30 <HAL_RCC_OscConfig+0xe1c>
 800325a:	2302      	movs	r3, #2
 800325c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800326c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003270:	fab3 f383 	clz	r3, r3
 8003274:	b2db      	uxtb	r3, r3
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	d102      	bne.n	800328a <HAL_RCC_OscConfig+0x476>
 8003284:	4b72      	ldr	r3, [pc, #456]	; (8003450 <HAL_RCC_OscConfig+0x63c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	e013      	b.n	80032b2 <HAL_RCC_OscConfig+0x49e>
 800328a:	2302      	movs	r3, #2
 800328c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003294:	fa93 f3a3 	rbit	r3, r3
 8003298:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800329c:	2302      	movs	r3, #2
 800329e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80032a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80032ae:	4b68      	ldr	r3, [pc, #416]	; (8003450 <HAL_RCC_OscConfig+0x63c>)
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	2202      	movs	r2, #2
 80032b4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80032b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80032bc:	fa92 f2a2 	rbit	r2, r2
 80032c0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80032c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80032c8:	fab2 f282 	clz	r2, r2
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	f042 0220 	orr.w	r2, r2, #32
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	f002 021f 	and.w	r2, r2, #31
 80032d8:	2101      	movs	r1, #1
 80032da:	fa01 f202 	lsl.w	r2, r1, r2
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0af      	beq.n	8003244 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e4:	4b5a      	ldr	r3, [pc, #360]	; (8003450 <HAL_RCC_OscConfig+0x63c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	21f8      	movs	r1, #248	; 0xf8
 80032f4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80032fc:	fa91 f1a1 	rbit	r1, r1
 8003300:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003304:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003308:	fab1 f181 	clz	r1, r1
 800330c:	b2c9      	uxtb	r1, r1
 800330e:	408b      	lsls	r3, r1
 8003310:	494f      	ldr	r1, [pc, #316]	; (8003450 <HAL_RCC_OscConfig+0x63c>)
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]
 8003316:	e06a      	b.n	80033ee <HAL_RCC_OscConfig+0x5da>
 8003318:	2301      	movs	r3, #1
 800331a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800332a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003338:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	461a      	mov	r2, r3
 8003340:	2300      	movs	r3, #0
 8003342:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe f838 	bl	80013b8 <HAL_GetTick>
 8003348:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334c:	e00a      	b.n	8003364 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334e:	f7fe f833 	bl	80013b8 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d902      	bls.n	8003364 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	f000 bc66 	b.w	8003c30 <HAL_RCC_OscConfig+0xe1c>
 8003364:	2302      	movs	r3, #2
 8003366:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003376:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d102      	bne.n	8003394 <HAL_RCC_OscConfig+0x580>
 800338e:	4b30      	ldr	r3, [pc, #192]	; (8003450 <HAL_RCC_OscConfig+0x63c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	e013      	b.n	80033bc <HAL_RCC_OscConfig+0x5a8>
 8003394:	2302      	movs	r3, #2
 8003396:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80033a6:	2302      	movs	r3, #2
 80033a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80033ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80033b0:	fa93 f3a3 	rbit	r3, r3
 80033b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80033b8:	4b25      	ldr	r3, [pc, #148]	; (8003450 <HAL_RCC_OscConfig+0x63c>)
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	2202      	movs	r2, #2
 80033be:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80033c2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80033c6:	fa92 f2a2 	rbit	r2, r2
 80033ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80033ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80033d2:	fab2 f282 	clz	r2, r2
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	f042 0220 	orr.w	r2, r2, #32
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	f002 021f 	and.w	r2, r2, #31
 80033e2:	2101      	movs	r1, #1
 80033e4:	fa01 f202 	lsl.w	r2, r1, r2
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1af      	bne.n	800334e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ee:	1d3b      	adds	r3, r7, #4
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80da 	beq.w	80035b2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d069      	beq.n	80034dc <HAL_RCC_OscConfig+0x6c8>
 8003408:	2301      	movs	r3, #1
 800340a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800341a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_RCC_OscConfig+0x640>)
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	461a      	mov	r2, r3
 800342e:	2301      	movs	r3, #1
 8003430:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003432:	f7fd ffc1 	bl	80013b8 <HAL_GetTick>
 8003436:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343a:	e00d      	b.n	8003458 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800343c:	f7fd ffbc 	bl	80013b8 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d905      	bls.n	8003458 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e3ef      	b.n	8003c30 <HAL_RCC_OscConfig+0xe1c>
 8003450:	40021000 	.word	0x40021000
 8003454:	10908120 	.word	0x10908120
 8003458:	2302      	movs	r3, #2
 800345a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003462:	fa93 f2a3 	rbit	r2, r3
 8003466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003470:	2202      	movs	r2, #2
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	fa93 f2a3 	rbit	r2, r3
 800347e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003488:	2202      	movs	r2, #2
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	fa93 f2a3 	rbit	r2, r3
 8003496:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800349a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349c:	4ba4      	ldr	r3, [pc, #656]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 800349e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034a0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80034a4:	2102      	movs	r1, #2
 80034a6:	6019      	str	r1, [r3, #0]
 80034a8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	fa93 f1a3 	rbit	r1, r3
 80034b2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80034b6:	6019      	str	r1, [r3, #0]
  return result;
 80034b8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	2101      	movs	r1, #1
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0b0      	beq.n	800343c <HAL_RCC_OscConfig+0x628>
 80034da:	e06a      	b.n	80035b2 <HAL_RCC_OscConfig+0x79e>
 80034dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	fa93 f2a3 	rbit	r2, r3
 80034ee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80034f2:	601a      	str	r2, [r3, #0]
  return result;
 80034f4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80034f8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	4b8c      	ldr	r3, [pc, #560]	; (8003734 <HAL_RCC_OscConfig+0x920>)
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	461a      	mov	r2, r3
 800350a:	2300      	movs	r3, #0
 800350c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350e:	f7fd ff53 	bl	80013b8 <HAL_GetTick>
 8003512:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003516:	e009      	b.n	800352c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003518:	f7fd ff4e 	bl	80013b8 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e381      	b.n	8003c30 <HAL_RCC_OscConfig+0xe1c>
 800352c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003530:	2202      	movs	r2, #2
 8003532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	fa93 f2a3 	rbit	r2, r3
 800353e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003548:	2202      	movs	r2, #2
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	fa93 f2a3 	rbit	r2, r3
 8003556:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003560:	2202      	movs	r2, #2
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	fa93 f2a3 	rbit	r2, r3
 800356e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003572:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	4b6e      	ldr	r3, [pc, #440]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 8003576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003578:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800357c:	2102      	movs	r1, #2
 800357e:	6019      	str	r1, [r3, #0]
 8003580:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	fa93 f1a3 	rbit	r1, r3
 800358a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800358e:	6019      	str	r1, [r3, #0]
  return result;
 8003590:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	2101      	movs	r1, #1
 80035a8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1b2      	bne.n	8003518 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b2:	1d3b      	adds	r3, r7, #4
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8157 	beq.w	8003870 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c8:	4b59      	ldr	r3, [pc, #356]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d112      	bne.n	80035fa <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d4:	4b56      	ldr	r3, [pc, #344]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	4a55      	ldr	r2, [pc, #340]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 80035da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035de:	61d3      	str	r3, [r2, #28]
 80035e0:	4b53      	ldr	r3, [pc, #332]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80035e8:	f107 030c 	add.w	r3, r7, #12
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	f107 030c 	add.w	r3, r7, #12
 80035f2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fa:	4b4f      	ldr	r3, [pc, #316]	; (8003738 <HAL_RCC_OscConfig+0x924>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d11a      	bne.n	800363c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003606:	4b4c      	ldr	r3, [pc, #304]	; (8003738 <HAL_RCC_OscConfig+0x924>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a4b      	ldr	r2, [pc, #300]	; (8003738 <HAL_RCC_OscConfig+0x924>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003610:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003612:	f7fd fed1 	bl	80013b8 <HAL_GetTick>
 8003616:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	e009      	b.n	8003630 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361c:	f7fd fecc 	bl	80013b8 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b64      	cmp	r3, #100	; 0x64
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e2ff      	b.n	8003c30 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	4b41      	ldr	r3, [pc, #260]	; (8003738 <HAL_RCC_OscConfig+0x924>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0ef      	beq.n	800361c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d106      	bne.n	8003654 <HAL_RCC_OscConfig+0x840>
 8003646:	4b3a      	ldr	r3, [pc, #232]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	4a39      	ldr	r2, [pc, #228]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6213      	str	r3, [r2, #32]
 8003652:	e02f      	b.n	80036b4 <HAL_RCC_OscConfig+0x8a0>
 8003654:	1d3b      	adds	r3, r7, #4
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x864>
 800365e:	4b34      	ldr	r3, [pc, #208]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	4a33      	ldr	r2, [pc, #204]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6213      	str	r3, [r2, #32]
 800366a:	4b31      	ldr	r3, [pc, #196]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4a30      	ldr	r2, [pc, #192]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 8003670:	f023 0304 	bic.w	r3, r3, #4
 8003674:	6213      	str	r3, [r2, #32]
 8003676:	e01d      	b.n	80036b4 <HAL_RCC_OscConfig+0x8a0>
 8003678:	1d3b      	adds	r3, r7, #4
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b05      	cmp	r3, #5
 8003680:	d10c      	bne.n	800369c <HAL_RCC_OscConfig+0x888>
 8003682:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	4a2a      	ldr	r2, [pc, #168]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 8003688:	f043 0304 	orr.w	r3, r3, #4
 800368c:	6213      	str	r3, [r2, #32]
 800368e:	4b28      	ldr	r3, [pc, #160]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	4a27      	ldr	r2, [pc, #156]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6213      	str	r3, [r2, #32]
 800369a:	e00b      	b.n	80036b4 <HAL_RCC_OscConfig+0x8a0>
 800369c:	4b24      	ldr	r3, [pc, #144]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4a23      	ldr	r2, [pc, #140]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	6213      	str	r3, [r2, #32]
 80036a8:	4b21      	ldr	r3, [pc, #132]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	4a20      	ldr	r2, [pc, #128]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 80036ae:	f023 0304 	bic.w	r3, r3, #4
 80036b2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b4:	1d3b      	adds	r3, r7, #4
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d06a      	beq.n	8003794 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036be:	f7fd fe7b 	bl	80013b8 <HAL_GetTick>
 80036c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c6:	e00b      	b.n	80036e0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fd fe76 	bl	80013b8 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e2a7      	b.n	8003c30 <HAL_RCC_OscConfig+0xe1c>
 80036e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80036e4:	2202      	movs	r2, #2
 80036e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	fa93 f2a3 	rbit	r2, r3
 80036f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80036fc:	2202      	movs	r2, #2
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	fa93 f2a3 	rbit	r2, r3
 800370a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800370e:	601a      	str	r2, [r3, #0]
  return result;
 8003710:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003714:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003716:	fab3 f383 	clz	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	095b      	lsrs	r3, r3, #5
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d108      	bne.n	800373c <HAL_RCC_OscConfig+0x928>
 800372a:	4b01      	ldr	r3, [pc, #4]	; (8003730 <HAL_RCC_OscConfig+0x91c>)
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	e013      	b.n	8003758 <HAL_RCC_OscConfig+0x944>
 8003730:	40021000 	.word	0x40021000
 8003734:	10908120 	.word	0x10908120
 8003738:	40007000 	.word	0x40007000
 800373c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003740:	2202      	movs	r2, #2
 8003742:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	fa93 f2a3 	rbit	r2, r3
 800374e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	4bc0      	ldr	r3, [pc, #768]	; (8003a58 <HAL_RCC_OscConfig+0xc44>)
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800375c:	2102      	movs	r1, #2
 800375e:	6011      	str	r1, [r2, #0]
 8003760:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	fa92 f1a2 	rbit	r1, r2
 800376a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800376e:	6011      	str	r1, [r2, #0]
  return result;
 8003770:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	fab2 f282 	clz	r2, r2
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	f002 021f 	and.w	r2, r2, #31
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f202 	lsl.w	r2, r1, r2
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d09a      	beq.n	80036c8 <HAL_RCC_OscConfig+0x8b4>
 8003792:	e063      	b.n	800385c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003794:	f7fd fe10 	bl	80013b8 <HAL_GetTick>
 8003798:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379c:	e00b      	b.n	80037b6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800379e:	f7fd fe0b 	bl	80013b8 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e23c      	b.n	8003c30 <HAL_RCC_OscConfig+0xe1c>
 80037b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80037ba:	2202      	movs	r2, #2
 80037bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	fa93 f2a3 	rbit	r2, r3
 80037c8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037d2:	2202      	movs	r2, #2
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	fa93 f2a3 	rbit	r2, r3
 80037e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80037e4:	601a      	str	r2, [r3, #0]
  return result;
 80037e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80037ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ec:	fab3 f383 	clz	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f043 0302 	orr.w	r3, r3, #2
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d102      	bne.n	8003806 <HAL_RCC_OscConfig+0x9f2>
 8003800:	4b95      	ldr	r3, [pc, #596]	; (8003a58 <HAL_RCC_OscConfig+0xc44>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	e00d      	b.n	8003822 <HAL_RCC_OscConfig+0xa0e>
 8003806:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800380a:	2202      	movs	r2, #2
 800380c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	fa93 f2a3 	rbit	r2, r3
 8003818:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	4b8e      	ldr	r3, [pc, #568]	; (8003a58 <HAL_RCC_OscConfig+0xc44>)
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003826:	2102      	movs	r1, #2
 8003828:	6011      	str	r1, [r2, #0]
 800382a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	fa92 f1a2 	rbit	r1, r2
 8003834:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003838:	6011      	str	r1, [r2, #0]
  return result;
 800383a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	fab2 f282 	clz	r2, r2
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	f002 021f 	and.w	r2, r2, #31
 8003850:	2101      	movs	r1, #1
 8003852:	fa01 f202 	lsl.w	r2, r1, r2
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1a0      	bne.n	800379e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800385c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003864:	4b7c      	ldr	r3, [pc, #496]	; (8003a58 <HAL_RCC_OscConfig+0xc44>)
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	4a7b      	ldr	r2, [pc, #492]	; (8003a58 <HAL_RCC_OscConfig+0xc44>)
 800386a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003870:	1d3b      	adds	r3, r7, #4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 81d9 	beq.w	8003c2e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800387c:	4b76      	ldr	r3, [pc, #472]	; (8003a58 <HAL_RCC_OscConfig+0xc44>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 030c 	and.w	r3, r3, #12
 8003884:	2b08      	cmp	r3, #8
 8003886:	f000 81a6 	beq.w	8003bd6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b02      	cmp	r3, #2
 8003892:	f040 811e 	bne.w	8003ad2 <HAL_RCC_OscConfig+0xcbe>
 8003896:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800389a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800389e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	fa93 f2a3 	rbit	r2, r3
 80038aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80038ae:	601a      	str	r2, [r3, #0]
  return result;
 80038b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80038b4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	461a      	mov	r2, r3
 80038c8:	2300      	movs	r3, #0
 80038ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038cc:	f7fd fd74 	bl	80013b8 <HAL_GetTick>
 80038d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d4:	e009      	b.n	80038ea <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fd fd6f 	bl	80013b8 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e1a2      	b.n	8003c30 <HAL_RCC_OscConfig+0xe1c>
 80038ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80038ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	fa93 f2a3 	rbit	r2, r3
 80038fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003902:	601a      	str	r2, [r3, #0]
  return result;
 8003904:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003908:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800390a:	fab3 f383 	clz	r3, r3
 800390e:	b2db      	uxtb	r3, r3
 8003910:	095b      	lsrs	r3, r3, #5
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d102      	bne.n	8003924 <HAL_RCC_OscConfig+0xb10>
 800391e:	4b4e      	ldr	r3, [pc, #312]	; (8003a58 <HAL_RCC_OscConfig+0xc44>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	e01b      	b.n	800395c <HAL_RCC_OscConfig+0xb48>
 8003924:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003928:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800392c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	fa93 f2a3 	rbit	r2, r3
 8003938:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003942:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	fa93 f2a3 	rbit	r2, r3
 8003952:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	4b3f      	ldr	r3, [pc, #252]	; (8003a58 <HAL_RCC_OscConfig+0xc44>)
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003960:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003964:	6011      	str	r1, [r2, #0]
 8003966:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	fa92 f1a2 	rbit	r1, r2
 8003970:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003974:	6011      	str	r1, [r2, #0]
  return result;
 8003976:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	fab2 f282 	clz	r2, r2
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	f042 0220 	orr.w	r2, r2, #32
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	f002 021f 	and.w	r2, r2, #31
 800398c:	2101      	movs	r1, #1
 800398e:	fa01 f202 	lsl.w	r2, r1, r2
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d19e      	bne.n	80038d6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003998:	4b2f      	ldr	r3, [pc, #188]	; (8003a58 <HAL_RCC_OscConfig+0xc44>)
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	f023 020f 	bic.w	r2, r3, #15
 80039a0:	1d3b      	adds	r3, r7, #4
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	492c      	ldr	r1, [pc, #176]	; (8003a58 <HAL_RCC_OscConfig+0xc44>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80039ac:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <HAL_RCC_OscConfig+0xc44>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80039b4:	1d3b      	adds	r3, r7, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6a19      	ldr	r1, [r3, #32]
 80039ba:	1d3b      	adds	r3, r7, #4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	430b      	orrs	r3, r1
 80039c2:	4925      	ldr	r1, [pc, #148]	; (8003a58 <HAL_RCC_OscConfig+0xc44>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]
 80039c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	fa93 f2a3 	rbit	r2, r3
 80039dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039e0:	601a      	str	r2, [r3, #0]
  return result;
 80039e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039e6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e8:	fab3 f383 	clz	r3, r3
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	461a      	mov	r2, r3
 80039fa:	2301      	movs	r3, #1
 80039fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fe:	f7fd fcdb 	bl	80013b8 <HAL_GetTick>
 8003a02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a06:	e009      	b.n	8003a1c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fd fcd6 	bl	80013b8 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e109      	b.n	8003c30 <HAL_RCC_OscConfig+0xe1c>
 8003a1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	fa93 f2a3 	rbit	r2, r3
 8003a30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a34:	601a      	str	r2, [r3, #0]
  return result;
 8003a36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a3c:	fab3 f383 	clz	r3, r3
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d105      	bne.n	8003a5c <HAL_RCC_OscConfig+0xc48>
 8003a50:	4b01      	ldr	r3, [pc, #4]	; (8003a58 <HAL_RCC_OscConfig+0xc44>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	e01e      	b.n	8003a94 <HAL_RCC_OscConfig+0xc80>
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	fa93 f2a3 	rbit	r2, r3
 8003a70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	fa93 f2a3 	rbit	r2, r3
 8003a8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	4b6a      	ldr	r3, [pc, #424]	; (8003c3c <HAL_RCC_OscConfig+0xe28>)
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003a98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a9c:	6011      	str	r1, [r2, #0]
 8003a9e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	fa92 f1a2 	rbit	r1, r2
 8003aa8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003aac:	6011      	str	r1, [r2, #0]
  return result;
 8003aae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	fab2 f282 	clz	r2, r2
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	f042 0220 	orr.w	r2, r2, #32
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	f002 021f 	and.w	r2, r2, #31
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d09b      	beq.n	8003a08 <HAL_RCC_OscConfig+0xbf4>
 8003ad0:	e0ad      	b.n	8003c2e <HAL_RCC_OscConfig+0xe1a>
 8003ad2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ad6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ada:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	fa93 f2a3 	rbit	r2, r3
 8003ae6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003aea:	601a      	str	r2, [r3, #0]
  return result;
 8003aec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003af0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003afc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	461a      	mov	r2, r3
 8003b04:	2300      	movs	r3, #0
 8003b06:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fd fc56 	bl	80013b8 <HAL_GetTick>
 8003b0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b10:	e009      	b.n	8003b26 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fd fc51 	bl	80013b8 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e084      	b.n	8003c30 <HAL_RCC_OscConfig+0xe1c>
 8003b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	fa93 f2a3 	rbit	r2, r3
 8003b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b3e:	601a      	str	r2, [r3, #0]
  return result;
 8003b40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	095b      	lsrs	r3, r3, #5
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d102      	bne.n	8003b60 <HAL_RCC_OscConfig+0xd4c>
 8003b5a:	4b38      	ldr	r3, [pc, #224]	; (8003c3c <HAL_RCC_OscConfig+0xe28>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	e01b      	b.n	8003b98 <HAL_RCC_OscConfig+0xd84>
 8003b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	fa93 f2a3 	rbit	r2, r3
 8003b74:	f107 0320 	add.w	r3, r7, #32
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	f107 031c 	add.w	r3, r7, #28
 8003b7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f107 031c 	add.w	r3, r7, #28
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	fa93 f2a3 	rbit	r2, r3
 8003b8e:	f107 0318 	add.w	r3, r7, #24
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	4b29      	ldr	r3, [pc, #164]	; (8003c3c <HAL_RCC_OscConfig+0xe28>)
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	f107 0214 	add.w	r2, r7, #20
 8003b9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ba0:	6011      	str	r1, [r2, #0]
 8003ba2:	f107 0214 	add.w	r2, r7, #20
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	fa92 f1a2 	rbit	r1, r2
 8003bac:	f107 0210 	add.w	r2, r7, #16
 8003bb0:	6011      	str	r1, [r2, #0]
  return result;
 8003bb2:	f107 0210 	add.w	r2, r7, #16
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	fab2 f282 	clz	r2, r2
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	f042 0220 	orr.w	r2, r2, #32
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	f002 021f 	and.w	r2, r2, #31
 8003bc8:	2101      	movs	r1, #1
 8003bca:	fa01 f202 	lsl.w	r2, r1, r2
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d19e      	bne.n	8003b12 <HAL_RCC_OscConfig+0xcfe>
 8003bd4:	e02b      	b.n	8003c2e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bd6:	1d3b      	adds	r3, r7, #4
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e025      	b.n	8003c30 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003be4:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <HAL_RCC_OscConfig+0xe28>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <HAL_RCC_OscConfig+0xe28>)
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bf4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003bf8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d111      	bne.n	8003c2a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003c06:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c0e:	1d3b      	adds	r3, r7, #4
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d108      	bne.n	8003c2a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003c18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c1c:	f003 020f 	and.w	r2, r3, #15
 8003c20:	1d3b      	adds	r3, r7, #4
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d001      	beq.n	8003c2e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000

08003c40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b09e      	sub	sp, #120	; 0x78
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e162      	b.n	8003f1e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c58:	4b90      	ldr	r3, [pc, #576]	; (8003e9c <HAL_RCC_ClockConfig+0x25c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d910      	bls.n	8003c88 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	4b8d      	ldr	r3, [pc, #564]	; (8003e9c <HAL_RCC_ClockConfig+0x25c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 0207 	bic.w	r2, r3, #7
 8003c6e:	498b      	ldr	r1, [pc, #556]	; (8003e9c <HAL_RCC_ClockConfig+0x25c>)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	4b89      	ldr	r3, [pc, #548]	; (8003e9c <HAL_RCC_ClockConfig+0x25c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e14a      	b.n	8003f1e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b82      	ldr	r3, [pc, #520]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	497f      	ldr	r1, [pc, #508]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80dc 	beq.w	8003e6c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d13c      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xf6>
 8003cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cc0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cc4:	fa93 f3a3 	rbit	r3, r3
 8003cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ccc:	fab3 f383 	clz	r3, r3
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d102      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xa6>
 8003ce0:	4b6f      	ldr	r3, [pc, #444]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	e00f      	b.n	8003d06 <HAL_RCC_ClockConfig+0xc6>
 8003ce6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	667b      	str	r3, [r7, #100]	; 0x64
 8003cf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cf8:	663b      	str	r3, [r7, #96]	; 0x60
 8003cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cfc:	fa93 f3a3 	rbit	r3, r3
 8003d00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d02:	4b67      	ldr	r3, [pc, #412]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d0e:	fa92 f2a2 	rbit	r2, r2
 8003d12:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003d14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d16:	fab2 f282 	clz	r2, r2
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	f042 0220 	orr.w	r2, r2, #32
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	f002 021f 	and.w	r2, r2, #31
 8003d26:	2101      	movs	r1, #1
 8003d28:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d17b      	bne.n	8003e2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e0f3      	b.n	8003f1e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d13c      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x178>
 8003d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d46:	fa93 f3a3 	rbit	r3, r3
 8003d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d4e:	fab3 f383 	clz	r3, r3
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d102      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x128>
 8003d62:	4b4f      	ldr	r3, [pc, #316]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	e00f      	b.n	8003d88 <HAL_RCC_ClockConfig+0x148>
 8003d68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	647b      	str	r3, [r7, #68]	; 0x44
 8003d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d7a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7e:	fa93 f3a3 	rbit	r3, r3
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d84:	4b46      	ldr	r3, [pc, #280]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d90:	fa92 f2a2 	rbit	r2, r2
 8003d94:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d98:	fab2 f282 	clz	r2, r2
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	f042 0220 	orr.w	r2, r2, #32
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	f002 021f 	and.w	r2, r2, #31
 8003da8:	2101      	movs	r1, #1
 8003daa:	fa01 f202 	lsl.w	r2, r1, r2
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d13a      	bne.n	8003e2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0b2      	b.n	8003f1e <HAL_RCC_ClockConfig+0x2de>
 8003db8:	2302      	movs	r3, #2
 8003dba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc6:	fab3 f383 	clz	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d102      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x1a0>
 8003dda:	4b31      	ldr	r3, [pc, #196]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	e00d      	b.n	8003dfc <HAL_RCC_ClockConfig+0x1bc>
 8003de0:	2302      	movs	r3, #2
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	fa93 f3a3 	rbit	r3, r3
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
 8003dec:	2302      	movs	r3, #2
 8003dee:	623b      	str	r3, [r7, #32]
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	61fb      	str	r3, [r7, #28]
 8003df8:	4b29      	ldr	r3, [pc, #164]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	61ba      	str	r2, [r7, #24]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	fa92 f2a2 	rbit	r2, r2
 8003e06:	617a      	str	r2, [r7, #20]
  return result;
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	fab2 f282 	clz	r2, r2
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	f042 0220 	orr.w	r2, r2, #32
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	f002 021f 	and.w	r2, r2, #31
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e20:	4013      	ands	r3, r2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e079      	b.n	8003f1e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f023 0203 	bic.w	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	491a      	ldr	r1, [pc, #104]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e3c:	f7fd fabc 	bl	80013b8 <HAL_GetTick>
 8003e40:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e44:	f7fd fab8 	bl	80013b8 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e061      	b.n	8003f1e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5a:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 020c 	and.w	r2, r3, #12
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d1eb      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_RCC_ClockConfig+0x25c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d214      	bcs.n	8003ea4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <HAL_RCC_ClockConfig+0x25c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 0207 	bic.w	r2, r3, #7
 8003e82:	4906      	ldr	r1, [pc, #24]	; (8003e9c <HAL_RCC_ClockConfig+0x25c>)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <HAL_RCC_ClockConfig+0x25c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e040      	b.n	8003f1e <HAL_RCC_ClockConfig+0x2de>
 8003e9c:	40022000 	.word	0x40022000
 8003ea0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb0:	4b1d      	ldr	r3, [pc, #116]	; (8003f28 <HAL_RCC_ClockConfig+0x2e8>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	491a      	ldr	r1, [pc, #104]	; (8003f28 <HAL_RCC_ClockConfig+0x2e8>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d009      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ece:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <HAL_RCC_ClockConfig+0x2e8>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4912      	ldr	r1, [pc, #72]	; (8003f28 <HAL_RCC_ClockConfig+0x2e8>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ee2:	f000 f829 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 8003ee6:	4601      	mov	r1, r0
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <HAL_RCC_ClockConfig+0x2e8>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef0:	22f0      	movs	r2, #240	; 0xf0
 8003ef2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	fa92 f2a2 	rbit	r2, r2
 8003efa:	60fa      	str	r2, [r7, #12]
  return result;
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	fab2 f282 	clz	r2, r2
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	40d3      	lsrs	r3, r2
 8003f06:	4a09      	ldr	r2, [pc, #36]	; (8003f2c <HAL_RCC_ClockConfig+0x2ec>)
 8003f08:	5cd3      	ldrb	r3, [r2, r3]
 8003f0a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f0e:	4a08      	ldr	r2, [pc, #32]	; (8003f30 <HAL_RCC_ClockConfig+0x2f0>)
 8003f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f12:	4b08      	ldr	r3, [pc, #32]	; (8003f34 <HAL_RCC_ClockConfig+0x2f4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fd fa0a 	bl	8001330 <HAL_InitTick>
  
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3778      	adds	r7, #120	; 0x78
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	08006194 	.word	0x08006194
 8003f30:	20000080 	.word	0x20000080
 8003f34:	20000084 	.word	0x20000084

08003f38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b08b      	sub	sp, #44	; 0x2c
 8003f3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
 8003f42:	2300      	movs	r3, #0
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	2300      	movs	r3, #0
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003f52:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d002      	beq.n	8003f68 <HAL_RCC_GetSysClockFreq+0x30>
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d003      	beq.n	8003f6e <HAL_RCC_GetSysClockFreq+0x36>
 8003f66:	e03f      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f68:	4b25      	ldr	r3, [pc, #148]	; (8004000 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f6a:	623b      	str	r3, [r7, #32]
      break;
 8003f6c:	e03f      	b.n	8003fee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f74:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f78:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	fa92 f2a2 	rbit	r2, r2
 8003f80:	607a      	str	r2, [r7, #4]
  return result;
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	fab2 f282 	clz	r2, r2
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	40d3      	lsrs	r3, r2
 8003f8c:	4a1d      	ldr	r2, [pc, #116]	; (8004004 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f8e:	5cd3      	ldrb	r3, [r2, r3]
 8003f90:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f92:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	220f      	movs	r2, #15
 8003f9c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	fa92 f2a2 	rbit	r2, r2
 8003fa4:	60fa      	str	r2, [r7, #12]
  return result;
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	fab2 f282 	clz	r2, r2
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	40d3      	lsrs	r3, r2
 8003fb0:	4a15      	ldr	r2, [pc, #84]	; (8004008 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003fb2:	5cd3      	ldrb	r3, [r2, r3]
 8003fb4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003fc0:	4a0f      	ldr	r2, [pc, #60]	; (8004000 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	fb02 f303 	mul.w	r3, r2, r3
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd0:	e007      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003fd2:	4a0b      	ldr	r2, [pc, #44]	; (8004000 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	fb02 f303 	mul.w	r3, r2, r3
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	623b      	str	r3, [r7, #32]
      break;
 8003fe6:	e002      	b.n	8003fee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003fea:	623b      	str	r3, [r7, #32]
      break;
 8003fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fee:	6a3b      	ldr	r3, [r7, #32]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	372c      	adds	r7, #44	; 0x2c
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40021000 	.word	0x40021000
 8004000:	007a1200 	.word	0x007a1200
 8004004:	080061ac 	.word	0x080061ac
 8004008:	080061bc 	.word	0x080061bc

0800400c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <HAL_RCC_GetHCLKFreq+0x14>)
 8004012:	681b      	ldr	r3, [r3, #0]
}
 8004014:	4618      	mov	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000080 	.word	0x20000080

08004024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800402a:	f7ff ffef 	bl	800400c <HAL_RCC_GetHCLKFreq>
 800402e:	4601      	mov	r1, r0
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004038:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800403c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	fa92 f2a2 	rbit	r2, r2
 8004044:	603a      	str	r2, [r7, #0]
  return result;
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	fab2 f282 	clz	r2, r2
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	40d3      	lsrs	r3, r2
 8004050:	4a04      	ldr	r2, [pc, #16]	; (8004064 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004052:	5cd3      	ldrb	r3, [r2, r3]
 8004054:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40021000 	.word	0x40021000
 8004064:	080061a4 	.word	0x080061a4

08004068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800406e:	f7ff ffcd 	bl	800400c <HAL_RCC_GetHCLKFreq>
 8004072:	4601      	mov	r1, r0
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800407c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004080:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	fa92 f2a2 	rbit	r2, r2
 8004088:	603a      	str	r2, [r7, #0]
  return result;
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	fab2 f282 	clz	r2, r2
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	40d3      	lsrs	r3, r2
 8004094:	4a04      	ldr	r2, [pc, #16]	; (80040a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004096:	5cd3      	ldrb	r3, [r2, r3]
 8004098:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000
 80040a8:	080061a4 	.word	0x080061a4

080040ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b092      	sub	sp, #72	; 0x48
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80d7 	beq.w	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80040ca:	2300      	movs	r3, #0
 80040cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040d0:	4b4e      	ldr	r3, [pc, #312]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10e      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040dc:	4b4b      	ldr	r3, [pc, #300]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	4a4a      	ldr	r2, [pc, #296]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e6:	61d3      	str	r3, [r2, #28]
 80040e8:	4b48      	ldr	r3, [pc, #288]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fa:	4b45      	ldr	r3, [pc, #276]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d118      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004106:	4b42      	ldr	r3, [pc, #264]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a41      	ldr	r2, [pc, #260]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800410c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004110:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004112:	f7fd f951 	bl	80013b8 <HAL_GetTick>
 8004116:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004118:	e008      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411a:	f7fd f94d 	bl	80013b8 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b64      	cmp	r3, #100	; 0x64
 8004126:	d901      	bls.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e1d6      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412c:	4b38      	ldr	r3, [pc, #224]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004138:	4b34      	ldr	r3, [pc, #208]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004140:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8084 	beq.w	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004152:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004154:	429a      	cmp	r2, r3
 8004156:	d07c      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004158:	4b2c      	ldr	r3, [pc, #176]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004162:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004166:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	fa93 f3a3 	rbit	r3, r3
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004172:	fab3 f383 	clz	r3, r3
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	4b26      	ldr	r3, [pc, #152]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	461a      	mov	r2, r3
 8004182:	2301      	movs	r3, #1
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800418a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418e:	fa93 f3a3 	rbit	r3, r3
 8004192:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004196:	fab3 f383 	clz	r3, r3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	4b1d      	ldr	r3, [pc, #116]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	461a      	mov	r2, r3
 80041a6:	2300      	movs	r3, #0
 80041a8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041aa:	4a18      	ldr	r2, [pc, #96]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d04b      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ba:	f7fd f8fd 	bl	80013b8 <HAL_GetTick>
 80041be:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fd f8f9 	bl	80013b8 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e180      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80041d8:	2302      	movs	r3, #2
 80041da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041de:	fa93 f3a3 	rbit	r3, r3
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
 80041e4:	2302      	movs	r3, #2
 80041e6:	623b      	str	r3, [r7, #32]
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	fa93 f3a3 	rbit	r3, r3
 80041ee:	61fb      	str	r3, [r7, #28]
  return result;
 80041f0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f2:	fab3 f383 	clz	r3, r3
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	f043 0302 	orr.w	r3, r3, #2
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d108      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004206:	4b01      	ldr	r3, [pc, #4]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	e00d      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800420c:	40021000 	.word	0x40021000
 8004210:	40007000 	.word	0x40007000
 8004214:	10908100 	.word	0x10908100
 8004218:	2302      	movs	r3, #2
 800421a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	fa93 f3a3 	rbit	r3, r3
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	4ba0      	ldr	r3, [pc, #640]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	2202      	movs	r2, #2
 800422a:	613a      	str	r2, [r7, #16]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	fa92 f2a2 	rbit	r2, r2
 8004232:	60fa      	str	r2, [r7, #12]
  return result;
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	fab2 f282 	clz	r2, r2
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	f002 021f 	and.w	r2, r2, #31
 8004246:	2101      	movs	r1, #1
 8004248:	fa01 f202 	lsl.w	r2, r1, r2
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0b7      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004252:	4b95      	ldr	r3, [pc, #596]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	4992      	ldr	r1, [pc, #584]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004260:	4313      	orrs	r3, r2
 8004262:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004264:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004268:	2b01      	cmp	r3, #1
 800426a:	d105      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800426c:	4b8e      	ldr	r3, [pc, #568]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	4a8d      	ldr	r2, [pc, #564]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004276:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004284:	4b88      	ldr	r3, [pc, #544]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	f023 0203 	bic.w	r2, r3, #3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4985      	ldr	r1, [pc, #532]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004292:	4313      	orrs	r3, r2
 8004294:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d008      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042a2:	4b81      	ldr	r3, [pc, #516]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	497e      	ldr	r1, [pc, #504]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042c0:	4b79      	ldr	r3, [pc, #484]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	4976      	ldr	r1, [pc, #472]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d008      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042de:	4b72      	ldr	r3, [pc, #456]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f023 0210 	bic.w	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	496f      	ldr	r1, [pc, #444]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80042fc:	4b6a      	ldr	r3, [pc, #424]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004308:	4967      	ldr	r1, [pc, #412]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d008      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800431a:	4b63      	ldr	r3, [pc, #396]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f023 0220 	bic.w	r2, r3, #32
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	4960      	ldr	r1, [pc, #384]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004328:	4313      	orrs	r3, r2
 800432a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004338:	4b5b      	ldr	r3, [pc, #364]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	4958      	ldr	r1, [pc, #352]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004356:	4b54      	ldr	r3, [pc, #336]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	4951      	ldr	r1, [pc, #324]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004364:	4313      	orrs	r3, r2
 8004366:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004374:	4b4c      	ldr	r3, [pc, #304]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	4949      	ldr	r1, [pc, #292]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004382:	4313      	orrs	r3, r2
 8004384:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800438e:	2b00      	cmp	r3, #0
 8004390:	d008      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004392:	4b45      	ldr	r3, [pc, #276]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	4942      	ldr	r1, [pc, #264]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043b0:	4b3d      	ldr	r3, [pc, #244]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	493a      	ldr	r1, [pc, #232]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d008      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80043ce:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	4933      	ldr	r1, [pc, #204]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80043ec:	4b2e      	ldr	r3, [pc, #184]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	492b      	ldr	r1, [pc, #172]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800440a:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	4924      	ldr	r1, [pc, #144]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004418:	4313      	orrs	r3, r2
 800441a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004428:	4b1f      	ldr	r3, [pc, #124]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	491c      	ldr	r1, [pc, #112]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004436:	4313      	orrs	r3, r2
 8004438:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d008      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004446:	4b18      	ldr	r3, [pc, #96]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004452:	4915      	ldr	r1, [pc, #84]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004454:	4313      	orrs	r3, r2
 8004456:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004464:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004470:	490d      	ldr	r1, [pc, #52]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004472:	4313      	orrs	r3, r2
 8004474:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d008      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800448e:	4906      	ldr	r1, [pc, #24]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004490:	4313      	orrs	r3, r2
 8004492:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00c      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80044a0:	4b01      	ldr	r3, [pc, #4]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	e002      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x400>
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b4:	490b      	ldr	r1, [pc, #44]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d008      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d2:	4904      	ldr	r1, [pc, #16]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3748      	adds	r7, #72	; 0x48
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40021000 	.word	0x40021000

080044e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e01d      	b.n	8004536 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fc fd32 	bl	8000f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3304      	adds	r3, #4
 8004524:	4619      	mov	r1, r3
 8004526:	4610      	mov	r0, r2
 8004528:	f000 f8ee 	bl	8004708 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <HAL_TIM_Base_Start+0x50>)
 8004558:	4013      	ands	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b06      	cmp	r3, #6
 8004560:	d00b      	beq.n	800457a <HAL_TIM_Base_Start+0x3a>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004568:	d007      	beq.n	800457a <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0201 	orr.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	00010007 	.word	0x00010007

08004594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_TIM_ConfigClockSource+0x18>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e0a8      	b.n	80046fe <HAL_TIM_ConfigClockSource+0x16a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	d067      	beq.n	80046b8 <HAL_TIM_ConfigClockSource+0x124>
 80045e8:	2b40      	cmp	r3, #64	; 0x40
 80045ea:	d80b      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x70>
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d073      	beq.n	80046d8 <HAL_TIM_ConfigClockSource+0x144>
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d802      	bhi.n	80045fa <HAL_TIM_ConfigClockSource+0x66>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d06f      	beq.n	80046d8 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80045f8:	e078      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d06c      	beq.n	80046d8 <HAL_TIM_ConfigClockSource+0x144>
 80045fe:	2b30      	cmp	r3, #48	; 0x30
 8004600:	d06a      	beq.n	80046d8 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004602:	e073      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004604:	2b70      	cmp	r3, #112	; 0x70
 8004606:	d00d      	beq.n	8004624 <HAL_TIM_ConfigClockSource+0x90>
 8004608:	2b70      	cmp	r3, #112	; 0x70
 800460a:	d804      	bhi.n	8004616 <HAL_TIM_ConfigClockSource+0x82>
 800460c:	2b50      	cmp	r3, #80	; 0x50
 800460e:	d033      	beq.n	8004678 <HAL_TIM_ConfigClockSource+0xe4>
 8004610:	2b60      	cmp	r3, #96	; 0x60
 8004612:	d041      	beq.n	8004698 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004614:	e06a      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461a:	d066      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0x156>
 800461c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004620:	d017      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004622:	e063      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	6899      	ldr	r1, [r3, #8]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f000 f980 	bl	8004938 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004646:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	609a      	str	r2, [r3, #8]
      break;
 8004650:	e04c      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6899      	ldr	r1, [r3, #8]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f000 f969 	bl	8004938 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004674:	609a      	str	r2, [r3, #8]
      break;
 8004676:	e039      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	6859      	ldr	r1, [r3, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	461a      	mov	r2, r3
 8004686:	f000 f8dd 	bl	8004844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2150      	movs	r1, #80	; 0x50
 8004690:	4618      	mov	r0, r3
 8004692:	f000 f936 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 8004696:	e029      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	461a      	mov	r2, r3
 80046a6:	f000 f8fc 	bl	80048a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2160      	movs	r1, #96	; 0x60
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 f926 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80046b6:	e019      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	6859      	ldr	r1, [r3, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	461a      	mov	r2, r3
 80046c6:	f000 f8bd 	bl	8004844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2140      	movs	r1, #64	; 0x40
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 f916 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80046d6:	e009      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f000 f90d 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80046e8:	e000      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x158>
      break;
 80046ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a42      	ldr	r2, [pc, #264]	; (8004824 <TIM_Base_SetConfig+0x11c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d013      	beq.n	8004748 <TIM_Base_SetConfig+0x40>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004726:	d00f      	beq.n	8004748 <TIM_Base_SetConfig+0x40>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a3f      	ldr	r2, [pc, #252]	; (8004828 <TIM_Base_SetConfig+0x120>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d00b      	beq.n	8004748 <TIM_Base_SetConfig+0x40>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a3e      	ldr	r2, [pc, #248]	; (800482c <TIM_Base_SetConfig+0x124>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d007      	beq.n	8004748 <TIM_Base_SetConfig+0x40>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a3d      	ldr	r2, [pc, #244]	; (8004830 <TIM_Base_SetConfig+0x128>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d003      	beq.n	8004748 <TIM_Base_SetConfig+0x40>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a3c      	ldr	r2, [pc, #240]	; (8004834 <TIM_Base_SetConfig+0x12c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d108      	bne.n	800475a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a31      	ldr	r2, [pc, #196]	; (8004824 <TIM_Base_SetConfig+0x11c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d01f      	beq.n	80047a2 <TIM_Base_SetConfig+0x9a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004768:	d01b      	beq.n	80047a2 <TIM_Base_SetConfig+0x9a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a2e      	ldr	r2, [pc, #184]	; (8004828 <TIM_Base_SetConfig+0x120>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d017      	beq.n	80047a2 <TIM_Base_SetConfig+0x9a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a2d      	ldr	r2, [pc, #180]	; (800482c <TIM_Base_SetConfig+0x124>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <TIM_Base_SetConfig+0x9a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a2c      	ldr	r2, [pc, #176]	; (8004830 <TIM_Base_SetConfig+0x128>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00f      	beq.n	80047a2 <TIM_Base_SetConfig+0x9a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a2c      	ldr	r2, [pc, #176]	; (8004838 <TIM_Base_SetConfig+0x130>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00b      	beq.n	80047a2 <TIM_Base_SetConfig+0x9a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a2b      	ldr	r2, [pc, #172]	; (800483c <TIM_Base_SetConfig+0x134>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d007      	beq.n	80047a2 <TIM_Base_SetConfig+0x9a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a2a      	ldr	r2, [pc, #168]	; (8004840 <TIM_Base_SetConfig+0x138>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_Base_SetConfig+0x9a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a25      	ldr	r2, [pc, #148]	; (8004834 <TIM_Base_SetConfig+0x12c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d108      	bne.n	80047b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a12      	ldr	r2, [pc, #72]	; (8004824 <TIM_Base_SetConfig+0x11c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <TIM_Base_SetConfig+0x100>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a13      	ldr	r2, [pc, #76]	; (8004830 <TIM_Base_SetConfig+0x128>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00f      	beq.n	8004808 <TIM_Base_SetConfig+0x100>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a13      	ldr	r2, [pc, #76]	; (8004838 <TIM_Base_SetConfig+0x130>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00b      	beq.n	8004808 <TIM_Base_SetConfig+0x100>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a12      	ldr	r2, [pc, #72]	; (800483c <TIM_Base_SetConfig+0x134>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <TIM_Base_SetConfig+0x100>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a11      	ldr	r2, [pc, #68]	; (8004840 <TIM_Base_SetConfig+0x138>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_Base_SetConfig+0x100>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a0c      	ldr	r2, [pc, #48]	; (8004834 <TIM_Base_SetConfig+0x12c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d103      	bne.n	8004810 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	615a      	str	r2, [r3, #20]
}
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40013400 	.word	0x40013400
 8004834:	40015000 	.word	0x40015000
 8004838:	40014000 	.word	0x40014000
 800483c:	40014400 	.word	0x40014400
 8004840:	40014800 	.word	0x40014800

08004844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f023 0201 	bic.w	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800486e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f023 030a 	bic.w	r3, r3, #10
 8004880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	621a      	str	r2, [r3, #32]
}
 8004896:	bf00      	nop
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b087      	sub	sp, #28
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f023 0210 	bic.w	r2, r3, #16
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	031b      	lsls	r3, r3, #12
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	f043 0307 	orr.w	r3, r3, #7
 8004924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	609a      	str	r2, [r3, #8]
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	021a      	lsls	r2, r3, #8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	431a      	orrs	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4313      	orrs	r3, r2
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	609a      	str	r2, [r3, #8]
}
 800496c:	bf00      	nop
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800498c:	2302      	movs	r3, #2
 800498e:	e06d      	b.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a30      	ldr	r2, [pc, #192]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d009      	beq.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2f      	ldr	r2, [pc, #188]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d004      	beq.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a2d      	ldr	r2, [pc, #180]	; (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d108      	bne.n	80049e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1e      	ldr	r2, [pc, #120]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d01d      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a0c:	d018      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1c      	ldr	r2, [pc, #112]	; (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a1a      	ldr	r2, [pc, #104]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00e      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d009      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a16      	ldr	r2, [pc, #88]	; (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a11      	ldr	r2, [pc, #68]	; (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10c      	bne.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40012c00 	.word	0x40012c00
 8004a7c:	40013400 	.word	0x40013400
 8004a80:	40015000 	.word	0x40015000
 8004a84:	40000400 	.word	0x40000400
 8004a88:	40000800 	.word	0x40000800
 8004a8c:	40014000 	.word	0x40014000

08004a90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e040      	b.n	8004b24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc fac6 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2224      	movs	r2, #36	; 0x24
 8004abc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8c0 	bl	8004c54 <UART_SetConfig>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e022      	b.n	8004b24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 face 	bl	8005088 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004afa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fb55 	bl	80051cc <UART_CheckIdleState>
 8004b22:	4603      	mov	r3, r0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	f040 8081 	bne.w	8004c48 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_UART_Transmit+0x26>
 8004b4c:	88fb      	ldrh	r3, [r7, #6]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e079      	b.n	8004c4a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_UART_Transmit+0x38>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e072      	b.n	8004c4a <HAL_UART_Transmit+0x11e>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2221      	movs	r2, #33	; 0x21
 8004b76:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004b78:	f7fc fc1e 	bl	80013b8 <HAL_GetTick>
 8004b7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	88fa      	ldrh	r2, [r7, #6]
 8004b82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	88fa      	ldrh	r2, [r7, #6]
 8004b8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b96:	d108      	bne.n	8004baa <HAL_UART_Transmit+0x7e>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d104      	bne.n	8004baa <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	e003      	b.n	8004bb2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bb2:	e02d      	b.n	8004c10 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2180      	movs	r1, #128	; 0x80
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fb49 	bl	8005256 <UART_WaitOnFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e03d      	b.n	8004c4a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10b      	bne.n	8004bec <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	881a      	ldrh	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be0:	b292      	uxth	r2, r2
 8004be2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	3302      	adds	r3, #2
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	e008      	b.n	8004bfe <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	781a      	ldrb	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	b292      	uxth	r2, r2
 8004bf6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1cb      	bne.n	8004bb4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2200      	movs	r2, #0
 8004c24:	2140      	movs	r1, #64	; 0x40
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fb15 	bl	8005256 <UART_WaitOnFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e009      	b.n	8004c4a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	e000      	b.n	8004c4a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004c48:	2302      	movs	r3, #2
  }
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4bac      	ldr	r3, [pc, #688]	; (8004f34 <UART_SetConfig+0x2e0>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	6939      	ldr	r1, [r7, #16]
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a9a      	ldr	r2, [pc, #616]	; (8004f38 <UART_SetConfig+0x2e4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d121      	bne.n	8004d18 <UART_SetConfig+0xc4>
 8004cd4:	4b99      	ldr	r3, [pc, #612]	; (8004f3c <UART_SetConfig+0x2e8>)
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d817      	bhi.n	8004d10 <UART_SetConfig+0xbc>
 8004ce0:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <UART_SetConfig+0x94>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004cf9 	.word	0x08004cf9
 8004cec:	08004d05 	.word	0x08004d05
 8004cf0:	08004d0b 	.word	0x08004d0b
 8004cf4:	08004cff 	.word	0x08004cff
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e0b2      	b.n	8004e64 <UART_SetConfig+0x210>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	77fb      	strb	r3, [r7, #31]
 8004d02:	e0af      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d04:	2304      	movs	r3, #4
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	e0ac      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d0a:	2308      	movs	r3, #8
 8004d0c:	77fb      	strb	r3, [r7, #31]
 8004d0e:	e0a9      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d10:	2310      	movs	r3, #16
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	bf00      	nop
 8004d16:	e0a5      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a88      	ldr	r2, [pc, #544]	; (8004f40 <UART_SetConfig+0x2ec>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d123      	bne.n	8004d6a <UART_SetConfig+0x116>
 8004d22:	4b86      	ldr	r3, [pc, #536]	; (8004f3c <UART_SetConfig+0x2e8>)
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2e:	d012      	beq.n	8004d56 <UART_SetConfig+0x102>
 8004d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d34:	d802      	bhi.n	8004d3c <UART_SetConfig+0xe8>
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <UART_SetConfig+0xf6>
 8004d3a:	e012      	b.n	8004d62 <UART_SetConfig+0x10e>
 8004d3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d40:	d00c      	beq.n	8004d5c <UART_SetConfig+0x108>
 8004d42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d46:	d003      	beq.n	8004d50 <UART_SetConfig+0xfc>
 8004d48:	e00b      	b.n	8004d62 <UART_SetConfig+0x10e>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	e089      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d50:	2302      	movs	r3, #2
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e086      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d56:	2304      	movs	r3, #4
 8004d58:	77fb      	strb	r3, [r7, #31]
 8004d5a:	e083      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d5c:	2308      	movs	r3, #8
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e080      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d62:	2310      	movs	r3, #16
 8004d64:	77fb      	strb	r3, [r7, #31]
 8004d66:	bf00      	nop
 8004d68:	e07c      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a75      	ldr	r2, [pc, #468]	; (8004f44 <UART_SetConfig+0x2f0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d123      	bne.n	8004dbc <UART_SetConfig+0x168>
 8004d74:	4b71      	ldr	r3, [pc, #452]	; (8004f3c <UART_SetConfig+0x2e8>)
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004d7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d80:	d012      	beq.n	8004da8 <UART_SetConfig+0x154>
 8004d82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d86:	d802      	bhi.n	8004d8e <UART_SetConfig+0x13a>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d007      	beq.n	8004d9c <UART_SetConfig+0x148>
 8004d8c:	e012      	b.n	8004db4 <UART_SetConfig+0x160>
 8004d8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d92:	d00c      	beq.n	8004dae <UART_SetConfig+0x15a>
 8004d94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d98:	d003      	beq.n	8004da2 <UART_SetConfig+0x14e>
 8004d9a:	e00b      	b.n	8004db4 <UART_SetConfig+0x160>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	e060      	b.n	8004e64 <UART_SetConfig+0x210>
 8004da2:	2302      	movs	r3, #2
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	e05d      	b.n	8004e64 <UART_SetConfig+0x210>
 8004da8:	2304      	movs	r3, #4
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e05a      	b.n	8004e64 <UART_SetConfig+0x210>
 8004dae:	2308      	movs	r3, #8
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e057      	b.n	8004e64 <UART_SetConfig+0x210>
 8004db4:	2310      	movs	r3, #16
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	bf00      	nop
 8004dba:	e053      	b.n	8004e64 <UART_SetConfig+0x210>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a61      	ldr	r2, [pc, #388]	; (8004f48 <UART_SetConfig+0x2f4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d123      	bne.n	8004e0e <UART_SetConfig+0x1ba>
 8004dc6:	4b5d      	ldr	r3, [pc, #372]	; (8004f3c <UART_SetConfig+0x2e8>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd2:	d012      	beq.n	8004dfa <UART_SetConfig+0x1a6>
 8004dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd8:	d802      	bhi.n	8004de0 <UART_SetConfig+0x18c>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <UART_SetConfig+0x19a>
 8004dde:	e012      	b.n	8004e06 <UART_SetConfig+0x1b2>
 8004de0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004de4:	d00c      	beq.n	8004e00 <UART_SetConfig+0x1ac>
 8004de6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004dea:	d003      	beq.n	8004df4 <UART_SetConfig+0x1a0>
 8004dec:	e00b      	b.n	8004e06 <UART_SetConfig+0x1b2>
 8004dee:	2300      	movs	r3, #0
 8004df0:	77fb      	strb	r3, [r7, #31]
 8004df2:	e037      	b.n	8004e64 <UART_SetConfig+0x210>
 8004df4:	2302      	movs	r3, #2
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e034      	b.n	8004e64 <UART_SetConfig+0x210>
 8004dfa:	2304      	movs	r3, #4
 8004dfc:	77fb      	strb	r3, [r7, #31]
 8004dfe:	e031      	b.n	8004e64 <UART_SetConfig+0x210>
 8004e00:	2308      	movs	r3, #8
 8004e02:	77fb      	strb	r3, [r7, #31]
 8004e04:	e02e      	b.n	8004e64 <UART_SetConfig+0x210>
 8004e06:	2310      	movs	r3, #16
 8004e08:	77fb      	strb	r3, [r7, #31]
 8004e0a:	bf00      	nop
 8004e0c:	e02a      	b.n	8004e64 <UART_SetConfig+0x210>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a4e      	ldr	r2, [pc, #312]	; (8004f4c <UART_SetConfig+0x2f8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d123      	bne.n	8004e60 <UART_SetConfig+0x20c>
 8004e18:	4b48      	ldr	r3, [pc, #288]	; (8004f3c <UART_SetConfig+0x2e8>)
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e24:	d012      	beq.n	8004e4c <UART_SetConfig+0x1f8>
 8004e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e2a:	d802      	bhi.n	8004e32 <UART_SetConfig+0x1de>
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d007      	beq.n	8004e40 <UART_SetConfig+0x1ec>
 8004e30:	e012      	b.n	8004e58 <UART_SetConfig+0x204>
 8004e32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e36:	d00c      	beq.n	8004e52 <UART_SetConfig+0x1fe>
 8004e38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e3c:	d003      	beq.n	8004e46 <UART_SetConfig+0x1f2>
 8004e3e:	e00b      	b.n	8004e58 <UART_SetConfig+0x204>
 8004e40:	2300      	movs	r3, #0
 8004e42:	77fb      	strb	r3, [r7, #31]
 8004e44:	e00e      	b.n	8004e64 <UART_SetConfig+0x210>
 8004e46:	2302      	movs	r3, #2
 8004e48:	77fb      	strb	r3, [r7, #31]
 8004e4a:	e00b      	b.n	8004e64 <UART_SetConfig+0x210>
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	77fb      	strb	r3, [r7, #31]
 8004e50:	e008      	b.n	8004e64 <UART_SetConfig+0x210>
 8004e52:	2308      	movs	r3, #8
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e005      	b.n	8004e64 <UART_SetConfig+0x210>
 8004e58:	2310      	movs	r3, #16
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	bf00      	nop
 8004e5e:	e001      	b.n	8004e64 <UART_SetConfig+0x210>
 8004e60:	2310      	movs	r3, #16
 8004e62:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e6c:	f040 8090 	bne.w	8004f90 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004e70:	7ffb      	ldrb	r3, [r7, #31]
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d86c      	bhi.n	8004f50 <UART_SetConfig+0x2fc>
 8004e76:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <UART_SetConfig+0x228>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004ea1 	.word	0x08004ea1
 8004e80:	08004ec1 	.word	0x08004ec1
 8004e84:	08004ee1 	.word	0x08004ee1
 8004e88:	08004f51 	.word	0x08004f51
 8004e8c:	08004efd 	.word	0x08004efd
 8004e90:	08004f51 	.word	0x08004f51
 8004e94:	08004f51 	.word	0x08004f51
 8004e98:	08004f51 	.word	0x08004f51
 8004e9c:	08004f1d 	.word	0x08004f1d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea0:	f7ff f8c0 	bl	8004024 <HAL_RCC_GetPCLK1Freq>
 8004ea4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	005a      	lsls	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	441a      	add	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	61bb      	str	r3, [r7, #24]
        break;
 8004ebe:	e04a      	b.n	8004f56 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ec0:	f7ff f8d2 	bl	8004068 <HAL_RCC_GetPCLK2Freq>
 8004ec4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	005a      	lsls	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	441a      	add	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	61bb      	str	r3, [r7, #24]
        break;
 8004ede:	e03a      	b.n	8004f56 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	085b      	lsrs	r3, r3, #1
 8004ee6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004eea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6852      	ldr	r2, [r2, #4]
 8004ef2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	61bb      	str	r3, [r7, #24]
        break;
 8004efa:	e02c      	b.n	8004f56 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004efc:	f7ff f81c 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 8004f00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	005a      	lsls	r2, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	441a      	add	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	61bb      	str	r3, [r7, #24]
        break;
 8004f1a:	e01c      	b.n	8004f56 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	085b      	lsrs	r3, r3, #1
 8004f22:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	61bb      	str	r3, [r7, #24]
        break;
 8004f32:	e010      	b.n	8004f56 <UART_SetConfig+0x302>
 8004f34:	efff69f3 	.word	0xefff69f3
 8004f38:	40013800 	.word	0x40013800
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	40004400 	.word	0x40004400
 8004f44:	40004800 	.word	0x40004800
 8004f48:	40004c00 	.word	0x40004c00
 8004f4c:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	75fb      	strb	r3, [r7, #23]
        break;
 8004f54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	2b0f      	cmp	r3, #15
 8004f5a:	d916      	bls.n	8004f8a <UART_SetConfig+0x336>
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f62:	d212      	bcs.n	8004f8a <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	f023 030f 	bic.w	r3, r3, #15
 8004f6c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	085b      	lsrs	r3, r3, #1
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	897b      	ldrh	r3, [r7, #10]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	897a      	ldrh	r2, [r7, #10]
 8004f86:	60da      	str	r2, [r3, #12]
 8004f88:	e072      	b.n	8005070 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	75fb      	strb	r3, [r7, #23]
 8004f8e:	e06f      	b.n	8005070 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004f90:	7ffb      	ldrb	r3, [r7, #31]
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d85b      	bhi.n	800504e <UART_SetConfig+0x3fa>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0x348>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fdf 	.word	0x08004fdf
 8004fa4:	08004ffd 	.word	0x08004ffd
 8004fa8:	0800504f 	.word	0x0800504f
 8004fac:	08005019 	.word	0x08005019
 8004fb0:	0800504f 	.word	0x0800504f
 8004fb4:	0800504f 	.word	0x0800504f
 8004fb8:	0800504f 	.word	0x0800504f
 8004fbc:	08005037 	.word	0x08005037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc0:	f7ff f830 	bl	8004024 <HAL_RCC_GetPCLK1Freq>
 8004fc4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	085a      	lsrs	r2, r3, #1
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	441a      	add	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	61bb      	str	r3, [r7, #24]
        break;
 8004fdc:	e03a      	b.n	8005054 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fde:	f7ff f843 	bl	8004068 <HAL_RCC_GetPCLK2Freq>
 8004fe2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	085a      	lsrs	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	441a      	add	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	61bb      	str	r3, [r7, #24]
        break;
 8004ffa:	e02b      	b.n	8005054 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	085b      	lsrs	r3, r3, #1
 8005002:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005006:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6852      	ldr	r2, [r2, #4]
 800500e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005012:	b29b      	uxth	r3, r3
 8005014:	61bb      	str	r3, [r7, #24]
        break;
 8005016:	e01d      	b.n	8005054 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005018:	f7fe ff8e 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 800501c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	085a      	lsrs	r2, r3, #1
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	441a      	add	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	b29b      	uxth	r3, r3
 8005032:	61bb      	str	r3, [r7, #24]
        break;
 8005034:	e00e      	b.n	8005054 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	fbb2 f3f3 	udiv	r3, r2, r3
 8005048:	b29b      	uxth	r3, r3
 800504a:	61bb      	str	r3, [r7, #24]
        break;
 800504c:	e002      	b.n	8005054 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	75fb      	strb	r3, [r7, #23]
        break;
 8005052:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b0f      	cmp	r3, #15
 8005058:	d908      	bls.n	800506c <UART_SetConfig+0x418>
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005060:	d204      	bcs.n	800506c <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	60da      	str	r2, [r3, #12]
 800506a:	e001      	b.n	8005070 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800507c:	7dfb      	ldrb	r3, [r7, #23]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3720      	adds	r7, #32
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop

08005088 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	f003 0310 	and.w	r3, r3, #16
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00a      	beq.n	800513a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01a      	beq.n	800519e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005186:	d10a      	bne.n	800519e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	605a      	str	r2, [r3, #4]
  }
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af02      	add	r7, sp, #8
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80051da:	f7fc f8ed 	bl	80013b8 <HAL_GetTick>
 80051de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d10e      	bne.n	800520c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f82a 	bl	8005256 <UART_WaitOnFlagUntilTimeout>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e020      	b.n	800524e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b04      	cmp	r3, #4
 8005218:	d10e      	bne.n	8005238 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800521a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f814 	bl	8005256 <UART_WaitOnFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e00a      	b.n	800524e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2220      	movs	r2, #32
 8005242:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	603b      	str	r3, [r7, #0]
 8005262:	4613      	mov	r3, r2
 8005264:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005266:	e05d      	b.n	8005324 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800526e:	d059      	beq.n	8005324 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005270:	f7fc f8a2 	bl	80013b8 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	429a      	cmp	r2, r3
 800527e:	d302      	bcc.n	8005286 <UART_WaitOnFlagUntilTimeout+0x30>
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d11b      	bne.n	80052be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005294:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0201 	bic.w	r2, r2, #1
 80052a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e042      	b.n	8005344 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d02b      	beq.n	8005324 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052da:	d123      	bne.n	8005324 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052e4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0201 	bic.w	r2, r2, #1
 8005304:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2220      	movs	r2, #32
 800530a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e00f      	b.n	8005344 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69da      	ldr	r2, [r3, #28]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4013      	ands	r3, r2
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	429a      	cmp	r2, r3
 8005332:	bf0c      	ite	eq
 8005334:	2301      	moveq	r3, #1
 8005336:	2300      	movne	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	79fb      	ldrb	r3, [r7, #7]
 800533e:	429a      	cmp	r2, r3
 8005340:	d092      	beq.n	8005268 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <__errno>:
 800534c:	4b01      	ldr	r3, [pc, #4]	; (8005354 <__errno+0x8>)
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	2000008c 	.word	0x2000008c

08005358 <__libc_init_array>:
 8005358:	b570      	push	{r4, r5, r6, lr}
 800535a:	4e0d      	ldr	r6, [pc, #52]	; (8005390 <__libc_init_array+0x38>)
 800535c:	4c0d      	ldr	r4, [pc, #52]	; (8005394 <__libc_init_array+0x3c>)
 800535e:	1ba4      	subs	r4, r4, r6
 8005360:	10a4      	asrs	r4, r4, #2
 8005362:	2500      	movs	r5, #0
 8005364:	42a5      	cmp	r5, r4
 8005366:	d109      	bne.n	800537c <__libc_init_array+0x24>
 8005368:	4e0b      	ldr	r6, [pc, #44]	; (8005398 <__libc_init_array+0x40>)
 800536a:	4c0c      	ldr	r4, [pc, #48]	; (800539c <__libc_init_array+0x44>)
 800536c:	f000 ff04 	bl	8006178 <_init>
 8005370:	1ba4      	subs	r4, r4, r6
 8005372:	10a4      	asrs	r4, r4, #2
 8005374:	2500      	movs	r5, #0
 8005376:	42a5      	cmp	r5, r4
 8005378:	d105      	bne.n	8005386 <__libc_init_array+0x2e>
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005380:	4798      	blx	r3
 8005382:	3501      	adds	r5, #1
 8005384:	e7ee      	b.n	8005364 <__libc_init_array+0xc>
 8005386:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800538a:	4798      	blx	r3
 800538c:	3501      	adds	r5, #1
 800538e:	e7f2      	b.n	8005376 <__libc_init_array+0x1e>
 8005390:	08006264 	.word	0x08006264
 8005394:	08006264 	.word	0x08006264
 8005398:	08006264 	.word	0x08006264
 800539c:	08006268 	.word	0x08006268

080053a0 <memset>:
 80053a0:	4402      	add	r2, r0
 80053a2:	4603      	mov	r3, r0
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d100      	bne.n	80053aa <memset+0xa>
 80053a8:	4770      	bx	lr
 80053aa:	f803 1b01 	strb.w	r1, [r3], #1
 80053ae:	e7f9      	b.n	80053a4 <memset+0x4>

080053b0 <iprintf>:
 80053b0:	b40f      	push	{r0, r1, r2, r3}
 80053b2:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <iprintf+0x2c>)
 80053b4:	b513      	push	{r0, r1, r4, lr}
 80053b6:	681c      	ldr	r4, [r3, #0]
 80053b8:	b124      	cbz	r4, 80053c4 <iprintf+0x14>
 80053ba:	69a3      	ldr	r3, [r4, #24]
 80053bc:	b913      	cbnz	r3, 80053c4 <iprintf+0x14>
 80053be:	4620      	mov	r0, r4
 80053c0:	f000 f84e 	bl	8005460 <__sinit>
 80053c4:	ab05      	add	r3, sp, #20
 80053c6:	9a04      	ldr	r2, [sp, #16]
 80053c8:	68a1      	ldr	r1, [r4, #8]
 80053ca:	9301      	str	r3, [sp, #4]
 80053cc:	4620      	mov	r0, r4
 80053ce:	f000 f955 	bl	800567c <_vfiprintf_r>
 80053d2:	b002      	add	sp, #8
 80053d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053d8:	b004      	add	sp, #16
 80053da:	4770      	bx	lr
 80053dc:	2000008c 	.word	0x2000008c

080053e0 <std>:
 80053e0:	2300      	movs	r3, #0
 80053e2:	b510      	push	{r4, lr}
 80053e4:	4604      	mov	r4, r0
 80053e6:	e9c0 3300 	strd	r3, r3, [r0]
 80053ea:	6083      	str	r3, [r0, #8]
 80053ec:	8181      	strh	r1, [r0, #12]
 80053ee:	6643      	str	r3, [r0, #100]	; 0x64
 80053f0:	81c2      	strh	r2, [r0, #14]
 80053f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053f6:	6183      	str	r3, [r0, #24]
 80053f8:	4619      	mov	r1, r3
 80053fa:	2208      	movs	r2, #8
 80053fc:	305c      	adds	r0, #92	; 0x5c
 80053fe:	f7ff ffcf 	bl	80053a0 <memset>
 8005402:	4b05      	ldr	r3, [pc, #20]	; (8005418 <std+0x38>)
 8005404:	6263      	str	r3, [r4, #36]	; 0x24
 8005406:	4b05      	ldr	r3, [pc, #20]	; (800541c <std+0x3c>)
 8005408:	62a3      	str	r3, [r4, #40]	; 0x28
 800540a:	4b05      	ldr	r3, [pc, #20]	; (8005420 <std+0x40>)
 800540c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800540e:	4b05      	ldr	r3, [pc, #20]	; (8005424 <std+0x44>)
 8005410:	6224      	str	r4, [r4, #32]
 8005412:	6323      	str	r3, [r4, #48]	; 0x30
 8005414:	bd10      	pop	{r4, pc}
 8005416:	bf00      	nop
 8005418:	08005bd9 	.word	0x08005bd9
 800541c:	08005bfb 	.word	0x08005bfb
 8005420:	08005c33 	.word	0x08005c33
 8005424:	08005c57 	.word	0x08005c57

08005428 <_cleanup_r>:
 8005428:	4901      	ldr	r1, [pc, #4]	; (8005430 <_cleanup_r+0x8>)
 800542a:	f000 b885 	b.w	8005538 <_fwalk_reent>
 800542e:	bf00      	nop
 8005430:	08005f31 	.word	0x08005f31

08005434 <__sfmoreglue>:
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	1e4a      	subs	r2, r1, #1
 8005438:	2568      	movs	r5, #104	; 0x68
 800543a:	4355      	muls	r5, r2
 800543c:	460e      	mov	r6, r1
 800543e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005442:	f000 f897 	bl	8005574 <_malloc_r>
 8005446:	4604      	mov	r4, r0
 8005448:	b140      	cbz	r0, 800545c <__sfmoreglue+0x28>
 800544a:	2100      	movs	r1, #0
 800544c:	e9c0 1600 	strd	r1, r6, [r0]
 8005450:	300c      	adds	r0, #12
 8005452:	60a0      	str	r0, [r4, #8]
 8005454:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005458:	f7ff ffa2 	bl	80053a0 <memset>
 800545c:	4620      	mov	r0, r4
 800545e:	bd70      	pop	{r4, r5, r6, pc}

08005460 <__sinit>:
 8005460:	6983      	ldr	r3, [r0, #24]
 8005462:	b510      	push	{r4, lr}
 8005464:	4604      	mov	r4, r0
 8005466:	bb33      	cbnz	r3, 80054b6 <__sinit+0x56>
 8005468:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800546c:	6503      	str	r3, [r0, #80]	; 0x50
 800546e:	4b12      	ldr	r3, [pc, #72]	; (80054b8 <__sinit+0x58>)
 8005470:	4a12      	ldr	r2, [pc, #72]	; (80054bc <__sinit+0x5c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6282      	str	r2, [r0, #40]	; 0x28
 8005476:	4298      	cmp	r0, r3
 8005478:	bf04      	itt	eq
 800547a:	2301      	moveq	r3, #1
 800547c:	6183      	streq	r3, [r0, #24]
 800547e:	f000 f81f 	bl	80054c0 <__sfp>
 8005482:	6060      	str	r0, [r4, #4]
 8005484:	4620      	mov	r0, r4
 8005486:	f000 f81b 	bl	80054c0 <__sfp>
 800548a:	60a0      	str	r0, [r4, #8]
 800548c:	4620      	mov	r0, r4
 800548e:	f000 f817 	bl	80054c0 <__sfp>
 8005492:	2200      	movs	r2, #0
 8005494:	60e0      	str	r0, [r4, #12]
 8005496:	2104      	movs	r1, #4
 8005498:	6860      	ldr	r0, [r4, #4]
 800549a:	f7ff ffa1 	bl	80053e0 <std>
 800549e:	2201      	movs	r2, #1
 80054a0:	2109      	movs	r1, #9
 80054a2:	68a0      	ldr	r0, [r4, #8]
 80054a4:	f7ff ff9c 	bl	80053e0 <std>
 80054a8:	2202      	movs	r2, #2
 80054aa:	2112      	movs	r1, #18
 80054ac:	68e0      	ldr	r0, [r4, #12]
 80054ae:	f7ff ff97 	bl	80053e0 <std>
 80054b2:	2301      	movs	r3, #1
 80054b4:	61a3      	str	r3, [r4, #24]
 80054b6:	bd10      	pop	{r4, pc}
 80054b8:	080061cc 	.word	0x080061cc
 80054bc:	08005429 	.word	0x08005429

080054c0 <__sfp>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <__sfp+0x70>)
 80054c4:	681e      	ldr	r6, [r3, #0]
 80054c6:	69b3      	ldr	r3, [r6, #24]
 80054c8:	4607      	mov	r7, r0
 80054ca:	b913      	cbnz	r3, 80054d2 <__sfp+0x12>
 80054cc:	4630      	mov	r0, r6
 80054ce:	f7ff ffc7 	bl	8005460 <__sinit>
 80054d2:	3648      	adds	r6, #72	; 0x48
 80054d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054d8:	3b01      	subs	r3, #1
 80054da:	d503      	bpl.n	80054e4 <__sfp+0x24>
 80054dc:	6833      	ldr	r3, [r6, #0]
 80054de:	b133      	cbz	r3, 80054ee <__sfp+0x2e>
 80054e0:	6836      	ldr	r6, [r6, #0]
 80054e2:	e7f7      	b.n	80054d4 <__sfp+0x14>
 80054e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054e8:	b16d      	cbz	r5, 8005506 <__sfp+0x46>
 80054ea:	3468      	adds	r4, #104	; 0x68
 80054ec:	e7f4      	b.n	80054d8 <__sfp+0x18>
 80054ee:	2104      	movs	r1, #4
 80054f0:	4638      	mov	r0, r7
 80054f2:	f7ff ff9f 	bl	8005434 <__sfmoreglue>
 80054f6:	6030      	str	r0, [r6, #0]
 80054f8:	2800      	cmp	r0, #0
 80054fa:	d1f1      	bne.n	80054e0 <__sfp+0x20>
 80054fc:	230c      	movs	r3, #12
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	4604      	mov	r4, r0
 8005502:	4620      	mov	r0, r4
 8005504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005506:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <__sfp+0x74>)
 8005508:	6665      	str	r5, [r4, #100]	; 0x64
 800550a:	e9c4 5500 	strd	r5, r5, [r4]
 800550e:	60a5      	str	r5, [r4, #8]
 8005510:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005514:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005518:	2208      	movs	r2, #8
 800551a:	4629      	mov	r1, r5
 800551c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005520:	f7ff ff3e 	bl	80053a0 <memset>
 8005524:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005528:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800552c:	e7e9      	b.n	8005502 <__sfp+0x42>
 800552e:	bf00      	nop
 8005530:	080061cc 	.word	0x080061cc
 8005534:	ffff0001 	.word	0xffff0001

08005538 <_fwalk_reent>:
 8005538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800553c:	4680      	mov	r8, r0
 800553e:	4689      	mov	r9, r1
 8005540:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005544:	2600      	movs	r6, #0
 8005546:	b914      	cbnz	r4, 800554e <_fwalk_reent+0x16>
 8005548:	4630      	mov	r0, r6
 800554a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800554e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005552:	3f01      	subs	r7, #1
 8005554:	d501      	bpl.n	800555a <_fwalk_reent+0x22>
 8005556:	6824      	ldr	r4, [r4, #0]
 8005558:	e7f5      	b.n	8005546 <_fwalk_reent+0xe>
 800555a:	89ab      	ldrh	r3, [r5, #12]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d907      	bls.n	8005570 <_fwalk_reent+0x38>
 8005560:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005564:	3301      	adds	r3, #1
 8005566:	d003      	beq.n	8005570 <_fwalk_reent+0x38>
 8005568:	4629      	mov	r1, r5
 800556a:	4640      	mov	r0, r8
 800556c:	47c8      	blx	r9
 800556e:	4306      	orrs	r6, r0
 8005570:	3568      	adds	r5, #104	; 0x68
 8005572:	e7ee      	b.n	8005552 <_fwalk_reent+0x1a>

08005574 <_malloc_r>:
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	1ccd      	adds	r5, r1, #3
 8005578:	f025 0503 	bic.w	r5, r5, #3
 800557c:	3508      	adds	r5, #8
 800557e:	2d0c      	cmp	r5, #12
 8005580:	bf38      	it	cc
 8005582:	250c      	movcc	r5, #12
 8005584:	2d00      	cmp	r5, #0
 8005586:	4606      	mov	r6, r0
 8005588:	db01      	blt.n	800558e <_malloc_r+0x1a>
 800558a:	42a9      	cmp	r1, r5
 800558c:	d903      	bls.n	8005596 <_malloc_r+0x22>
 800558e:	230c      	movs	r3, #12
 8005590:	6033      	str	r3, [r6, #0]
 8005592:	2000      	movs	r0, #0
 8005594:	bd70      	pop	{r4, r5, r6, pc}
 8005596:	f000 fd6b 	bl	8006070 <__malloc_lock>
 800559a:	4a21      	ldr	r2, [pc, #132]	; (8005620 <_malloc_r+0xac>)
 800559c:	6814      	ldr	r4, [r2, #0]
 800559e:	4621      	mov	r1, r4
 80055a0:	b991      	cbnz	r1, 80055c8 <_malloc_r+0x54>
 80055a2:	4c20      	ldr	r4, [pc, #128]	; (8005624 <_malloc_r+0xb0>)
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	b91b      	cbnz	r3, 80055b0 <_malloc_r+0x3c>
 80055a8:	4630      	mov	r0, r6
 80055aa:	f000 fb05 	bl	8005bb8 <_sbrk_r>
 80055ae:	6020      	str	r0, [r4, #0]
 80055b0:	4629      	mov	r1, r5
 80055b2:	4630      	mov	r0, r6
 80055b4:	f000 fb00 	bl	8005bb8 <_sbrk_r>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	d124      	bne.n	8005606 <_malloc_r+0x92>
 80055bc:	230c      	movs	r3, #12
 80055be:	6033      	str	r3, [r6, #0]
 80055c0:	4630      	mov	r0, r6
 80055c2:	f000 fd56 	bl	8006072 <__malloc_unlock>
 80055c6:	e7e4      	b.n	8005592 <_malloc_r+0x1e>
 80055c8:	680b      	ldr	r3, [r1, #0]
 80055ca:	1b5b      	subs	r3, r3, r5
 80055cc:	d418      	bmi.n	8005600 <_malloc_r+0x8c>
 80055ce:	2b0b      	cmp	r3, #11
 80055d0:	d90f      	bls.n	80055f2 <_malloc_r+0x7e>
 80055d2:	600b      	str	r3, [r1, #0]
 80055d4:	50cd      	str	r5, [r1, r3]
 80055d6:	18cc      	adds	r4, r1, r3
 80055d8:	4630      	mov	r0, r6
 80055da:	f000 fd4a 	bl	8006072 <__malloc_unlock>
 80055de:	f104 000b 	add.w	r0, r4, #11
 80055e2:	1d23      	adds	r3, r4, #4
 80055e4:	f020 0007 	bic.w	r0, r0, #7
 80055e8:	1ac3      	subs	r3, r0, r3
 80055ea:	d0d3      	beq.n	8005594 <_malloc_r+0x20>
 80055ec:	425a      	negs	r2, r3
 80055ee:	50e2      	str	r2, [r4, r3]
 80055f0:	e7d0      	b.n	8005594 <_malloc_r+0x20>
 80055f2:	428c      	cmp	r4, r1
 80055f4:	684b      	ldr	r3, [r1, #4]
 80055f6:	bf16      	itet	ne
 80055f8:	6063      	strne	r3, [r4, #4]
 80055fa:	6013      	streq	r3, [r2, #0]
 80055fc:	460c      	movne	r4, r1
 80055fe:	e7eb      	b.n	80055d8 <_malloc_r+0x64>
 8005600:	460c      	mov	r4, r1
 8005602:	6849      	ldr	r1, [r1, #4]
 8005604:	e7cc      	b.n	80055a0 <_malloc_r+0x2c>
 8005606:	1cc4      	adds	r4, r0, #3
 8005608:	f024 0403 	bic.w	r4, r4, #3
 800560c:	42a0      	cmp	r0, r4
 800560e:	d005      	beq.n	800561c <_malloc_r+0xa8>
 8005610:	1a21      	subs	r1, r4, r0
 8005612:	4630      	mov	r0, r6
 8005614:	f000 fad0 	bl	8005bb8 <_sbrk_r>
 8005618:	3001      	adds	r0, #1
 800561a:	d0cf      	beq.n	80055bc <_malloc_r+0x48>
 800561c:	6025      	str	r5, [r4, #0]
 800561e:	e7db      	b.n	80055d8 <_malloc_r+0x64>
 8005620:	20000118 	.word	0x20000118
 8005624:	2000011c 	.word	0x2000011c

08005628 <__sfputc_r>:
 8005628:	6893      	ldr	r3, [r2, #8]
 800562a:	3b01      	subs	r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	b410      	push	{r4}
 8005630:	6093      	str	r3, [r2, #8]
 8005632:	da08      	bge.n	8005646 <__sfputc_r+0x1e>
 8005634:	6994      	ldr	r4, [r2, #24]
 8005636:	42a3      	cmp	r3, r4
 8005638:	db01      	blt.n	800563e <__sfputc_r+0x16>
 800563a:	290a      	cmp	r1, #10
 800563c:	d103      	bne.n	8005646 <__sfputc_r+0x1e>
 800563e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005642:	f000 bb0d 	b.w	8005c60 <__swbuf_r>
 8005646:	6813      	ldr	r3, [r2, #0]
 8005648:	1c58      	adds	r0, r3, #1
 800564a:	6010      	str	r0, [r2, #0]
 800564c:	7019      	strb	r1, [r3, #0]
 800564e:	4608      	mov	r0, r1
 8005650:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005654:	4770      	bx	lr

08005656 <__sfputs_r>:
 8005656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005658:	4606      	mov	r6, r0
 800565a:	460f      	mov	r7, r1
 800565c:	4614      	mov	r4, r2
 800565e:	18d5      	adds	r5, r2, r3
 8005660:	42ac      	cmp	r4, r5
 8005662:	d101      	bne.n	8005668 <__sfputs_r+0x12>
 8005664:	2000      	movs	r0, #0
 8005666:	e007      	b.n	8005678 <__sfputs_r+0x22>
 8005668:	463a      	mov	r2, r7
 800566a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800566e:	4630      	mov	r0, r6
 8005670:	f7ff ffda 	bl	8005628 <__sfputc_r>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	d1f3      	bne.n	8005660 <__sfputs_r+0xa>
 8005678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800567c <_vfiprintf_r>:
 800567c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005680:	460c      	mov	r4, r1
 8005682:	b09d      	sub	sp, #116	; 0x74
 8005684:	4617      	mov	r7, r2
 8005686:	461d      	mov	r5, r3
 8005688:	4606      	mov	r6, r0
 800568a:	b118      	cbz	r0, 8005694 <_vfiprintf_r+0x18>
 800568c:	6983      	ldr	r3, [r0, #24]
 800568e:	b90b      	cbnz	r3, 8005694 <_vfiprintf_r+0x18>
 8005690:	f7ff fee6 	bl	8005460 <__sinit>
 8005694:	4b7c      	ldr	r3, [pc, #496]	; (8005888 <_vfiprintf_r+0x20c>)
 8005696:	429c      	cmp	r4, r3
 8005698:	d158      	bne.n	800574c <_vfiprintf_r+0xd0>
 800569a:	6874      	ldr	r4, [r6, #4]
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	0718      	lsls	r0, r3, #28
 80056a0:	d55e      	bpl.n	8005760 <_vfiprintf_r+0xe4>
 80056a2:	6923      	ldr	r3, [r4, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d05b      	beq.n	8005760 <_vfiprintf_r+0xe4>
 80056a8:	2300      	movs	r3, #0
 80056aa:	9309      	str	r3, [sp, #36]	; 0x24
 80056ac:	2320      	movs	r3, #32
 80056ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056b2:	2330      	movs	r3, #48	; 0x30
 80056b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056b8:	9503      	str	r5, [sp, #12]
 80056ba:	f04f 0b01 	mov.w	fp, #1
 80056be:	46b8      	mov	r8, r7
 80056c0:	4645      	mov	r5, r8
 80056c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80056c6:	b10b      	cbz	r3, 80056cc <_vfiprintf_r+0x50>
 80056c8:	2b25      	cmp	r3, #37	; 0x25
 80056ca:	d154      	bne.n	8005776 <_vfiprintf_r+0xfa>
 80056cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80056d0:	d00b      	beq.n	80056ea <_vfiprintf_r+0x6e>
 80056d2:	4653      	mov	r3, sl
 80056d4:	463a      	mov	r2, r7
 80056d6:	4621      	mov	r1, r4
 80056d8:	4630      	mov	r0, r6
 80056da:	f7ff ffbc 	bl	8005656 <__sfputs_r>
 80056de:	3001      	adds	r0, #1
 80056e0:	f000 80c2 	beq.w	8005868 <_vfiprintf_r+0x1ec>
 80056e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e6:	4453      	add	r3, sl
 80056e8:	9309      	str	r3, [sp, #36]	; 0x24
 80056ea:	f898 3000 	ldrb.w	r3, [r8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 80ba 	beq.w	8005868 <_vfiprintf_r+0x1ec>
 80056f4:	2300      	movs	r3, #0
 80056f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056fe:	9304      	str	r3, [sp, #16]
 8005700:	9307      	str	r3, [sp, #28]
 8005702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005706:	931a      	str	r3, [sp, #104]	; 0x68
 8005708:	46a8      	mov	r8, r5
 800570a:	2205      	movs	r2, #5
 800570c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005710:	485e      	ldr	r0, [pc, #376]	; (800588c <_vfiprintf_r+0x210>)
 8005712:	f7fa fd65 	bl	80001e0 <memchr>
 8005716:	9b04      	ldr	r3, [sp, #16]
 8005718:	bb78      	cbnz	r0, 800577a <_vfiprintf_r+0xfe>
 800571a:	06d9      	lsls	r1, r3, #27
 800571c:	bf44      	itt	mi
 800571e:	2220      	movmi	r2, #32
 8005720:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005724:	071a      	lsls	r2, r3, #28
 8005726:	bf44      	itt	mi
 8005728:	222b      	movmi	r2, #43	; 0x2b
 800572a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800572e:	782a      	ldrb	r2, [r5, #0]
 8005730:	2a2a      	cmp	r2, #42	; 0x2a
 8005732:	d02a      	beq.n	800578a <_vfiprintf_r+0x10e>
 8005734:	9a07      	ldr	r2, [sp, #28]
 8005736:	46a8      	mov	r8, r5
 8005738:	2000      	movs	r0, #0
 800573a:	250a      	movs	r5, #10
 800573c:	4641      	mov	r1, r8
 800573e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005742:	3b30      	subs	r3, #48	; 0x30
 8005744:	2b09      	cmp	r3, #9
 8005746:	d969      	bls.n	800581c <_vfiprintf_r+0x1a0>
 8005748:	b360      	cbz	r0, 80057a4 <_vfiprintf_r+0x128>
 800574a:	e024      	b.n	8005796 <_vfiprintf_r+0x11a>
 800574c:	4b50      	ldr	r3, [pc, #320]	; (8005890 <_vfiprintf_r+0x214>)
 800574e:	429c      	cmp	r4, r3
 8005750:	d101      	bne.n	8005756 <_vfiprintf_r+0xda>
 8005752:	68b4      	ldr	r4, [r6, #8]
 8005754:	e7a2      	b.n	800569c <_vfiprintf_r+0x20>
 8005756:	4b4f      	ldr	r3, [pc, #316]	; (8005894 <_vfiprintf_r+0x218>)
 8005758:	429c      	cmp	r4, r3
 800575a:	bf08      	it	eq
 800575c:	68f4      	ldreq	r4, [r6, #12]
 800575e:	e79d      	b.n	800569c <_vfiprintf_r+0x20>
 8005760:	4621      	mov	r1, r4
 8005762:	4630      	mov	r0, r6
 8005764:	f000 fae0 	bl	8005d28 <__swsetup_r>
 8005768:	2800      	cmp	r0, #0
 800576a:	d09d      	beq.n	80056a8 <_vfiprintf_r+0x2c>
 800576c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005770:	b01d      	add	sp, #116	; 0x74
 8005772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005776:	46a8      	mov	r8, r5
 8005778:	e7a2      	b.n	80056c0 <_vfiprintf_r+0x44>
 800577a:	4a44      	ldr	r2, [pc, #272]	; (800588c <_vfiprintf_r+0x210>)
 800577c:	1a80      	subs	r0, r0, r2
 800577e:	fa0b f000 	lsl.w	r0, fp, r0
 8005782:	4318      	orrs	r0, r3
 8005784:	9004      	str	r0, [sp, #16]
 8005786:	4645      	mov	r5, r8
 8005788:	e7be      	b.n	8005708 <_vfiprintf_r+0x8c>
 800578a:	9a03      	ldr	r2, [sp, #12]
 800578c:	1d11      	adds	r1, r2, #4
 800578e:	6812      	ldr	r2, [r2, #0]
 8005790:	9103      	str	r1, [sp, #12]
 8005792:	2a00      	cmp	r2, #0
 8005794:	db01      	blt.n	800579a <_vfiprintf_r+0x11e>
 8005796:	9207      	str	r2, [sp, #28]
 8005798:	e004      	b.n	80057a4 <_vfiprintf_r+0x128>
 800579a:	4252      	negs	r2, r2
 800579c:	f043 0302 	orr.w	r3, r3, #2
 80057a0:	9207      	str	r2, [sp, #28]
 80057a2:	9304      	str	r3, [sp, #16]
 80057a4:	f898 3000 	ldrb.w	r3, [r8]
 80057a8:	2b2e      	cmp	r3, #46	; 0x2e
 80057aa:	d10e      	bne.n	80057ca <_vfiprintf_r+0x14e>
 80057ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 80057b0:	2b2a      	cmp	r3, #42	; 0x2a
 80057b2:	d138      	bne.n	8005826 <_vfiprintf_r+0x1aa>
 80057b4:	9b03      	ldr	r3, [sp, #12]
 80057b6:	1d1a      	adds	r2, r3, #4
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	9203      	str	r2, [sp, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bfb8      	it	lt
 80057c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80057c4:	f108 0802 	add.w	r8, r8, #2
 80057c8:	9305      	str	r3, [sp, #20]
 80057ca:	4d33      	ldr	r5, [pc, #204]	; (8005898 <_vfiprintf_r+0x21c>)
 80057cc:	f898 1000 	ldrb.w	r1, [r8]
 80057d0:	2203      	movs	r2, #3
 80057d2:	4628      	mov	r0, r5
 80057d4:	f7fa fd04 	bl	80001e0 <memchr>
 80057d8:	b140      	cbz	r0, 80057ec <_vfiprintf_r+0x170>
 80057da:	2340      	movs	r3, #64	; 0x40
 80057dc:	1b40      	subs	r0, r0, r5
 80057de:	fa03 f000 	lsl.w	r0, r3, r0
 80057e2:	9b04      	ldr	r3, [sp, #16]
 80057e4:	4303      	orrs	r3, r0
 80057e6:	f108 0801 	add.w	r8, r8, #1
 80057ea:	9304      	str	r3, [sp, #16]
 80057ec:	f898 1000 	ldrb.w	r1, [r8]
 80057f0:	482a      	ldr	r0, [pc, #168]	; (800589c <_vfiprintf_r+0x220>)
 80057f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057f6:	2206      	movs	r2, #6
 80057f8:	f108 0701 	add.w	r7, r8, #1
 80057fc:	f7fa fcf0 	bl	80001e0 <memchr>
 8005800:	2800      	cmp	r0, #0
 8005802:	d037      	beq.n	8005874 <_vfiprintf_r+0x1f8>
 8005804:	4b26      	ldr	r3, [pc, #152]	; (80058a0 <_vfiprintf_r+0x224>)
 8005806:	bb1b      	cbnz	r3, 8005850 <_vfiprintf_r+0x1d4>
 8005808:	9b03      	ldr	r3, [sp, #12]
 800580a:	3307      	adds	r3, #7
 800580c:	f023 0307 	bic.w	r3, r3, #7
 8005810:	3308      	adds	r3, #8
 8005812:	9303      	str	r3, [sp, #12]
 8005814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005816:	444b      	add	r3, r9
 8005818:	9309      	str	r3, [sp, #36]	; 0x24
 800581a:	e750      	b.n	80056be <_vfiprintf_r+0x42>
 800581c:	fb05 3202 	mla	r2, r5, r2, r3
 8005820:	2001      	movs	r0, #1
 8005822:	4688      	mov	r8, r1
 8005824:	e78a      	b.n	800573c <_vfiprintf_r+0xc0>
 8005826:	2300      	movs	r3, #0
 8005828:	f108 0801 	add.w	r8, r8, #1
 800582c:	9305      	str	r3, [sp, #20]
 800582e:	4619      	mov	r1, r3
 8005830:	250a      	movs	r5, #10
 8005832:	4640      	mov	r0, r8
 8005834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005838:	3a30      	subs	r2, #48	; 0x30
 800583a:	2a09      	cmp	r2, #9
 800583c:	d903      	bls.n	8005846 <_vfiprintf_r+0x1ca>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0c3      	beq.n	80057ca <_vfiprintf_r+0x14e>
 8005842:	9105      	str	r1, [sp, #20]
 8005844:	e7c1      	b.n	80057ca <_vfiprintf_r+0x14e>
 8005846:	fb05 2101 	mla	r1, r5, r1, r2
 800584a:	2301      	movs	r3, #1
 800584c:	4680      	mov	r8, r0
 800584e:	e7f0      	b.n	8005832 <_vfiprintf_r+0x1b6>
 8005850:	ab03      	add	r3, sp, #12
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	4622      	mov	r2, r4
 8005856:	4b13      	ldr	r3, [pc, #76]	; (80058a4 <_vfiprintf_r+0x228>)
 8005858:	a904      	add	r1, sp, #16
 800585a:	4630      	mov	r0, r6
 800585c:	f3af 8000 	nop.w
 8005860:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005864:	4681      	mov	r9, r0
 8005866:	d1d5      	bne.n	8005814 <_vfiprintf_r+0x198>
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	065b      	lsls	r3, r3, #25
 800586c:	f53f af7e 	bmi.w	800576c <_vfiprintf_r+0xf0>
 8005870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005872:	e77d      	b.n	8005770 <_vfiprintf_r+0xf4>
 8005874:	ab03      	add	r3, sp, #12
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	4622      	mov	r2, r4
 800587a:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <_vfiprintf_r+0x228>)
 800587c:	a904      	add	r1, sp, #16
 800587e:	4630      	mov	r0, r6
 8005880:	f000 f888 	bl	8005994 <_printf_i>
 8005884:	e7ec      	b.n	8005860 <_vfiprintf_r+0x1e4>
 8005886:	bf00      	nop
 8005888:	080061f0 	.word	0x080061f0
 800588c:	08006230 	.word	0x08006230
 8005890:	08006210 	.word	0x08006210
 8005894:	080061d0 	.word	0x080061d0
 8005898:	08006236 	.word	0x08006236
 800589c:	0800623a 	.word	0x0800623a
 80058a0:	00000000 	.word	0x00000000
 80058a4:	08005657 	.word	0x08005657

080058a8 <_printf_common>:
 80058a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ac:	4691      	mov	r9, r2
 80058ae:	461f      	mov	r7, r3
 80058b0:	688a      	ldr	r2, [r1, #8]
 80058b2:	690b      	ldr	r3, [r1, #16]
 80058b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058b8:	4293      	cmp	r3, r2
 80058ba:	bfb8      	it	lt
 80058bc:	4613      	movlt	r3, r2
 80058be:	f8c9 3000 	str.w	r3, [r9]
 80058c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058c6:	4606      	mov	r6, r0
 80058c8:	460c      	mov	r4, r1
 80058ca:	b112      	cbz	r2, 80058d2 <_printf_common+0x2a>
 80058cc:	3301      	adds	r3, #1
 80058ce:	f8c9 3000 	str.w	r3, [r9]
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	0699      	lsls	r1, r3, #26
 80058d6:	bf42      	ittt	mi
 80058d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80058dc:	3302      	addmi	r3, #2
 80058de:	f8c9 3000 	strmi.w	r3, [r9]
 80058e2:	6825      	ldr	r5, [r4, #0]
 80058e4:	f015 0506 	ands.w	r5, r5, #6
 80058e8:	d107      	bne.n	80058fa <_printf_common+0x52>
 80058ea:	f104 0a19 	add.w	sl, r4, #25
 80058ee:	68e3      	ldr	r3, [r4, #12]
 80058f0:	f8d9 2000 	ldr.w	r2, [r9]
 80058f4:	1a9b      	subs	r3, r3, r2
 80058f6:	42ab      	cmp	r3, r5
 80058f8:	dc28      	bgt.n	800594c <_printf_common+0xa4>
 80058fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	3300      	adds	r3, #0
 8005902:	bf18      	it	ne
 8005904:	2301      	movne	r3, #1
 8005906:	0692      	lsls	r2, r2, #26
 8005908:	d42d      	bmi.n	8005966 <_printf_common+0xbe>
 800590a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800590e:	4639      	mov	r1, r7
 8005910:	4630      	mov	r0, r6
 8005912:	47c0      	blx	r8
 8005914:	3001      	adds	r0, #1
 8005916:	d020      	beq.n	800595a <_printf_common+0xb2>
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	68e5      	ldr	r5, [r4, #12]
 800591c:	f8d9 2000 	ldr.w	r2, [r9]
 8005920:	f003 0306 	and.w	r3, r3, #6
 8005924:	2b04      	cmp	r3, #4
 8005926:	bf08      	it	eq
 8005928:	1aad      	subeq	r5, r5, r2
 800592a:	68a3      	ldr	r3, [r4, #8]
 800592c:	6922      	ldr	r2, [r4, #16]
 800592e:	bf0c      	ite	eq
 8005930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005934:	2500      	movne	r5, #0
 8005936:	4293      	cmp	r3, r2
 8005938:	bfc4      	itt	gt
 800593a:	1a9b      	subgt	r3, r3, r2
 800593c:	18ed      	addgt	r5, r5, r3
 800593e:	f04f 0900 	mov.w	r9, #0
 8005942:	341a      	adds	r4, #26
 8005944:	454d      	cmp	r5, r9
 8005946:	d11a      	bne.n	800597e <_printf_common+0xd6>
 8005948:	2000      	movs	r0, #0
 800594a:	e008      	b.n	800595e <_printf_common+0xb6>
 800594c:	2301      	movs	r3, #1
 800594e:	4652      	mov	r2, sl
 8005950:	4639      	mov	r1, r7
 8005952:	4630      	mov	r0, r6
 8005954:	47c0      	blx	r8
 8005956:	3001      	adds	r0, #1
 8005958:	d103      	bne.n	8005962 <_printf_common+0xba>
 800595a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800595e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005962:	3501      	adds	r5, #1
 8005964:	e7c3      	b.n	80058ee <_printf_common+0x46>
 8005966:	18e1      	adds	r1, r4, r3
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	2030      	movs	r0, #48	; 0x30
 800596c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005970:	4422      	add	r2, r4
 8005972:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005976:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800597a:	3302      	adds	r3, #2
 800597c:	e7c5      	b.n	800590a <_printf_common+0x62>
 800597e:	2301      	movs	r3, #1
 8005980:	4622      	mov	r2, r4
 8005982:	4639      	mov	r1, r7
 8005984:	4630      	mov	r0, r6
 8005986:	47c0      	blx	r8
 8005988:	3001      	adds	r0, #1
 800598a:	d0e6      	beq.n	800595a <_printf_common+0xb2>
 800598c:	f109 0901 	add.w	r9, r9, #1
 8005990:	e7d8      	b.n	8005944 <_printf_common+0x9c>
	...

08005994 <_printf_i>:
 8005994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005998:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800599c:	460c      	mov	r4, r1
 800599e:	7e09      	ldrb	r1, [r1, #24]
 80059a0:	b085      	sub	sp, #20
 80059a2:	296e      	cmp	r1, #110	; 0x6e
 80059a4:	4617      	mov	r7, r2
 80059a6:	4606      	mov	r6, r0
 80059a8:	4698      	mov	r8, r3
 80059aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059ac:	f000 80b3 	beq.w	8005b16 <_printf_i+0x182>
 80059b0:	d822      	bhi.n	80059f8 <_printf_i+0x64>
 80059b2:	2963      	cmp	r1, #99	; 0x63
 80059b4:	d036      	beq.n	8005a24 <_printf_i+0x90>
 80059b6:	d80a      	bhi.n	80059ce <_printf_i+0x3a>
 80059b8:	2900      	cmp	r1, #0
 80059ba:	f000 80b9 	beq.w	8005b30 <_printf_i+0x19c>
 80059be:	2958      	cmp	r1, #88	; 0x58
 80059c0:	f000 8083 	beq.w	8005aca <_printf_i+0x136>
 80059c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80059cc:	e032      	b.n	8005a34 <_printf_i+0xa0>
 80059ce:	2964      	cmp	r1, #100	; 0x64
 80059d0:	d001      	beq.n	80059d6 <_printf_i+0x42>
 80059d2:	2969      	cmp	r1, #105	; 0x69
 80059d4:	d1f6      	bne.n	80059c4 <_printf_i+0x30>
 80059d6:	6820      	ldr	r0, [r4, #0]
 80059d8:	6813      	ldr	r3, [r2, #0]
 80059da:	0605      	lsls	r5, r0, #24
 80059dc:	f103 0104 	add.w	r1, r3, #4
 80059e0:	d52a      	bpl.n	8005a38 <_printf_i+0xa4>
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6011      	str	r1, [r2, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	da03      	bge.n	80059f2 <_printf_i+0x5e>
 80059ea:	222d      	movs	r2, #45	; 0x2d
 80059ec:	425b      	negs	r3, r3
 80059ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80059f2:	486f      	ldr	r0, [pc, #444]	; (8005bb0 <_printf_i+0x21c>)
 80059f4:	220a      	movs	r2, #10
 80059f6:	e039      	b.n	8005a6c <_printf_i+0xd8>
 80059f8:	2973      	cmp	r1, #115	; 0x73
 80059fa:	f000 809d 	beq.w	8005b38 <_printf_i+0x1a4>
 80059fe:	d808      	bhi.n	8005a12 <_printf_i+0x7e>
 8005a00:	296f      	cmp	r1, #111	; 0x6f
 8005a02:	d020      	beq.n	8005a46 <_printf_i+0xb2>
 8005a04:	2970      	cmp	r1, #112	; 0x70
 8005a06:	d1dd      	bne.n	80059c4 <_printf_i+0x30>
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	f043 0320 	orr.w	r3, r3, #32
 8005a0e:	6023      	str	r3, [r4, #0]
 8005a10:	e003      	b.n	8005a1a <_printf_i+0x86>
 8005a12:	2975      	cmp	r1, #117	; 0x75
 8005a14:	d017      	beq.n	8005a46 <_printf_i+0xb2>
 8005a16:	2978      	cmp	r1, #120	; 0x78
 8005a18:	d1d4      	bne.n	80059c4 <_printf_i+0x30>
 8005a1a:	2378      	movs	r3, #120	; 0x78
 8005a1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a20:	4864      	ldr	r0, [pc, #400]	; (8005bb4 <_printf_i+0x220>)
 8005a22:	e055      	b.n	8005ad0 <_printf_i+0x13c>
 8005a24:	6813      	ldr	r3, [r2, #0]
 8005a26:	1d19      	adds	r1, r3, #4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6011      	str	r1, [r2, #0]
 8005a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a34:	2301      	movs	r3, #1
 8005a36:	e08c      	b.n	8005b52 <_printf_i+0x1be>
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6011      	str	r1, [r2, #0]
 8005a3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a40:	bf18      	it	ne
 8005a42:	b21b      	sxthne	r3, r3
 8005a44:	e7cf      	b.n	80059e6 <_printf_i+0x52>
 8005a46:	6813      	ldr	r3, [r2, #0]
 8005a48:	6825      	ldr	r5, [r4, #0]
 8005a4a:	1d18      	adds	r0, r3, #4
 8005a4c:	6010      	str	r0, [r2, #0]
 8005a4e:	0628      	lsls	r0, r5, #24
 8005a50:	d501      	bpl.n	8005a56 <_printf_i+0xc2>
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	e002      	b.n	8005a5c <_printf_i+0xc8>
 8005a56:	0668      	lsls	r0, r5, #25
 8005a58:	d5fb      	bpl.n	8005a52 <_printf_i+0xbe>
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	4854      	ldr	r0, [pc, #336]	; (8005bb0 <_printf_i+0x21c>)
 8005a5e:	296f      	cmp	r1, #111	; 0x6f
 8005a60:	bf14      	ite	ne
 8005a62:	220a      	movne	r2, #10
 8005a64:	2208      	moveq	r2, #8
 8005a66:	2100      	movs	r1, #0
 8005a68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a6c:	6865      	ldr	r5, [r4, #4]
 8005a6e:	60a5      	str	r5, [r4, #8]
 8005a70:	2d00      	cmp	r5, #0
 8005a72:	f2c0 8095 	blt.w	8005ba0 <_printf_i+0x20c>
 8005a76:	6821      	ldr	r1, [r4, #0]
 8005a78:	f021 0104 	bic.w	r1, r1, #4
 8005a7c:	6021      	str	r1, [r4, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d13d      	bne.n	8005afe <_printf_i+0x16a>
 8005a82:	2d00      	cmp	r5, #0
 8005a84:	f040 808e 	bne.w	8005ba4 <_printf_i+0x210>
 8005a88:	4665      	mov	r5, ip
 8005a8a:	2a08      	cmp	r2, #8
 8005a8c:	d10b      	bne.n	8005aa6 <_printf_i+0x112>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	07db      	lsls	r3, r3, #31
 8005a92:	d508      	bpl.n	8005aa6 <_printf_i+0x112>
 8005a94:	6923      	ldr	r3, [r4, #16]
 8005a96:	6862      	ldr	r2, [r4, #4]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	bfde      	ittt	le
 8005a9c:	2330      	movle	r3, #48	; 0x30
 8005a9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005aa2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005aa6:	ebac 0305 	sub.w	r3, ip, r5
 8005aaa:	6123      	str	r3, [r4, #16]
 8005aac:	f8cd 8000 	str.w	r8, [sp]
 8005ab0:	463b      	mov	r3, r7
 8005ab2:	aa03      	add	r2, sp, #12
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	f7ff fef6 	bl	80058a8 <_printf_common>
 8005abc:	3001      	adds	r0, #1
 8005abe:	d14d      	bne.n	8005b5c <_printf_i+0x1c8>
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ac4:	b005      	add	sp, #20
 8005ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005aca:	4839      	ldr	r0, [pc, #228]	; (8005bb0 <_printf_i+0x21c>)
 8005acc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ad0:	6813      	ldr	r3, [r2, #0]
 8005ad2:	6821      	ldr	r1, [r4, #0]
 8005ad4:	1d1d      	adds	r5, r3, #4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6015      	str	r5, [r2, #0]
 8005ada:	060a      	lsls	r2, r1, #24
 8005adc:	d50b      	bpl.n	8005af6 <_printf_i+0x162>
 8005ade:	07ca      	lsls	r2, r1, #31
 8005ae0:	bf44      	itt	mi
 8005ae2:	f041 0120 	orrmi.w	r1, r1, #32
 8005ae6:	6021      	strmi	r1, [r4, #0]
 8005ae8:	b91b      	cbnz	r3, 8005af2 <_printf_i+0x15e>
 8005aea:	6822      	ldr	r2, [r4, #0]
 8005aec:	f022 0220 	bic.w	r2, r2, #32
 8005af0:	6022      	str	r2, [r4, #0]
 8005af2:	2210      	movs	r2, #16
 8005af4:	e7b7      	b.n	8005a66 <_printf_i+0xd2>
 8005af6:	064d      	lsls	r5, r1, #25
 8005af8:	bf48      	it	mi
 8005afa:	b29b      	uxthmi	r3, r3
 8005afc:	e7ef      	b.n	8005ade <_printf_i+0x14a>
 8005afe:	4665      	mov	r5, ip
 8005b00:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b04:	fb02 3311 	mls	r3, r2, r1, r3
 8005b08:	5cc3      	ldrb	r3, [r0, r3]
 8005b0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005b0e:	460b      	mov	r3, r1
 8005b10:	2900      	cmp	r1, #0
 8005b12:	d1f5      	bne.n	8005b00 <_printf_i+0x16c>
 8005b14:	e7b9      	b.n	8005a8a <_printf_i+0xf6>
 8005b16:	6813      	ldr	r3, [r2, #0]
 8005b18:	6825      	ldr	r5, [r4, #0]
 8005b1a:	6961      	ldr	r1, [r4, #20]
 8005b1c:	1d18      	adds	r0, r3, #4
 8005b1e:	6010      	str	r0, [r2, #0]
 8005b20:	0628      	lsls	r0, r5, #24
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	d501      	bpl.n	8005b2a <_printf_i+0x196>
 8005b26:	6019      	str	r1, [r3, #0]
 8005b28:	e002      	b.n	8005b30 <_printf_i+0x19c>
 8005b2a:	066a      	lsls	r2, r5, #25
 8005b2c:	d5fb      	bpl.n	8005b26 <_printf_i+0x192>
 8005b2e:	8019      	strh	r1, [r3, #0]
 8005b30:	2300      	movs	r3, #0
 8005b32:	6123      	str	r3, [r4, #16]
 8005b34:	4665      	mov	r5, ip
 8005b36:	e7b9      	b.n	8005aac <_printf_i+0x118>
 8005b38:	6813      	ldr	r3, [r2, #0]
 8005b3a:	1d19      	adds	r1, r3, #4
 8005b3c:	6011      	str	r1, [r2, #0]
 8005b3e:	681d      	ldr	r5, [r3, #0]
 8005b40:	6862      	ldr	r2, [r4, #4]
 8005b42:	2100      	movs	r1, #0
 8005b44:	4628      	mov	r0, r5
 8005b46:	f7fa fb4b 	bl	80001e0 <memchr>
 8005b4a:	b108      	cbz	r0, 8005b50 <_printf_i+0x1bc>
 8005b4c:	1b40      	subs	r0, r0, r5
 8005b4e:	6060      	str	r0, [r4, #4]
 8005b50:	6863      	ldr	r3, [r4, #4]
 8005b52:	6123      	str	r3, [r4, #16]
 8005b54:	2300      	movs	r3, #0
 8005b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b5a:	e7a7      	b.n	8005aac <_printf_i+0x118>
 8005b5c:	6923      	ldr	r3, [r4, #16]
 8005b5e:	462a      	mov	r2, r5
 8005b60:	4639      	mov	r1, r7
 8005b62:	4630      	mov	r0, r6
 8005b64:	47c0      	blx	r8
 8005b66:	3001      	adds	r0, #1
 8005b68:	d0aa      	beq.n	8005ac0 <_printf_i+0x12c>
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	079b      	lsls	r3, r3, #30
 8005b6e:	d413      	bmi.n	8005b98 <_printf_i+0x204>
 8005b70:	68e0      	ldr	r0, [r4, #12]
 8005b72:	9b03      	ldr	r3, [sp, #12]
 8005b74:	4298      	cmp	r0, r3
 8005b76:	bfb8      	it	lt
 8005b78:	4618      	movlt	r0, r3
 8005b7a:	e7a3      	b.n	8005ac4 <_printf_i+0x130>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	464a      	mov	r2, r9
 8005b80:	4639      	mov	r1, r7
 8005b82:	4630      	mov	r0, r6
 8005b84:	47c0      	blx	r8
 8005b86:	3001      	adds	r0, #1
 8005b88:	d09a      	beq.n	8005ac0 <_printf_i+0x12c>
 8005b8a:	3501      	adds	r5, #1
 8005b8c:	68e3      	ldr	r3, [r4, #12]
 8005b8e:	9a03      	ldr	r2, [sp, #12]
 8005b90:	1a9b      	subs	r3, r3, r2
 8005b92:	42ab      	cmp	r3, r5
 8005b94:	dcf2      	bgt.n	8005b7c <_printf_i+0x1e8>
 8005b96:	e7eb      	b.n	8005b70 <_printf_i+0x1dc>
 8005b98:	2500      	movs	r5, #0
 8005b9a:	f104 0919 	add.w	r9, r4, #25
 8005b9e:	e7f5      	b.n	8005b8c <_printf_i+0x1f8>
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1ac      	bne.n	8005afe <_printf_i+0x16a>
 8005ba4:	7803      	ldrb	r3, [r0, #0]
 8005ba6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005baa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bae:	e76c      	b.n	8005a8a <_printf_i+0xf6>
 8005bb0:	08006241 	.word	0x08006241
 8005bb4:	08006252 	.word	0x08006252

08005bb8 <_sbrk_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4c06      	ldr	r4, [pc, #24]	; (8005bd4 <_sbrk_r+0x1c>)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	6023      	str	r3, [r4, #0]
 8005bc4:	f7fb fb32 	bl	800122c <_sbrk>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_sbrk_r+0x1a>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_sbrk_r+0x1a>
 8005bd0:	602b      	str	r3, [r5, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	20004dfc 	.word	0x20004dfc

08005bd8 <__sread>:
 8005bd8:	b510      	push	{r4, lr}
 8005bda:	460c      	mov	r4, r1
 8005bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be0:	f000 fa96 	bl	8006110 <_read_r>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	bfab      	itete	ge
 8005be8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bea:	89a3      	ldrhlt	r3, [r4, #12]
 8005bec:	181b      	addge	r3, r3, r0
 8005bee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bf2:	bfac      	ite	ge
 8005bf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bf6:	81a3      	strhlt	r3, [r4, #12]
 8005bf8:	bd10      	pop	{r4, pc}

08005bfa <__swrite>:
 8005bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfe:	461f      	mov	r7, r3
 8005c00:	898b      	ldrh	r3, [r1, #12]
 8005c02:	05db      	lsls	r3, r3, #23
 8005c04:	4605      	mov	r5, r0
 8005c06:	460c      	mov	r4, r1
 8005c08:	4616      	mov	r6, r2
 8005c0a:	d505      	bpl.n	8005c18 <__swrite+0x1e>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c14:	f000 f9b6 	bl	8005f84 <_lseek_r>
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c22:	81a3      	strh	r3, [r4, #12]
 8005c24:	4632      	mov	r2, r6
 8005c26:	463b      	mov	r3, r7
 8005c28:	4628      	mov	r0, r5
 8005c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c2e:	f000 b869 	b.w	8005d04 <_write_r>

08005c32 <__sseek>:
 8005c32:	b510      	push	{r4, lr}
 8005c34:	460c      	mov	r4, r1
 8005c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3a:	f000 f9a3 	bl	8005f84 <_lseek_r>
 8005c3e:	1c43      	adds	r3, r0, #1
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	bf15      	itete	ne
 8005c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c4e:	81a3      	strheq	r3, [r4, #12]
 8005c50:	bf18      	it	ne
 8005c52:	81a3      	strhne	r3, [r4, #12]
 8005c54:	bd10      	pop	{r4, pc}

08005c56 <__sclose>:
 8005c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5a:	f000 b8d3 	b.w	8005e04 <_close_r>
	...

08005c60 <__swbuf_r>:
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	460e      	mov	r6, r1
 8005c64:	4614      	mov	r4, r2
 8005c66:	4605      	mov	r5, r0
 8005c68:	b118      	cbz	r0, 8005c72 <__swbuf_r+0x12>
 8005c6a:	6983      	ldr	r3, [r0, #24]
 8005c6c:	b90b      	cbnz	r3, 8005c72 <__swbuf_r+0x12>
 8005c6e:	f7ff fbf7 	bl	8005460 <__sinit>
 8005c72:	4b21      	ldr	r3, [pc, #132]	; (8005cf8 <__swbuf_r+0x98>)
 8005c74:	429c      	cmp	r4, r3
 8005c76:	d12a      	bne.n	8005cce <__swbuf_r+0x6e>
 8005c78:	686c      	ldr	r4, [r5, #4]
 8005c7a:	69a3      	ldr	r3, [r4, #24]
 8005c7c:	60a3      	str	r3, [r4, #8]
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	071a      	lsls	r2, r3, #28
 8005c82:	d52e      	bpl.n	8005ce2 <__swbuf_r+0x82>
 8005c84:	6923      	ldr	r3, [r4, #16]
 8005c86:	b363      	cbz	r3, 8005ce2 <__swbuf_r+0x82>
 8005c88:	6923      	ldr	r3, [r4, #16]
 8005c8a:	6820      	ldr	r0, [r4, #0]
 8005c8c:	1ac0      	subs	r0, r0, r3
 8005c8e:	6963      	ldr	r3, [r4, #20]
 8005c90:	b2f6      	uxtb	r6, r6
 8005c92:	4283      	cmp	r3, r0
 8005c94:	4637      	mov	r7, r6
 8005c96:	dc04      	bgt.n	8005ca2 <__swbuf_r+0x42>
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 f948 	bl	8005f30 <_fflush_r>
 8005ca0:	bb28      	cbnz	r0, 8005cee <__swbuf_r+0x8e>
 8005ca2:	68a3      	ldr	r3, [r4, #8]
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	60a3      	str	r3, [r4, #8]
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	6022      	str	r2, [r4, #0]
 8005cae:	701e      	strb	r6, [r3, #0]
 8005cb0:	6963      	ldr	r3, [r4, #20]
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	4283      	cmp	r3, r0
 8005cb6:	d004      	beq.n	8005cc2 <__swbuf_r+0x62>
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	07db      	lsls	r3, r3, #31
 8005cbc:	d519      	bpl.n	8005cf2 <__swbuf_r+0x92>
 8005cbe:	2e0a      	cmp	r6, #10
 8005cc0:	d117      	bne.n	8005cf2 <__swbuf_r+0x92>
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f000 f933 	bl	8005f30 <_fflush_r>
 8005cca:	b190      	cbz	r0, 8005cf2 <__swbuf_r+0x92>
 8005ccc:	e00f      	b.n	8005cee <__swbuf_r+0x8e>
 8005cce:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <__swbuf_r+0x9c>)
 8005cd0:	429c      	cmp	r4, r3
 8005cd2:	d101      	bne.n	8005cd8 <__swbuf_r+0x78>
 8005cd4:	68ac      	ldr	r4, [r5, #8]
 8005cd6:	e7d0      	b.n	8005c7a <__swbuf_r+0x1a>
 8005cd8:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <__swbuf_r+0xa0>)
 8005cda:	429c      	cmp	r4, r3
 8005cdc:	bf08      	it	eq
 8005cde:	68ec      	ldreq	r4, [r5, #12]
 8005ce0:	e7cb      	b.n	8005c7a <__swbuf_r+0x1a>
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f000 f81f 	bl	8005d28 <__swsetup_r>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d0cc      	beq.n	8005c88 <__swbuf_r+0x28>
 8005cee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	080061f0 	.word	0x080061f0
 8005cfc:	08006210 	.word	0x08006210
 8005d00:	080061d0 	.word	0x080061d0

08005d04 <_write_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4c07      	ldr	r4, [pc, #28]	; (8005d24 <_write_r+0x20>)
 8005d08:	4605      	mov	r5, r0
 8005d0a:	4608      	mov	r0, r1
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	2200      	movs	r2, #0
 8005d10:	6022      	str	r2, [r4, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f7fb fa39 	bl	800118a <_write>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_write_r+0x1e>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_write_r+0x1e>
 8005d20:	602b      	str	r3, [r5, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	20004dfc 	.word	0x20004dfc

08005d28 <__swsetup_r>:
 8005d28:	4b32      	ldr	r3, [pc, #200]	; (8005df4 <__swsetup_r+0xcc>)
 8005d2a:	b570      	push	{r4, r5, r6, lr}
 8005d2c:	681d      	ldr	r5, [r3, #0]
 8005d2e:	4606      	mov	r6, r0
 8005d30:	460c      	mov	r4, r1
 8005d32:	b125      	cbz	r5, 8005d3e <__swsetup_r+0x16>
 8005d34:	69ab      	ldr	r3, [r5, #24]
 8005d36:	b913      	cbnz	r3, 8005d3e <__swsetup_r+0x16>
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f7ff fb91 	bl	8005460 <__sinit>
 8005d3e:	4b2e      	ldr	r3, [pc, #184]	; (8005df8 <__swsetup_r+0xd0>)
 8005d40:	429c      	cmp	r4, r3
 8005d42:	d10f      	bne.n	8005d64 <__swsetup_r+0x3c>
 8005d44:	686c      	ldr	r4, [r5, #4]
 8005d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	0715      	lsls	r5, r2, #28
 8005d4e:	d42c      	bmi.n	8005daa <__swsetup_r+0x82>
 8005d50:	06d0      	lsls	r0, r2, #27
 8005d52:	d411      	bmi.n	8005d78 <__swsetup_r+0x50>
 8005d54:	2209      	movs	r2, #9
 8005d56:	6032      	str	r2, [r6, #0]
 8005d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d5c:	81a3      	strh	r3, [r4, #12]
 8005d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d62:	e03e      	b.n	8005de2 <__swsetup_r+0xba>
 8005d64:	4b25      	ldr	r3, [pc, #148]	; (8005dfc <__swsetup_r+0xd4>)
 8005d66:	429c      	cmp	r4, r3
 8005d68:	d101      	bne.n	8005d6e <__swsetup_r+0x46>
 8005d6a:	68ac      	ldr	r4, [r5, #8]
 8005d6c:	e7eb      	b.n	8005d46 <__swsetup_r+0x1e>
 8005d6e:	4b24      	ldr	r3, [pc, #144]	; (8005e00 <__swsetup_r+0xd8>)
 8005d70:	429c      	cmp	r4, r3
 8005d72:	bf08      	it	eq
 8005d74:	68ec      	ldreq	r4, [r5, #12]
 8005d76:	e7e6      	b.n	8005d46 <__swsetup_r+0x1e>
 8005d78:	0751      	lsls	r1, r2, #29
 8005d7a:	d512      	bpl.n	8005da2 <__swsetup_r+0x7a>
 8005d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d7e:	b141      	cbz	r1, 8005d92 <__swsetup_r+0x6a>
 8005d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d84:	4299      	cmp	r1, r3
 8005d86:	d002      	beq.n	8005d8e <__swsetup_r+0x66>
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f000 f973 	bl	8006074 <_free_r>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	6363      	str	r3, [r4, #52]	; 0x34
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d98:	81a3      	strh	r3, [r4, #12]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	6063      	str	r3, [r4, #4]
 8005d9e:	6923      	ldr	r3, [r4, #16]
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	89a3      	ldrh	r3, [r4, #12]
 8005da4:	f043 0308 	orr.w	r3, r3, #8
 8005da8:	81a3      	strh	r3, [r4, #12]
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	b94b      	cbnz	r3, 8005dc2 <__swsetup_r+0x9a>
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db8:	d003      	beq.n	8005dc2 <__swsetup_r+0x9a>
 8005dba:	4621      	mov	r1, r4
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f000 f917 	bl	8005ff0 <__smakebuf_r>
 8005dc2:	89a2      	ldrh	r2, [r4, #12]
 8005dc4:	f012 0301 	ands.w	r3, r2, #1
 8005dc8:	d00c      	beq.n	8005de4 <__swsetup_r+0xbc>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60a3      	str	r3, [r4, #8]
 8005dce:	6963      	ldr	r3, [r4, #20]
 8005dd0:	425b      	negs	r3, r3
 8005dd2:	61a3      	str	r3, [r4, #24]
 8005dd4:	6923      	ldr	r3, [r4, #16]
 8005dd6:	b953      	cbnz	r3, 8005dee <__swsetup_r+0xc6>
 8005dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ddc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005de0:	d1ba      	bne.n	8005d58 <__swsetup_r+0x30>
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
 8005de4:	0792      	lsls	r2, r2, #30
 8005de6:	bf58      	it	pl
 8005de8:	6963      	ldrpl	r3, [r4, #20]
 8005dea:	60a3      	str	r3, [r4, #8]
 8005dec:	e7f2      	b.n	8005dd4 <__swsetup_r+0xac>
 8005dee:	2000      	movs	r0, #0
 8005df0:	e7f7      	b.n	8005de2 <__swsetup_r+0xba>
 8005df2:	bf00      	nop
 8005df4:	2000008c 	.word	0x2000008c
 8005df8:	080061f0 	.word	0x080061f0
 8005dfc:	08006210 	.word	0x08006210
 8005e00:	080061d0 	.word	0x080061d0

08005e04 <_close_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4c06      	ldr	r4, [pc, #24]	; (8005e20 <_close_r+0x1c>)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	6023      	str	r3, [r4, #0]
 8005e10:	f7fb f9d7 	bl	80011c2 <_close>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_close_r+0x1a>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_close_r+0x1a>
 8005e1c:	602b      	str	r3, [r5, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	20004dfc 	.word	0x20004dfc

08005e24 <__sflush_r>:
 8005e24:	898a      	ldrh	r2, [r1, #12]
 8005e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2a:	4605      	mov	r5, r0
 8005e2c:	0710      	lsls	r0, r2, #28
 8005e2e:	460c      	mov	r4, r1
 8005e30:	d458      	bmi.n	8005ee4 <__sflush_r+0xc0>
 8005e32:	684b      	ldr	r3, [r1, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	dc05      	bgt.n	8005e44 <__sflush_r+0x20>
 8005e38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	dc02      	bgt.n	8005e44 <__sflush_r+0x20>
 8005e3e:	2000      	movs	r0, #0
 8005e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e46:	2e00      	cmp	r6, #0
 8005e48:	d0f9      	beq.n	8005e3e <__sflush_r+0x1a>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e50:	682f      	ldr	r7, [r5, #0]
 8005e52:	6a21      	ldr	r1, [r4, #32]
 8005e54:	602b      	str	r3, [r5, #0]
 8005e56:	d032      	beq.n	8005ebe <__sflush_r+0x9a>
 8005e58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	075a      	lsls	r2, r3, #29
 8005e5e:	d505      	bpl.n	8005e6c <__sflush_r+0x48>
 8005e60:	6863      	ldr	r3, [r4, #4]
 8005e62:	1ac0      	subs	r0, r0, r3
 8005e64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e66:	b10b      	cbz	r3, 8005e6c <__sflush_r+0x48>
 8005e68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e6a:	1ac0      	subs	r0, r0, r3
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	4602      	mov	r2, r0
 8005e70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e72:	6a21      	ldr	r1, [r4, #32]
 8005e74:	4628      	mov	r0, r5
 8005e76:	47b0      	blx	r6
 8005e78:	1c43      	adds	r3, r0, #1
 8005e7a:	89a3      	ldrh	r3, [r4, #12]
 8005e7c:	d106      	bne.n	8005e8c <__sflush_r+0x68>
 8005e7e:	6829      	ldr	r1, [r5, #0]
 8005e80:	291d      	cmp	r1, #29
 8005e82:	d848      	bhi.n	8005f16 <__sflush_r+0xf2>
 8005e84:	4a29      	ldr	r2, [pc, #164]	; (8005f2c <__sflush_r+0x108>)
 8005e86:	40ca      	lsrs	r2, r1
 8005e88:	07d6      	lsls	r6, r2, #31
 8005e8a:	d544      	bpl.n	8005f16 <__sflush_r+0xf2>
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	6062      	str	r2, [r4, #4]
 8005e90:	04d9      	lsls	r1, r3, #19
 8005e92:	6922      	ldr	r2, [r4, #16]
 8005e94:	6022      	str	r2, [r4, #0]
 8005e96:	d504      	bpl.n	8005ea2 <__sflush_r+0x7e>
 8005e98:	1c42      	adds	r2, r0, #1
 8005e9a:	d101      	bne.n	8005ea0 <__sflush_r+0x7c>
 8005e9c:	682b      	ldr	r3, [r5, #0]
 8005e9e:	b903      	cbnz	r3, 8005ea2 <__sflush_r+0x7e>
 8005ea0:	6560      	str	r0, [r4, #84]	; 0x54
 8005ea2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ea4:	602f      	str	r7, [r5, #0]
 8005ea6:	2900      	cmp	r1, #0
 8005ea8:	d0c9      	beq.n	8005e3e <__sflush_r+0x1a>
 8005eaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005eae:	4299      	cmp	r1, r3
 8005eb0:	d002      	beq.n	8005eb8 <__sflush_r+0x94>
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	f000 f8de 	bl	8006074 <_free_r>
 8005eb8:	2000      	movs	r0, #0
 8005eba:	6360      	str	r0, [r4, #52]	; 0x34
 8005ebc:	e7c0      	b.n	8005e40 <__sflush_r+0x1c>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	47b0      	blx	r6
 8005ec4:	1c41      	adds	r1, r0, #1
 8005ec6:	d1c8      	bne.n	8005e5a <__sflush_r+0x36>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0c5      	beq.n	8005e5a <__sflush_r+0x36>
 8005ece:	2b1d      	cmp	r3, #29
 8005ed0:	d001      	beq.n	8005ed6 <__sflush_r+0xb2>
 8005ed2:	2b16      	cmp	r3, #22
 8005ed4:	d101      	bne.n	8005eda <__sflush_r+0xb6>
 8005ed6:	602f      	str	r7, [r5, #0]
 8005ed8:	e7b1      	b.n	8005e3e <__sflush_r+0x1a>
 8005eda:	89a3      	ldrh	r3, [r4, #12]
 8005edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ee0:	81a3      	strh	r3, [r4, #12]
 8005ee2:	e7ad      	b.n	8005e40 <__sflush_r+0x1c>
 8005ee4:	690f      	ldr	r7, [r1, #16]
 8005ee6:	2f00      	cmp	r7, #0
 8005ee8:	d0a9      	beq.n	8005e3e <__sflush_r+0x1a>
 8005eea:	0793      	lsls	r3, r2, #30
 8005eec:	680e      	ldr	r6, [r1, #0]
 8005eee:	bf08      	it	eq
 8005ef0:	694b      	ldreq	r3, [r1, #20]
 8005ef2:	600f      	str	r7, [r1, #0]
 8005ef4:	bf18      	it	ne
 8005ef6:	2300      	movne	r3, #0
 8005ef8:	eba6 0807 	sub.w	r8, r6, r7
 8005efc:	608b      	str	r3, [r1, #8]
 8005efe:	f1b8 0f00 	cmp.w	r8, #0
 8005f02:	dd9c      	ble.n	8005e3e <__sflush_r+0x1a>
 8005f04:	4643      	mov	r3, r8
 8005f06:	463a      	mov	r2, r7
 8005f08:	6a21      	ldr	r1, [r4, #32]
 8005f0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	47b0      	blx	r6
 8005f10:	2800      	cmp	r0, #0
 8005f12:	dc06      	bgt.n	8005f22 <__sflush_r+0xfe>
 8005f14:	89a3      	ldrh	r3, [r4, #12]
 8005f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f1a:	81a3      	strh	r3, [r4, #12]
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f20:	e78e      	b.n	8005e40 <__sflush_r+0x1c>
 8005f22:	4407      	add	r7, r0
 8005f24:	eba8 0800 	sub.w	r8, r8, r0
 8005f28:	e7e9      	b.n	8005efe <__sflush_r+0xda>
 8005f2a:	bf00      	nop
 8005f2c:	20400001 	.word	0x20400001

08005f30 <_fflush_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	690b      	ldr	r3, [r1, #16]
 8005f34:	4605      	mov	r5, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	b1db      	cbz	r3, 8005f72 <_fflush_r+0x42>
 8005f3a:	b118      	cbz	r0, 8005f44 <_fflush_r+0x14>
 8005f3c:	6983      	ldr	r3, [r0, #24]
 8005f3e:	b90b      	cbnz	r3, 8005f44 <_fflush_r+0x14>
 8005f40:	f7ff fa8e 	bl	8005460 <__sinit>
 8005f44:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <_fflush_r+0x48>)
 8005f46:	429c      	cmp	r4, r3
 8005f48:	d109      	bne.n	8005f5e <_fflush_r+0x2e>
 8005f4a:	686c      	ldr	r4, [r5, #4]
 8005f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f50:	b17b      	cbz	r3, 8005f72 <_fflush_r+0x42>
 8005f52:	4621      	mov	r1, r4
 8005f54:	4628      	mov	r0, r5
 8005f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f5a:	f7ff bf63 	b.w	8005e24 <__sflush_r>
 8005f5e:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <_fflush_r+0x4c>)
 8005f60:	429c      	cmp	r4, r3
 8005f62:	d101      	bne.n	8005f68 <_fflush_r+0x38>
 8005f64:	68ac      	ldr	r4, [r5, #8]
 8005f66:	e7f1      	b.n	8005f4c <_fflush_r+0x1c>
 8005f68:	4b05      	ldr	r3, [pc, #20]	; (8005f80 <_fflush_r+0x50>)
 8005f6a:	429c      	cmp	r4, r3
 8005f6c:	bf08      	it	eq
 8005f6e:	68ec      	ldreq	r4, [r5, #12]
 8005f70:	e7ec      	b.n	8005f4c <_fflush_r+0x1c>
 8005f72:	2000      	movs	r0, #0
 8005f74:	bd38      	pop	{r3, r4, r5, pc}
 8005f76:	bf00      	nop
 8005f78:	080061f0 	.word	0x080061f0
 8005f7c:	08006210 	.word	0x08006210
 8005f80:	080061d0 	.word	0x080061d0

08005f84 <_lseek_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4c07      	ldr	r4, [pc, #28]	; (8005fa4 <_lseek_r+0x20>)
 8005f88:	4605      	mov	r5, r0
 8005f8a:	4608      	mov	r0, r1
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	2200      	movs	r2, #0
 8005f90:	6022      	str	r2, [r4, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	f7fb f93c 	bl	8001210 <_lseek>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	d102      	bne.n	8005fa2 <_lseek_r+0x1e>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	b103      	cbz	r3, 8005fa2 <_lseek_r+0x1e>
 8005fa0:	602b      	str	r3, [r5, #0]
 8005fa2:	bd38      	pop	{r3, r4, r5, pc}
 8005fa4:	20004dfc 	.word	0x20004dfc

08005fa8 <__swhatbuf_r>:
 8005fa8:	b570      	push	{r4, r5, r6, lr}
 8005faa:	460e      	mov	r6, r1
 8005fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb0:	2900      	cmp	r1, #0
 8005fb2:	b096      	sub	sp, #88	; 0x58
 8005fb4:	4614      	mov	r4, r2
 8005fb6:	461d      	mov	r5, r3
 8005fb8:	da07      	bge.n	8005fca <__swhatbuf_r+0x22>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	602b      	str	r3, [r5, #0]
 8005fbe:	89b3      	ldrh	r3, [r6, #12]
 8005fc0:	061a      	lsls	r2, r3, #24
 8005fc2:	d410      	bmi.n	8005fe6 <__swhatbuf_r+0x3e>
 8005fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fc8:	e00e      	b.n	8005fe8 <__swhatbuf_r+0x40>
 8005fca:	466a      	mov	r2, sp
 8005fcc:	f000 f8b2 	bl	8006134 <_fstat_r>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	dbf2      	blt.n	8005fba <__swhatbuf_r+0x12>
 8005fd4:	9a01      	ldr	r2, [sp, #4]
 8005fd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005fda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005fde:	425a      	negs	r2, r3
 8005fe0:	415a      	adcs	r2, r3
 8005fe2:	602a      	str	r2, [r5, #0]
 8005fe4:	e7ee      	b.n	8005fc4 <__swhatbuf_r+0x1c>
 8005fe6:	2340      	movs	r3, #64	; 0x40
 8005fe8:	2000      	movs	r0, #0
 8005fea:	6023      	str	r3, [r4, #0]
 8005fec:	b016      	add	sp, #88	; 0x58
 8005fee:	bd70      	pop	{r4, r5, r6, pc}

08005ff0 <__smakebuf_r>:
 8005ff0:	898b      	ldrh	r3, [r1, #12]
 8005ff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ff4:	079d      	lsls	r5, r3, #30
 8005ff6:	4606      	mov	r6, r0
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	d507      	bpl.n	800600c <__smakebuf_r+0x1c>
 8005ffc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	6123      	str	r3, [r4, #16]
 8006004:	2301      	movs	r3, #1
 8006006:	6163      	str	r3, [r4, #20]
 8006008:	b002      	add	sp, #8
 800600a:	bd70      	pop	{r4, r5, r6, pc}
 800600c:	ab01      	add	r3, sp, #4
 800600e:	466a      	mov	r2, sp
 8006010:	f7ff ffca 	bl	8005fa8 <__swhatbuf_r>
 8006014:	9900      	ldr	r1, [sp, #0]
 8006016:	4605      	mov	r5, r0
 8006018:	4630      	mov	r0, r6
 800601a:	f7ff faab 	bl	8005574 <_malloc_r>
 800601e:	b948      	cbnz	r0, 8006034 <__smakebuf_r+0x44>
 8006020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006024:	059a      	lsls	r2, r3, #22
 8006026:	d4ef      	bmi.n	8006008 <__smakebuf_r+0x18>
 8006028:	f023 0303 	bic.w	r3, r3, #3
 800602c:	f043 0302 	orr.w	r3, r3, #2
 8006030:	81a3      	strh	r3, [r4, #12]
 8006032:	e7e3      	b.n	8005ffc <__smakebuf_r+0xc>
 8006034:	4b0d      	ldr	r3, [pc, #52]	; (800606c <__smakebuf_r+0x7c>)
 8006036:	62b3      	str	r3, [r6, #40]	; 0x28
 8006038:	89a3      	ldrh	r3, [r4, #12]
 800603a:	6020      	str	r0, [r4, #0]
 800603c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006040:	81a3      	strh	r3, [r4, #12]
 8006042:	9b00      	ldr	r3, [sp, #0]
 8006044:	6163      	str	r3, [r4, #20]
 8006046:	9b01      	ldr	r3, [sp, #4]
 8006048:	6120      	str	r0, [r4, #16]
 800604a:	b15b      	cbz	r3, 8006064 <__smakebuf_r+0x74>
 800604c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006050:	4630      	mov	r0, r6
 8006052:	f000 f881 	bl	8006158 <_isatty_r>
 8006056:	b128      	cbz	r0, 8006064 <__smakebuf_r+0x74>
 8006058:	89a3      	ldrh	r3, [r4, #12]
 800605a:	f023 0303 	bic.w	r3, r3, #3
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	81a3      	strh	r3, [r4, #12]
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	431d      	orrs	r5, r3
 8006068:	81a5      	strh	r5, [r4, #12]
 800606a:	e7cd      	b.n	8006008 <__smakebuf_r+0x18>
 800606c:	08005429 	.word	0x08005429

08006070 <__malloc_lock>:
 8006070:	4770      	bx	lr

08006072 <__malloc_unlock>:
 8006072:	4770      	bx	lr

08006074 <_free_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	4605      	mov	r5, r0
 8006078:	2900      	cmp	r1, #0
 800607a:	d045      	beq.n	8006108 <_free_r+0x94>
 800607c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006080:	1f0c      	subs	r4, r1, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	bfb8      	it	lt
 8006086:	18e4      	addlt	r4, r4, r3
 8006088:	f7ff fff2 	bl	8006070 <__malloc_lock>
 800608c:	4a1f      	ldr	r2, [pc, #124]	; (800610c <_free_r+0x98>)
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	4610      	mov	r0, r2
 8006092:	b933      	cbnz	r3, 80060a2 <_free_r+0x2e>
 8006094:	6063      	str	r3, [r4, #4]
 8006096:	6014      	str	r4, [r2, #0]
 8006098:	4628      	mov	r0, r5
 800609a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800609e:	f7ff bfe8 	b.w	8006072 <__malloc_unlock>
 80060a2:	42a3      	cmp	r3, r4
 80060a4:	d90c      	bls.n	80060c0 <_free_r+0x4c>
 80060a6:	6821      	ldr	r1, [r4, #0]
 80060a8:	1862      	adds	r2, r4, r1
 80060aa:	4293      	cmp	r3, r2
 80060ac:	bf04      	itt	eq
 80060ae:	681a      	ldreq	r2, [r3, #0]
 80060b0:	685b      	ldreq	r3, [r3, #4]
 80060b2:	6063      	str	r3, [r4, #4]
 80060b4:	bf04      	itt	eq
 80060b6:	1852      	addeq	r2, r2, r1
 80060b8:	6022      	streq	r2, [r4, #0]
 80060ba:	6004      	str	r4, [r0, #0]
 80060bc:	e7ec      	b.n	8006098 <_free_r+0x24>
 80060be:	4613      	mov	r3, r2
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	b10a      	cbz	r2, 80060c8 <_free_r+0x54>
 80060c4:	42a2      	cmp	r2, r4
 80060c6:	d9fa      	bls.n	80060be <_free_r+0x4a>
 80060c8:	6819      	ldr	r1, [r3, #0]
 80060ca:	1858      	adds	r0, r3, r1
 80060cc:	42a0      	cmp	r0, r4
 80060ce:	d10b      	bne.n	80060e8 <_free_r+0x74>
 80060d0:	6820      	ldr	r0, [r4, #0]
 80060d2:	4401      	add	r1, r0
 80060d4:	1858      	adds	r0, r3, r1
 80060d6:	4282      	cmp	r2, r0
 80060d8:	6019      	str	r1, [r3, #0]
 80060da:	d1dd      	bne.n	8006098 <_free_r+0x24>
 80060dc:	6810      	ldr	r0, [r2, #0]
 80060de:	6852      	ldr	r2, [r2, #4]
 80060e0:	605a      	str	r2, [r3, #4]
 80060e2:	4401      	add	r1, r0
 80060e4:	6019      	str	r1, [r3, #0]
 80060e6:	e7d7      	b.n	8006098 <_free_r+0x24>
 80060e8:	d902      	bls.n	80060f0 <_free_r+0x7c>
 80060ea:	230c      	movs	r3, #12
 80060ec:	602b      	str	r3, [r5, #0]
 80060ee:	e7d3      	b.n	8006098 <_free_r+0x24>
 80060f0:	6820      	ldr	r0, [r4, #0]
 80060f2:	1821      	adds	r1, r4, r0
 80060f4:	428a      	cmp	r2, r1
 80060f6:	bf04      	itt	eq
 80060f8:	6811      	ldreq	r1, [r2, #0]
 80060fa:	6852      	ldreq	r2, [r2, #4]
 80060fc:	6062      	str	r2, [r4, #4]
 80060fe:	bf04      	itt	eq
 8006100:	1809      	addeq	r1, r1, r0
 8006102:	6021      	streq	r1, [r4, #0]
 8006104:	605c      	str	r4, [r3, #4]
 8006106:	e7c7      	b.n	8006098 <_free_r+0x24>
 8006108:	bd38      	pop	{r3, r4, r5, pc}
 800610a:	bf00      	nop
 800610c:	20000118 	.word	0x20000118

08006110 <_read_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4c07      	ldr	r4, [pc, #28]	; (8006130 <_read_r+0x20>)
 8006114:	4605      	mov	r5, r0
 8006116:	4608      	mov	r0, r1
 8006118:	4611      	mov	r1, r2
 800611a:	2200      	movs	r2, #0
 800611c:	6022      	str	r2, [r4, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	f7fb f816 	bl	8001150 <_read>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_read_r+0x1e>
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	b103      	cbz	r3, 800612e <_read_r+0x1e>
 800612c:	602b      	str	r3, [r5, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	20004dfc 	.word	0x20004dfc

08006134 <_fstat_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4c07      	ldr	r4, [pc, #28]	; (8006154 <_fstat_r+0x20>)
 8006138:	2300      	movs	r3, #0
 800613a:	4605      	mov	r5, r0
 800613c:	4608      	mov	r0, r1
 800613e:	4611      	mov	r1, r2
 8006140:	6023      	str	r3, [r4, #0]
 8006142:	f7fb f84a 	bl	80011da <_fstat>
 8006146:	1c43      	adds	r3, r0, #1
 8006148:	d102      	bne.n	8006150 <_fstat_r+0x1c>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	b103      	cbz	r3, 8006150 <_fstat_r+0x1c>
 800614e:	602b      	str	r3, [r5, #0]
 8006150:	bd38      	pop	{r3, r4, r5, pc}
 8006152:	bf00      	nop
 8006154:	20004dfc 	.word	0x20004dfc

08006158 <_isatty_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4c06      	ldr	r4, [pc, #24]	; (8006174 <_isatty_r+0x1c>)
 800615c:	2300      	movs	r3, #0
 800615e:	4605      	mov	r5, r0
 8006160:	4608      	mov	r0, r1
 8006162:	6023      	str	r3, [r4, #0]
 8006164:	f7fb f849 	bl	80011fa <_isatty>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d102      	bne.n	8006172 <_isatty_r+0x1a>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	b103      	cbz	r3, 8006172 <_isatty_r+0x1a>
 8006170:	602b      	str	r3, [r5, #0]
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	20004dfc 	.word	0x20004dfc

08006178 <_init>:
 8006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617a:	bf00      	nop
 800617c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617e:	bc08      	pop	{r3}
 8006180:	469e      	mov	lr, r3
 8006182:	4770      	bx	lr

08006184 <_fini>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	bf00      	nop
 8006188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618a:	bc08      	pop	{r3}
 800618c:	469e      	mov	lr, r3
 800618e:	4770      	bx	lr
