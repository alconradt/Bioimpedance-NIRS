
BNIRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005c18  08005c18  00015c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cec  08005cec  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  08005cec  08005cec  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005cec  08005cec  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cec  08005cec  00015cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08005cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e8c  200000f0  08005de4  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f7c  08005de4  00020f7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104b1  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000227d  00000000  00000000  000305d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f50  00000000  00000000  00032850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e38  00000000  00000000  000337a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f32d  00000000  00000000  000345d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c5f7  00000000  00000000  00053905  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9ef1  00000000  00000000  0005fefc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00119ded  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004740  00000000  00000000  00119e68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c00 	.word	0x08005c00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	08005c00 	.word	0x08005c00

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fd82 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f8f8 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 faa2 	bl	80007d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000290:	f000 fa6e 	bl	8000770 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000294:	f000 fa3c 	bl	8000710 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000298:	f000 fa04 	bl	80006a4 <MX_TIM6_Init>
  MX_ADC2_Init();
 800029c:	f000 f954 	bl	8000548 <MX_ADC2_Init>
  MX_TIM3_Init();
 80002a0:	f000 f9b2 	bl	8000608 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  Measurement();
 80002a4:	f000 f802 	bl	80002ac <Measurement>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <main+0x28>
	...

080002ac <Measurement>:
  }
  /* USER CODE END 3 */
}

void Measurement(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Init(&htim6);
 80002b0:	482c      	ldr	r0, [pc, #176]	; (8000364 <Measurement+0xb8>)
 80002b2:	f003 fe5d 	bl	8003f70 <HAL_TIM_Base_Init>
	  HAL_TIM_Base_Start(&htim6);
 80002b6:	482b      	ldr	r0, [pc, #172]	; (8000364 <Measurement+0xb8>)
 80002b8:	f003 fe86 	bl	8003fc8 <HAL_TIM_Base_Start>

	  hdma_tim6_up.Instance = DMA1_Channel3;
 80002bc:	4b2a      	ldr	r3, [pc, #168]	; (8000368 <Measurement+0xbc>)
 80002be:	4a2b      	ldr	r2, [pc, #172]	; (800036c <Measurement+0xc0>)
 80002c0:	601a      	str	r2, [r3, #0]
	  hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80002c2:	4b29      	ldr	r3, [pc, #164]	; (8000368 <Measurement+0xbc>)
 80002c4:	2210      	movs	r2, #16
 80002c6:	605a      	str	r2, [r3, #4]
	  hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80002c8:	4b27      	ldr	r3, [pc, #156]	; (8000368 <Measurement+0xbc>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
	  hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 80002ce:	4b26      	ldr	r3, [pc, #152]	; (8000368 <Measurement+0xbc>)
 80002d0:	2280      	movs	r2, #128	; 0x80
 80002d2:	60da      	str	r2, [r3, #12]
	  hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80002d4:	4b24      	ldr	r3, [pc, #144]	; (8000368 <Measurement+0xbc>)
 80002d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002da:	611a      	str	r2, [r3, #16]
	  hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80002dc:	4b22      	ldr	r3, [pc, #136]	; (8000368 <Measurement+0xbc>)
 80002de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80002e2:	615a      	str	r2, [r3, #20]
	  hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 80002e4:	4b20      	ldr	r3, [pc, #128]	; (8000368 <Measurement+0xbc>)
 80002e6:	2220      	movs	r2, #32
 80002e8:	619a      	str	r2, [r3, #24]
	  hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 80002ea:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <Measurement+0xbc>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_tim6_up);
 80002f0:	481d      	ldr	r0, [pc, #116]	; (8000368 <Measurement+0xbc>)
 80002f2:	f001 ff06 	bl	8002102 <HAL_DMA_Init>

	  HAL_DMA_Start(&hdma_tim6_up, (uint32_t)DIBS_sequence, (uint32_t)&GPIOA->BSRR, 32); //initialization of data transfer in the DIBS_sequence buffer to the GPIOA periphery
 80002f6:	491e      	ldr	r1, [pc, #120]	; (8000370 <Measurement+0xc4>)
 80002f8:	2320      	movs	r3, #32
 80002fa:	4a1e      	ldr	r2, [pc, #120]	; (8000374 <Measurement+0xc8>)
 80002fc:	481a      	ldr	r0, [pc, #104]	; (8000368 <Measurement+0xbc>)
 80002fe:	f001 ff47 	bl	8002190 <HAL_DMA_Start>
	  __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8000302:	4b18      	ldr	r3, [pc, #96]	; (8000364 <Measurement+0xb8>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	68da      	ldr	r2, [r3, #12]
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <Measurement+0xb8>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000310:	60da      	str	r2, [r3, #12]

	  HAL_TIM_Base_Start(&htim3);
 8000312:	4819      	ldr	r0, [pc, #100]	; (8000378 <Measurement+0xcc>)
 8000314:	f003 fe58 	bl	8003fc8 <HAL_TIM_Base_Start>

	  hdma_adc2.Instance = DMA2_Channel1;
 8000318:	4b18      	ldr	r3, [pc, #96]	; (800037c <Measurement+0xd0>)
 800031a:	4a19      	ldr	r2, [pc, #100]	; (8000380 <Measurement+0xd4>)
 800031c:	601a      	str	r2, [r3, #0]
	  hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <Measurement+0xd0>)
 8000320:	2200      	movs	r2, #0
 8000322:	605a      	str	r2, [r3, #4]
	  hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <Measurement+0xd0>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
	  hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800032a:	4b14      	ldr	r3, [pc, #80]	; (800037c <Measurement+0xd0>)
 800032c:	2280      	movs	r2, #128	; 0x80
 800032e:	60da      	str	r2, [r3, #12]
	  hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <Measurement+0xd0>)
 8000332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000336:	611a      	str	r2, [r3, #16]
	  hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000338:	4b10      	ldr	r3, [pc, #64]	; (800037c <Measurement+0xd0>)
 800033a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800033e:	615a      	str	r2, [r3, #20]
	  hdma_adc2.Init.Mode = DMA_NORMAL;
 8000340:	4b0e      	ldr	r3, [pc, #56]	; (800037c <Measurement+0xd0>)
 8000342:	2200      	movs	r2, #0
 8000344:	619a      	str	r2, [r3, #24]
	  hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000346:	4b0d      	ldr	r3, [pc, #52]	; (800037c <Measurement+0xd0>)
 8000348:	2200      	movs	r2, #0
 800034a:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_adc2);
 800034c:	480b      	ldr	r0, [pc, #44]	; (800037c <Measurement+0xd0>)
 800034e:	f001 fed8 	bl	8002102 <HAL_DMA_Init>

	  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC_BIA, 800);
 8000352:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000356:	490b      	ldr	r1, [pc, #44]	; (8000384 <Measurement+0xd8>)
 8000358:	480b      	ldr	r0, [pc, #44]	; (8000388 <Measurement+0xdc>)
 800035a:	f000 ff8b 	bl	8001274 <HAL_ADC_Start_DMA>
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	200008b0 	.word	0x200008b0
 8000368:	2000086c 	.word	0x2000086c
 800036c:	40020030 	.word	0x40020030
 8000370:	20000000 	.word	0x20000000
 8000374:	48000018 	.word	0x48000018
 8000378:	200001ec 	.word	0x200001ec
 800037c:	200008f0 	.word	0x200008f0
 8000380:	40020408 	.word	0x40020408
 8000384:	2000022c 	.word	0x2000022c
 8000388:	2000019c 	.word	0x2000019c

0800038c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc2);
 8000394:	4832      	ldr	r0, [pc, #200]	; (8000460 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000396:	f001 f889 	bl	80014ac <HAL_ADC_Stop_DMA>
	HAL_DMA_Abort(&hdma_tim6_up);
 800039a:	4832      	ldr	r0, [pc, #200]	; (8000464 <HAL_ADC_ConvCpltCallback+0xd8>)
 800039c:	f001 ff99 	bl	80022d2 <HAL_DMA_Abort>
	for(int i = 0;i < 800;i++)
 80003a0:	2300      	movs	r3, #0
 80003a2:	617b      	str	r3, [r7, #20]
 80003a4:	e010      	b.n	80003c8 <HAL_ADC_ConvCpltCallback+0x3c>
	{
		DECADA0[i] = DECADA0[i] + ADC_BIA[i];
 80003a6:	4a30      	ldr	r2, [pc, #192]	; (8000468 <HAL_ADC_ConvCpltCallback+0xdc>)
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003ae:	492f      	ldr	r1, [pc, #188]	; (800046c <HAL_ADC_ConvCpltCallback+0xe0>)
 80003b0:	697b      	ldr	r3, [r7, #20]
 80003b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80003b6:	4413      	add	r3, r2
 80003b8:	b299      	uxth	r1, r3
 80003ba:	4a2b      	ldr	r2, [pc, #172]	; (8000468 <HAL_ADC_ConvCpltCallback+0xdc>)
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0;i < 800;i++)
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	3301      	adds	r3, #1
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80003ce:	dbea      	blt.n	80003a6 <HAL_ADC_ConvCpltCallback+0x1a>
		//printf("%i\n",ADC_BIA[i]);
	}
	for(int i = 0;i < 800;i++)
 80003d0:	2300      	movs	r3, #0
 80003d2:	613b      	str	r3, [r7, #16]
 80003d4:	e007      	b.n	80003e6 <HAL_ADC_ConvCpltCallback+0x5a>
	{
		ADC_BIA[i] = 0;
 80003d6:	4a25      	ldr	r2, [pc, #148]	; (800046c <HAL_ADC_ConvCpltCallback+0xe0>)
 80003d8:	693b      	ldr	r3, [r7, #16]
 80003da:	2100      	movs	r1, #0
 80003dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0;i < 800;i++)
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	3301      	adds	r3, #1
 80003e4:	613b      	str	r3, [r7, #16]
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80003ec:	dbf3      	blt.n	80003d6 <HAL_ADC_ConvCpltCallback+0x4a>
	}
	if(Measures < 15)
 80003ee:	4b20      	ldr	r3, [pc, #128]	; (8000470 <HAL_ADC_ConvCpltCallback+0xe4>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2b0e      	cmp	r3, #14
 80003f4:	dc07      	bgt.n	8000406 <HAL_ADC_ConvCpltCallback+0x7a>
	{
		Measures ++;
 80003f6:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <HAL_ADC_ConvCpltCallback+0xe4>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	3301      	adds	r3, #1
 80003fc:	4a1c      	ldr	r2, [pc, #112]	; (8000470 <HAL_ADC_ConvCpltCallback+0xe4>)
 80003fe:	6013      	str	r3, [r2, #0]
		Measurement();
 8000400:	f7ff ff54 	bl	80002ac <Measurement>
		for(int i = 0;i < 800;i++)
		{
			printf("%i\n",DECADA0[i]);
		}
	}
}
 8000404:	e028      	b.n	8000458 <HAL_ADC_ConvCpltCallback+0xcc>
		for(int i = 0;i < 800;i++)
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	e00f      	b.n	800042c <HAL_ADC_ConvCpltCallback+0xa0>
			DECADA0[i] = DECADA0[i]/15;
 800040c:	4a16      	ldr	r2, [pc, #88]	; (8000468 <HAL_ADC_ConvCpltCallback+0xdc>)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000414:	4a17      	ldr	r2, [pc, #92]	; (8000474 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000416:	fba2 2303 	umull	r2, r3, r2, r3
 800041a:	08db      	lsrs	r3, r3, #3
 800041c:	b299      	uxth	r1, r3
 800041e:	4a12      	ldr	r2, [pc, #72]	; (8000468 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0;i < 800;i++)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	3301      	adds	r3, #1
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000432:	dbeb      	blt.n	800040c <HAL_ADC_ConvCpltCallback+0x80>
		for(int i = 0;i < 800;i++)
 8000434:	2300      	movs	r3, #0
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	e00a      	b.n	8000450 <HAL_ADC_ConvCpltCallback+0xc4>
			printf("%i\n",DECADA0[i]);
 800043a:	4a0b      	ldr	r2, [pc, #44]	; (8000468 <HAL_ADC_ConvCpltCallback+0xdc>)
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000442:	4619      	mov	r1, r3
 8000444:	480c      	ldr	r0, [pc, #48]	; (8000478 <HAL_ADC_ConvCpltCallback+0xec>)
 8000446:	f004 fcf7 	bl	8004e38 <iprintf>
		for(int i = 0;i < 800;i++)
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	3301      	adds	r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000456:	dbf0      	blt.n	800043a <HAL_ADC_ConvCpltCallback+0xae>
}
 8000458:	bf00      	nop
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	2000019c 	.word	0x2000019c
 8000464:	2000086c 	.word	0x2000086c
 8000468:	20000934 	.word	0x20000934
 800046c:	2000022c 	.word	0x2000022c
 8000470:	2000010c 	.word	0x2000010c
 8000474:	88888889 	.word	0x88888889
 8000478:	08005c18 	.word	0x08005c18

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b0a6      	sub	sp, #152	; 0x98
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000486:	2228      	movs	r2, #40	; 0x28
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f004 fccc 	bl	8004e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000490:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
 800049e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2258      	movs	r2, #88	; 0x58
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f004 fcbe 	bl	8004e28 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ac:	2302      	movs	r3, #2
 80004ae:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b0:	2301      	movs	r3, #1
 80004b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b4:	2310      	movs	r3, #16
 80004b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ba:	2302      	movs	r3, #2
 80004bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 f9de 	bl	800289c <HAL_RCC_OscConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004e6:	f000 f9f5 	bl	80008d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ea:	230f      	movs	r3, #15
 80004ec:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ee:	2302      	movs	r3, #2
 80004f0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000500:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000504:	2102      	movs	r1, #2
 8000506:	4618      	mov	r0, r3
 8000508:	f003 f8de 	bl	80036c8 <HAL_RCC_ClockConfig>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000512:	f000 f9df 	bl	80008d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC12
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <SystemClock_Config+0xc8>)
 8000518:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800051e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000522:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000524:	2300      	movs	r3, #0
 8000526:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	4618      	mov	r0, r3
 800052c:	f003 fb02 	bl	8003b34 <HAL_RCCEx_PeriphCLKConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000536:	f000 f9cd 	bl	80008d4 <Error_Handler>
  }
}
 800053a:	bf00      	nop
 800053c:	3798      	adds	r7, #152	; 0x98
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	00200084 	.word	0x00200084

08000548 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800054e:	463b      	mov	r3, r7
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
 800055c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800055e:	4b28      	ldr	r3, [pc, #160]	; (8000600 <MX_ADC2_Init+0xb8>)
 8000560:	4a28      	ldr	r2, [pc, #160]	; (8000604 <MX_ADC2_Init+0xbc>)
 8000562:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <MX_ADC2_Init+0xb8>)
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800056a:	4b25      	ldr	r3, [pc, #148]	; (8000600 <MX_ADC2_Init+0xb8>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <MX_ADC2_Init+0xb8>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000576:	4b22      	ldr	r3, [pc, #136]	; (8000600 <MX_ADC2_Init+0xb8>)
 8000578:	2200      	movs	r2, #0
 800057a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <MX_ADC2_Init+0xb8>)
 800057e:	2200      	movs	r2, #0
 8000580:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <MX_ADC2_Init+0xb8>)
 8000586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800058a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800058c:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <MX_ADC2_Init+0xb8>)
 800058e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000592:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000594:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <MX_ADC2_Init+0xb8>)
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <MX_ADC2_Init+0xb8>)
 800059c:	2201      	movs	r2, #1
 800059e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80005a0:	4b17      	ldr	r3, [pc, #92]	; (8000600 <MX_ADC2_Init+0xb8>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_ADC2_Init+0xb8>)
 80005aa:	2204      	movs	r2, #4
 80005ac:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_ADC2_Init+0xb8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_ADC2_Init+0xb8>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005ba:	4811      	ldr	r0, [pc, #68]	; (8000600 <MX_ADC2_Init+0xb8>)
 80005bc:	f000 fc60 	bl	8000e80 <HAL_ADC_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 80005c6:	f000 f985 	bl	80008d4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005ca:	2303      	movs	r3, #3
 80005cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005e2:	463b      	mov	r3, r7
 80005e4:	4619      	mov	r1, r3
 80005e6:	4806      	ldr	r0, [pc, #24]	; (8000600 <MX_ADC2_Init+0xb8>)
 80005e8:	f000 ffbc 	bl	8001564 <HAL_ADC_ConfigChannel>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 80005f2:	f000 f96f 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	3718      	adds	r7, #24
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000019c 	.word	0x2000019c
 8000604:	50000100 	.word	0x50000100

08000608 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000626:	4b1d      	ldr	r3, [pc, #116]	; (800069c <MX_TIM3_Init+0x94>)
 8000628:	4a1d      	ldr	r2, [pc, #116]	; (80006a0 <MX_TIM3_Init+0x98>)
 800062a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 179;
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_TIM3_Init+0x94>)
 800062e:	22b3      	movs	r2, #179	; 0xb3
 8000630:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_TIM3_Init+0x94>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_TIM3_Init+0x94>)
 800063a:	2201      	movs	r2, #1
 800063c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_TIM3_Init+0x94>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_TIM3_Init+0x94>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800064a:	4814      	ldr	r0, [pc, #80]	; (800069c <MX_TIM3_Init+0x94>)
 800064c:	f003 fc90 	bl	8003f70 <HAL_TIM_Base_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000656:	f000 f93d 	bl	80008d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	4619      	mov	r1, r3
 8000666:	480d      	ldr	r0, [pc, #52]	; (800069c <MX_TIM3_Init+0x94>)
 8000668:	f003 fcd8 	bl	800401c <HAL_TIM_ConfigClockSource>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000672:	f000 f92f 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000676:	2320      	movs	r3, #32
 8000678:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4619      	mov	r1, r3
 8000682:	4806      	ldr	r0, [pc, #24]	; (800069c <MX_TIM3_Init+0x94>)
 8000684:	f003 febc 	bl	8004400 <HAL_TIMEx_MasterConfigSynchronization>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800068e:	f000 f921 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	3720      	adds	r7, #32
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200001ec 	.word	0x200001ec
 80006a0:	40000400 	.word	0x40000400

080006a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_TIM6_Init+0x64>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_TIM6_Init+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1799;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_TIM6_Init+0x64>)
 80006bc:	f240 7207 	movw	r2, #1799	; 0x707
 80006c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_TIM6_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_TIM6_Init+0x64>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_TIM6_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <MX_TIM6_Init+0x64>)
 80006d6:	f003 fc4b 	bl	8003f70 <HAL_TIM_Base_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80006e0:	f000 f8f8 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_TIM6_Init+0x64>)
 80006f2:	f003 fe85 	bl	8004400 <HAL_TIMEx_MasterConfigSynchronization>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80006fc:	f000 f8ea 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200008b0 	.word	0x200008b0
 800070c:	40001000 	.word	0x40001000

08000710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_USART3_UART_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_USART3_UART_Init+0x58>)
 800071c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_USART3_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART3_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART3_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000754:	f003 fee0 	bl	8004518 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f8b9 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000011c 	.word	0x2000011c
 800076c:	40004800 	.word	0x40004800

08000770 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000776:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_DMA_Init+0x60>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_DMA_Init+0x60>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_DMA_Init+0x60>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_DMA_Init+0x60>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <MX_DMA_Init+0x60>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <MX_DMA_Init+0x60>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	200d      	movs	r0, #13
 80007ac:	f001 fc73 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007b0:	200d      	movs	r0, #13
 80007b2:	f001 fc8c 	bl	80020ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	2038      	movs	r0, #56	; 0x38
 80007bc:	f001 fc6b 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80007c0:	2038      	movs	r0, #56	; 0x38
 80007c2:	f001 fc84 	bl	80020ce <HAL_NVIC_EnableIRQ>

}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ea:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <MX_GPIO_Init+0xd4>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a2e      	ldr	r2, [pc, #184]	; (80008a8 <MX_GPIO_Init+0xd4>)
 80007f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007f4:	6153      	str	r3, [r2, #20]
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <MX_GPIO_Init+0xd4>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_GPIO_Init+0xd4>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	4a28      	ldr	r2, [pc, #160]	; (80008a8 <MX_GPIO_Init+0xd4>)
 8000808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080c:	6153      	str	r3, [r2, #20]
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_GPIO_Init+0xd4>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_GPIO_Init+0xd4>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	4a22      	ldr	r2, [pc, #136]	; (80008a8 <MX_GPIO_Init+0xd4>)
 8000820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000824:	6153      	str	r3, [r2, #20]
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_GPIO_Init+0xd4>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_GPIO_Init+0xd4>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a1c      	ldr	r2, [pc, #112]	; (80008a8 <MX_GPIO_Init+0xd4>)
 8000838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800083c:	6153      	str	r3, [r2, #20]
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_GPIO_Init+0xd4>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2101      	movs	r1, #1
 800084e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000852:	f002 f80b 	bl	800286c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085c:	4813      	ldr	r0, [pc, #76]	; (80008ac <MX_GPIO_Init+0xd8>)
 800085e:	f002 f805 	bl	800286c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000862:	2301      	movs	r3, #1
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087c:	f001 fe6c 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000880:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_GPIO_Init+0xd8>)
 800089a:	f001 fe5d 	bl	8002558 <HAL_GPIO_Init>

}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000
 80008ac:	48000400 	.word	0x48000400

080008b0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80008b8:	1d39      	adds	r1, r7, #4
 80008ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008be:	2201      	movs	r2, #1
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <__io_putchar+0x20>)
 80008c2:	f003 fe77 	bl	80045b4 <HAL_UART_Transmit>

  return ch;
 80008c6:	687b      	ldr	r3, [r7, #4]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000011c 	.word	0x2000011c

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x44>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_MspInit+0x44>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6193      	str	r3, [r2, #24]
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x44>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x44>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x44>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x44>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a29      	ldr	r2, [pc, #164]	; (80009f0 <HAL_ADC_MspInit+0xc4>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d14c      	bne.n	80009e8 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800094e:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <HAL_ADC_MspInit+0xc8>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a28      	ldr	r2, [pc, #160]	; (80009f4 <HAL_ADC_MspInit+0xc8>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6153      	str	r3, [r2, #20]
 800095a:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <HAL_ADC_MspInit+0xc8>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <HAL_ADC_MspInit+0xc8>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <HAL_ADC_MspInit+0xc8>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <HAL_ADC_MspInit+0xc8>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PA6     ------> ADC2_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800097e:	2340      	movs	r3, #64	; 0x40
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	2303      	movs	r3, #3
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000994:	f001 fde0 	bl	8002558 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_ADC_MspInit+0xcc>)
 800099a:	4a18      	ldr	r2, [pc, #96]	; (80009fc <HAL_ADC_MspInit+0xd0>)
 800099c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <HAL_ADC_MspInit+0xcc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_ADC_MspInit+0xcc>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <HAL_ADC_MspInit+0xcc>)
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_ADC_MspInit+0xcc>)
 80009b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009b6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_ADC_MspInit+0xcc>)
 80009ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009be:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_ADC_MspInit+0xcc>)
 80009c2:	2220      	movs	r2, #32
 80009c4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <HAL_ADC_MspInit+0xcc>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80009cc:	480a      	ldr	r0, [pc, #40]	; (80009f8 <HAL_ADC_MspInit+0xcc>)
 80009ce:	f001 fb98 	bl	8002102 <HAL_DMA_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80009d8:	f7ff ff7c 	bl	80008d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <HAL_ADC_MspInit+0xcc>)
 80009e0:	639a      	str	r2, [r3, #56]	; 0x38
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <HAL_ADC_MspInit+0xcc>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	50000100 	.word	0x50000100
 80009f4:	40021000 	.word	0x40021000
 80009f8:	200008f0 	.word	0x200008f0
 80009fc:	40020408 	.word	0x40020408

08000a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a29      	ldr	r2, [pc, #164]	; (8000ab4 <HAL_TIM_Base_MspInit+0xb4>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d10c      	bne.n	8000a2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <HAL_TIM_Base_MspInit+0xb8>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4a28      	ldr	r2, [pc, #160]	; (8000ab8 <HAL_TIM_Base_MspInit+0xb8>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	61d3      	str	r3, [r2, #28]
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <HAL_TIM_Base_MspInit+0xb8>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000a2a:	e03e      	b.n	8000aaa <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM6)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a22      	ldr	r2, [pc, #136]	; (8000abc <HAL_TIM_Base_MspInit+0xbc>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d139      	bne.n	8000aaa <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <HAL_TIM_Base_MspInit+0xb8>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	4a1f      	ldr	r2, [pc, #124]	; (8000ab8 <HAL_TIM_Base_MspInit+0xb8>)
 8000a3c:	f043 0310 	orr.w	r3, r3, #16
 8000a40:	61d3      	str	r3, [r2, #28]
 8000a42:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <HAL_TIM_Base_MspInit+0xb8>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Channel3;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_TIM_Base_MspInit+0xc0>)
 8000a50:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <HAL_TIM_Base_MspInit+0xc4>)
 8000a52:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <HAL_TIM_Base_MspInit+0xc0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_TIM_Base_MspInit+0xc0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <HAL_TIM_Base_MspInit+0xc0>)
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <HAL_TIM_Base_MspInit+0xc0>)
 8000a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6c:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <HAL_TIM_Base_MspInit+0xc0>)
 8000a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a74:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_TIM_Base_MspInit+0xc0>)
 8000a78:	2220      	movs	r2, #32
 8000a7a:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_TIM_Base_MspInit+0xc0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8000a82:	480f      	ldr	r0, [pc, #60]	; (8000ac0 <HAL_TIM_Base_MspInit+0xc0>)
 8000a84:	f001 fb3d 	bl	8002102 <HAL_DMA_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 8000a8e:	f7ff ff21 	bl	80008d4 <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <HAL_TIM_Base_MspInit+0xc8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a0c      	ldr	r2, [pc, #48]	; (8000ac8 <HAL_TIM_Base_MspInit+0xc8>)
 8000a98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a9c:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_TIM_Base_MspInit+0xc0>)
 8000aa2:	621a      	str	r2, [r3, #32]
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_TIM_Base_MspInit+0xc0>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40000400 	.word	0x40000400
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40001000 	.word	0x40001000
 8000ac0:	2000086c 	.word	0x2000086c
 8000ac4:	40020030 	.word	0x40020030
 8000ac8:	40010000 	.word	0x40010000

08000acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <HAL_UART_MspInit+0x7c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d128      	bne.n	8000b40 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000af8:	61d3      	str	r3, [r2, #28]
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000b0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b10:	6153      	str	r3, [r2, #20]
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b30:	2307      	movs	r3, #7
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <HAL_UART_MspInit+0x84>)
 8000b3c:	f001 fd0c 	bl	8002558 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	; 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40004800 	.word	0x40004800
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	48000c00 	.word	0x48000c00

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba8:	f000 f936 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <DMA1_Channel3_IRQHandler+0x10>)
 8000bb6:	f001 fbc5 	bl	8002344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000086c 	.word	0x2000086c

08000bc4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <DMA2_Channel1_IRQHandler+0x10>)
 8000bca:	f001 fbbb 	bl	8002344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200008f0 	.word	0x200008f0

08000bd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	e00a      	b.n	8000c00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bea:	f3af 8000 	nop.w
 8000bee:	4601      	mov	r1, r0
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	1c5a      	adds	r2, r3, #1
 8000bf4:	60ba      	str	r2, [r7, #8]
 8000bf6:	b2ca      	uxtb	r2, r1
 8000bf8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbf0      	blt.n	8000bea <_read+0x12>
	}

return len;
 8000c08:	687b      	ldr	r3, [r7, #4]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	60f8      	str	r0, [r7, #12]
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	e009      	b.n	8000c38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	60ba      	str	r2, [r7, #8]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fe3f 	bl	80008b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	3301      	adds	r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	dbf1      	blt.n	8000c24 <_write+0x12>
	}
	return len;
 8000c40:	687b      	ldr	r3, [r7, #4]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <_close>:

int _close(int file)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
	return -1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c72:	605a      	str	r2, [r3, #4]
	return 0;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_isatty>:

int _isatty(int file)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
	return 1;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <_sbrk+0x50>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x16>
		heap_end = &end;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <_sbrk+0x50>)
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <_sbrk+0x54>)
 8000cc8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <_sbrk+0x50>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <_sbrk+0x50>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	466a      	mov	r2, sp
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d907      	bls.n	8000cee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000cde:	f004 f879 	bl	8004dd4 <__errno>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	230c      	movs	r3, #12
 8000ce6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cec:	e006      	b.n	8000cfc <_sbrk+0x48>
	}

	heap_end += incr;
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <_sbrk+0x50>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a03      	ldr	r2, [pc, #12]	; (8000d04 <_sbrk+0x50>)
 8000cf8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000110 	.word	0x20000110
 8000d08:	20000f80 	.word	0x20000f80

08000d0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <SystemInit+0x28>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <SystemInit+0x28>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <SystemInit+0x28>)
 8000d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d26:	609a      	str	r2, [r3, #8]
#endif
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d3e:	e003      	b.n	8000d48 <LoopCopyDataInit>

08000d40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d46:	3104      	adds	r1, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d50:	d3f6      	bcc.n	8000d40 <CopyDataInit>
	ldr	r2, =_sbss
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d54:	e002      	b.n	8000d5c <LoopFillZerobss>

08000d56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d58:	f842 3b04 	str.w	r3, [r2], #4

08000d5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <LoopForever+0x16>)
	cmp	r2, r3
 8000d5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d60:	d3f9      	bcc.n	8000d56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d62:	f7ff ffd3 	bl	8000d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f004 f83b 	bl	8004de0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d6a:	f7ff fa89 	bl	8000280 <main>

08000d6e <LoopForever>:

LoopForever:
    b LoopForever
 8000d6e:	e7fe      	b.n	8000d6e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d70:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000d74:	08005cf4 	.word	0x08005cf4
	ldr	r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d7c:	200000f0 	.word	0x200000f0
	ldr	r2, =_sbss
 8000d80:	200000f0 	.word	0x200000f0
	ldr	r3, = _ebss
 8000d84:	20000f7c 	.word	0x20000f7c

08000d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC1_2_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x28>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_Init+0x28>)
 8000d96:	f043 0310 	orr.w	r3, r3, #16
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f001 f96f 	bl	8002080 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 f808 	bl	8000db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f7ff fd9c 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40022000 	.word	0x40022000

08000db8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x54>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x58>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 f987 	bl	80020ea <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00e      	b.n	8000e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d80a      	bhi.n	8000e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df4:	f001 f94f 	bl	8002096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <HAL_InitTick+0x5c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000080 	.word	0x20000080
 8000e10:	20000088 	.word	0x20000088
 8000e14:	20000084 	.word	0x20000084

08000e18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000088 	.word	0x20000088
 8000e3c:	20000f74 	.word	0x20000f74

08000e40 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000f74 	.word	0x20000f74

08000e58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b09a      	sub	sp, #104	; 0x68
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d101      	bne.n	8000ea0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e1e3      	b.n	8001268 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d176      	bne.n	8000fa0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d152      	bne.n	8000f60 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fd29 	bl	800092c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d13b      	bne.n	8000f60 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 feeb 	bl	8001cc4 <ADC_Disable>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f003 0310 	and.w	r3, r3, #16
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d12f      	bne.n	8000f60 <HAL_ADC_Init+0xe0>
 8000f00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d12b      	bne.n	8000f60 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f10:	f023 0302 	bic.w	r3, r3, #2
 8000f14:	f043 0202 	orr.w	r2, r3, #2
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f2a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f3a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f3c:	4b92      	ldr	r3, [pc, #584]	; (8001188 <HAL_ADC_Init+0x308>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a92      	ldr	r2, [pc, #584]	; (800118c <HAL_ADC_Init+0x30c>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	0c9a      	lsrs	r2, r3, #18
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f52:	e002      	b.n	8000f5a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f9      	bne.n	8000f54 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d007      	beq.n	8000f7e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f7c:	d110      	bne.n	8000fa0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f023 0312 	bic.w	r3, r3, #18
 8000f86:	f043 0210 	orr.w	r2, r3, #16
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f043 0201 	orr.w	r2, r3, #1
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f003 0310 	and.w	r3, r3, #16
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f040 8150 	bne.w	800124e <HAL_ADC_Init+0x3ce>
 8000fae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f040 814b 	bne.w	800124e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f040 8143 	bne.w	800124e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000fd0:	f043 0202 	orr.w	r2, r3, #2
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fe0:	d004      	beq.n	8000fec <HAL_ADC_Init+0x16c>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a6a      	ldr	r2, [pc, #424]	; (8001190 <HAL_ADC_Init+0x310>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d101      	bne.n	8000ff0 <HAL_ADC_Init+0x170>
 8000fec:	4b69      	ldr	r3, [pc, #420]	; (8001194 <HAL_ADC_Init+0x314>)
 8000fee:	e000      	b.n	8000ff2 <HAL_ADC_Init+0x172>
 8000ff0:	4b69      	ldr	r3, [pc, #420]	; (8001198 <HAL_ADC_Init+0x318>)
 8000ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ffc:	d102      	bne.n	8001004 <HAL_ADC_Init+0x184>
 8000ffe:	4b64      	ldr	r3, [pc, #400]	; (8001190 <HAL_ADC_Init+0x310>)
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	e01a      	b.n	800103a <HAL_ADC_Init+0x1ba>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a61      	ldr	r2, [pc, #388]	; (8001190 <HAL_ADC_Init+0x310>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d103      	bne.n	8001016 <HAL_ADC_Init+0x196>
 800100e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e011      	b.n	800103a <HAL_ADC_Init+0x1ba>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a60      	ldr	r2, [pc, #384]	; (800119c <HAL_ADC_Init+0x31c>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d102      	bne.n	8001026 <HAL_ADC_Init+0x1a6>
 8001020:	4b5f      	ldr	r3, [pc, #380]	; (80011a0 <HAL_ADC_Init+0x320>)
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	e009      	b.n	800103a <HAL_ADC_Init+0x1ba>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a5d      	ldr	r2, [pc, #372]	; (80011a0 <HAL_ADC_Init+0x320>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d102      	bne.n	8001036 <HAL_ADC_Init+0x1b6>
 8001030:	4b5a      	ldr	r3, [pc, #360]	; (800119c <HAL_ADC_Init+0x31c>)
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e001      	b.n	800103a <HAL_ADC_Init+0x1ba>
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b01      	cmp	r3, #1
 8001046:	d108      	bne.n	800105a <HAL_ADC_Init+0x1da>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b01      	cmp	r3, #1
 8001054:	d101      	bne.n	800105a <HAL_ADC_Init+0x1da>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <HAL_ADC_Init+0x1dc>
 800105a:	2300      	movs	r3, #0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d11c      	bne.n	800109a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001060:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001062:	2b00      	cmp	r3, #0
 8001064:	d010      	beq.n	8001088 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	2b01      	cmp	r3, #1
 8001070:	d107      	bne.n	8001082 <HAL_ADC_Init+0x202>
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b01      	cmp	r3, #1
 800107c:	d101      	bne.n	8001082 <HAL_ADC_Init+0x202>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <HAL_ADC_Init+0x204>
 8001082:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001084:	2b00      	cmp	r3, #0
 8001086:	d108      	bne.n	800109a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	431a      	orrs	r2, r3
 8001096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001098:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7e5b      	ldrb	r3, [r3, #25]
 800109e:	035b      	lsls	r3, r3, #13
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80010a4:	2a01      	cmp	r2, #1
 80010a6:	d002      	beq.n	80010ae <HAL_ADC_Init+0x22e>
 80010a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ac:	e000      	b.n	80010b0 <HAL_ADC_Init+0x230>
 80010ae:	2200      	movs	r2, #0
 80010b0:	431a      	orrs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	4313      	orrs	r3, r2
 80010be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010c0:	4313      	orrs	r3, r2
 80010c2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d11b      	bne.n	8001106 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7e5b      	ldrb	r3, [r3, #25]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010da:	3b01      	subs	r3, #1
 80010dc:	045a      	lsls	r2, r3, #17
 80010de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010e0:	4313      	orrs	r3, r2
 80010e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e6:	663b      	str	r3, [r7, #96]	; 0x60
 80010e8:	e00d      	b.n	8001106 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80010f2:	f043 0220 	orr.w	r2, r3, #32
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f043 0201 	orr.w	r2, r3, #1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110a:	2b01      	cmp	r3, #1
 800110c:	d054      	beq.n	80011b8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a22      	ldr	r2, [pc, #136]	; (800119c <HAL_ADC_Init+0x31c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d004      	beq.n	8001122 <HAL_ADC_Init+0x2a2>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a20      	ldr	r2, [pc, #128]	; (80011a0 <HAL_ADC_Init+0x320>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d140      	bne.n	80011a4 <HAL_ADC_Init+0x324>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001126:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800112a:	d02a      	beq.n	8001182 <HAL_ADC_Init+0x302>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001134:	d022      	beq.n	800117c <HAL_ADC_Init+0x2fc>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800113e:	d01a      	beq.n	8001176 <HAL_ADC_Init+0x2f6>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001148:	d012      	beq.n	8001170 <HAL_ADC_Init+0x2f0>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001152:	d00a      	beq.n	800116a <HAL_ADC_Init+0x2ea>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001158:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 800115c:	d002      	beq.n	8001164 <HAL_ADC_Init+0x2e4>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001162:	e023      	b.n	80011ac <HAL_ADC_Init+0x32c>
 8001164:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001168:	e020      	b.n	80011ac <HAL_ADC_Init+0x32c>
 800116a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800116e:	e01d      	b.n	80011ac <HAL_ADC_Init+0x32c>
 8001170:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001174:	e01a      	b.n	80011ac <HAL_ADC_Init+0x32c>
 8001176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800117a:	e017      	b.n	80011ac <HAL_ADC_Init+0x32c>
 800117c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001180:	e014      	b.n	80011ac <HAL_ADC_Init+0x32c>
 8001182:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001186:	e011      	b.n	80011ac <HAL_ADC_Init+0x32c>
 8001188:	20000080 	.word	0x20000080
 800118c:	431bde83 	.word	0x431bde83
 8001190:	50000100 	.word	0x50000100
 8001194:	50000300 	.word	0x50000300
 8001198:	50000700 	.word	0x50000700
 800119c:	50000400 	.word	0x50000400
 80011a0:	50000500 	.word	0x50000500
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80011b0:	4313      	orrs	r3, r2
 80011b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011b4:	4313      	orrs	r3, r2
 80011b6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d114      	bne.n	80011f0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011d4:	f023 0302 	bic.w	r3, r3, #2
 80011d8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7e1b      	ldrb	r3, [r3, #24]
 80011de:	039a      	lsls	r2, r3, #14
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4313      	orrs	r3, r2
 80011ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011ec:	4313      	orrs	r3, r2
 80011ee:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <HAL_ADC_Init+0x3f0>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001200:	430b      	orrs	r3, r1
 8001202:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d10c      	bne.n	8001226 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f023 010f 	bic.w	r1, r3, #15
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	1e5a      	subs	r2, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	631a      	str	r2, [r3, #48]	; 0x30
 8001224:	e007      	b.n	8001236 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 020f 	bic.w	r2, r2, #15
 8001234:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f023 0303 	bic.w	r3, r3, #3
 8001244:	f043 0201 	orr.w	r2, r3, #1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	641a      	str	r2, [r3, #64]	; 0x40
 800124c:	e00a      	b.n	8001264 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f023 0312 	bic.w	r3, r3, #18
 8001256:	f043 0210 	orr.w	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800125e:	2301      	movs	r3, #1
 8001260:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001264:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001268:	4618      	mov	r0, r3
 800126a:	3768      	adds	r7, #104	; 0x68
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	fff0c007 	.word	0xfff0c007

08001274 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	2b00      	cmp	r3, #0
 8001290:	f040 80f7 	bne.w	8001482 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800129a:	2b01      	cmp	r3, #1
 800129c:	d101      	bne.n	80012a2 <HAL_ADC_Start_DMA+0x2e>
 800129e:	2302      	movs	r3, #2
 80012a0:	e0f2      	b.n	8001488 <HAL_ADC_Start_DMA+0x214>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012b2:	d004      	beq.n	80012be <HAL_ADC_Start_DMA+0x4a>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a75      	ldr	r2, [pc, #468]	; (8001490 <HAL_ADC_Start_DMA+0x21c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d109      	bne.n	80012d2 <HAL_ADC_Start_DMA+0x5e>
 80012be:	4b75      	ldr	r3, [pc, #468]	; (8001494 <HAL_ADC_Start_DMA+0x220>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 031f 	and.w	r3, r3, #31
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bf0c      	ite	eq
 80012ca:	2301      	moveq	r3, #1
 80012cc:	2300      	movne	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	e008      	b.n	80012e4 <HAL_ADC_Start_DMA+0x70>
 80012d2:	4b71      	ldr	r3, [pc, #452]	; (8001498 <HAL_ADC_Start_DMA+0x224>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 031f 	and.w	r3, r3, #31
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bf0c      	ite	eq
 80012de:	2301      	moveq	r3, #1
 80012e0:	2300      	movne	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80c5 	beq.w	8001474 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 fc8c 	bl	8001c08 <ADC_Enable>
 80012f0:	4603      	mov	r3, r0
 80012f2:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 80b7 	bne.w	800146a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001304:	f023 0301 	bic.w	r3, r3, #1
 8001308:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001318:	d004      	beq.n	8001324 <HAL_ADC_Start_DMA+0xb0>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a5c      	ldr	r2, [pc, #368]	; (8001490 <HAL_ADC_Start_DMA+0x21c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d106      	bne.n	8001332 <HAL_ADC_Start_DMA+0xbe>
 8001324:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <HAL_ADC_Start_DMA+0x220>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	2b00      	cmp	r3, #0
 800132e:	d010      	beq.n	8001352 <HAL_ADC_Start_DMA+0xde>
 8001330:	e005      	b.n	800133e <HAL_ADC_Start_DMA+0xca>
 8001332:	4b59      	ldr	r3, [pc, #356]	; (8001498 <HAL_ADC_Start_DMA+0x224>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <HAL_ADC_Start_DMA+0xde>
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001346:	d004      	beq.n	8001352 <HAL_ADC_Start_DMA+0xde>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a53      	ldr	r2, [pc, #332]	; (800149c <HAL_ADC_Start_DMA+0x228>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d115      	bne.n	800137e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d036      	beq.n	80013da <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001374:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800137c:	e02d      	b.n	80013da <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001392:	d004      	beq.n	800139e <HAL_ADC_Start_DMA+0x12a>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a3d      	ldr	r2, [pc, #244]	; (8001490 <HAL_ADC_Start_DMA+0x21c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d10a      	bne.n	80013b4 <HAL_ADC_Start_DMA+0x140>
 800139e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bf14      	ite	ne
 80013ac:	2301      	movne	r3, #1
 80013ae:	2300      	moveq	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	e008      	b.n	80013c6 <HAL_ADC_Start_DMA+0x152>
 80013b4:	4b39      	ldr	r3, [pc, #228]	; (800149c <HAL_ADC_Start_DMA+0x228>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	bf14      	ite	ne
 80013c0:	2301      	movne	r3, #1
 80013c2:	2300      	moveq	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013e6:	d106      	bne.n	80013f6 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ec:	f023 0206 	bic.w	r2, r3, #6
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	645a      	str	r2, [r3, #68]	; 0x44
 80013f4:	e002      	b.n	80013fc <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001408:	4a25      	ldr	r2, [pc, #148]	; (80014a0 <HAL_ADC_Start_DMA+0x22c>)
 800140a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001410:	4a24      	ldr	r2, [pc, #144]	; (80014a4 <HAL_ADC_Start_DMA+0x230>)
 8001412:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001418:	4a23      	ldr	r2, [pc, #140]	; (80014a8 <HAL_ADC_Start_DMA+0x234>)
 800141a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	221c      	movs	r2, #28
 8001422:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0210 	orr.w	r2, r2, #16
 8001432:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 0201 	orr.w	r2, r2, #1
 8001442:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3340      	adds	r3, #64	; 0x40
 800144e:	4619      	mov	r1, r3
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f000 fede 	bl	8002214 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0204 	orr.w	r2, r2, #4
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	e00d      	b.n	8001486 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001472:	e008      	b.n	8001486 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001480:	e001      	b.n	8001486 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001482:	2302      	movs	r3, #2
 8001484:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001486:	7dfb      	ldrb	r3, [r7, #23]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	50000100 	.word	0x50000100
 8001494:	50000300 	.word	0x50000300
 8001498:	50000700 	.word	0x50000700
 800149c:	50000400 	.word	0x50000400
 80014a0:	08001b3d 	.word	0x08001b3d
 80014a4:	08001bb7 	.word	0x08001bb7
 80014a8:	08001bd3 	.word	0x08001bd3

080014ac <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_Stop_DMA+0x1a>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e04a      	b.n	800155c <HAL_ADC_Stop_DMA+0xb0>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80014ce:	216c      	movs	r1, #108	; 0x6c
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 fc57 	bl	8001d84 <ADC_ConversionStop>
 80014d6:	4603      	mov	r3, r0
 80014d8:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d138      	bne.n	8001552 <HAL_ADC_Stop_DMA+0xa6>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 feec 	bl	80022d2 <HAL_DMA_Abort>
 80014fa:	4603      	mov	r3, r0
 80014fc:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d005      	beq.n	8001510 <HAL_ADC_Stop_DMA+0x64>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0210 	bic.w	r2, r2, #16
 800151e:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d105      	bne.n	8001532 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 fbcc 	bl	8001cc4 <ADC_Disable>
 800152c:	4603      	mov	r3, r0
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e002      	b.n	8001538 <HAL_ADC_Stop_DMA+0x8c>
    }
    else
    {
      ADC_Disable(hadc);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 fbc6 	bl	8001cc4 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_ADC_Stop_DMA+0xa6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	f043 0201 	orr.w	r2, r3, #1
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001564:	b480      	push	{r7}
 8001566:	b09b      	sub	sp, #108	; 0x6c
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x22>
 8001582:	2302      	movs	r3, #2
 8001584:	e2cb      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x5ba>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	f040 82af 	bne.w	8001afc <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d81c      	bhi.n	80015e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	461a      	mov	r2, r3
 80015ba:	231f      	movs	r3, #31
 80015bc:	4093      	lsls	r3, r2
 80015be:	43db      	mvns	r3, r3
 80015c0:	4019      	ands	r1, r3
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa00 f203 	lsl.w	r2, r0, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	631a      	str	r2, [r3, #48]	; 0x30
 80015de:	e063      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b09      	cmp	r3, #9
 80015e6:	d81e      	bhi.n	8001626 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	3b1e      	subs	r3, #30
 80015fc:	221f      	movs	r2, #31
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	4019      	ands	r1, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	3b1e      	subs	r3, #30
 8001618:	fa00 f203 	lsl.w	r2, r0, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	635a      	str	r2, [r3, #52]	; 0x34
 8001624:	e040      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b0e      	cmp	r3, #14
 800162c:	d81e      	bhi.n	800166c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	3b3c      	subs	r3, #60	; 0x3c
 8001642:	221f      	movs	r2, #31
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	4019      	ands	r1, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	3b3c      	subs	r3, #60	; 0x3c
 800165e:	fa00 f203 	lsl.w	r2, r0, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	639a      	str	r2, [r3, #56]	; 0x38
 800166a:	e01d      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	3b5a      	subs	r3, #90	; 0x5a
 8001680:	221f      	movs	r2, #31
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	4019      	ands	r1, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	3b5a      	subs	r3, #90	; 0x5a
 800169c:	fa00 f203 	lsl.w	r2, r0, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f040 80e5 	bne.w	8001882 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b09      	cmp	r3, #9
 80016be:	d91c      	bls.n	80016fa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6999      	ldr	r1, [r3, #24]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4613      	mov	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	3b1e      	subs	r3, #30
 80016d2:	2207      	movs	r2, #7
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	4019      	ands	r1, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	6898      	ldr	r0, [r3, #8]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	3b1e      	subs	r3, #30
 80016ec:	fa00 f203 	lsl.w	r2, r0, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	619a      	str	r2, [r3, #24]
 80016f8:	e019      	b.n	800172e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6959      	ldr	r1, [r3, #20]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	2207      	movs	r2, #7
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	4019      	ands	r1, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	6898      	ldr	r0, [r3, #8]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	fa00 f203 	lsl.w	r2, r0, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	08db      	lsrs	r3, r3, #3
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	3b01      	subs	r3, #1
 800174c:	2b03      	cmp	r3, #3
 800174e:	d84f      	bhi.n	80017f0 <HAL_ADC_ConfigChannel+0x28c>
 8001750:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <HAL_ADC_ConfigChannel+0x1f4>)
 8001752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001756:	bf00      	nop
 8001758:	08001769 	.word	0x08001769
 800175c:	0800178b 	.word	0x0800178b
 8001760:	080017ad 	.word	0x080017ad
 8001764:	080017cf 	.word	0x080017cf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800176e:	4b9f      	ldr	r3, [pc, #636]	; (80019ec <HAL_ADC_ConfigChannel+0x488>)
 8001770:	4013      	ands	r3, r2
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	0691      	lsls	r1, r2, #26
 8001778:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800177a:	430a      	orrs	r2, r1
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001786:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001788:	e07e      	b.n	8001888 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001790:	4b96      	ldr	r3, [pc, #600]	; (80019ec <HAL_ADC_ConfigChannel+0x488>)
 8001792:	4013      	ands	r3, r2
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	0691      	lsls	r1, r2, #26
 800179a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800179c:	430a      	orrs	r2, r1
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017a8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017aa:	e06d      	b.n	8001888 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017b2:	4b8e      	ldr	r3, [pc, #568]	; (80019ec <HAL_ADC_ConfigChannel+0x488>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	0691      	lsls	r1, r2, #26
 80017bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017be:	430a      	orrs	r2, r1
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ca:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017cc:	e05c      	b.n	8001888 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017d4:	4b85      	ldr	r3, [pc, #532]	; (80019ec <HAL_ADC_ConfigChannel+0x488>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	0691      	lsls	r1, r2, #26
 80017de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017e0:	430a      	orrs	r2, r1
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ec:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017ee:	e04b      	b.n	8001888 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	069b      	lsls	r3, r3, #26
 8001800:	429a      	cmp	r2, r3
 8001802:	d107      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001812:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800181a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	069b      	lsls	r3, r3, #26
 8001824:	429a      	cmp	r2, r3
 8001826:	d107      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001836:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800183e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	069b      	lsls	r3, r3, #26
 8001848:	429a      	cmp	r2, r3
 800184a:	d107      	bne.n	800185c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800185a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001862:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	069b      	lsls	r3, r3, #26
 800186c:	429a      	cmp	r2, r3
 800186e:	d10a      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800187e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001880:	e001      	b.n	8001886 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001882:	bf00      	nop
 8001884:	e000      	b.n	8001888 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001886:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d108      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x344>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x344>
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <HAL_ADC_ConfigChannel+0x346>
 80018a8:	2300      	movs	r3, #0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f040 8131 	bne.w	8001b12 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d00f      	beq.n	80018d8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2201      	movs	r2, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	400a      	ands	r2, r1
 80018d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80018d6:	e049      	b.n	800196c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2201      	movs	r2, #1
 80018e6:	409a      	lsls	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b09      	cmp	r3, #9
 80018f8:	d91c      	bls.n	8001934 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6999      	ldr	r1, [r3, #24]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	3b1b      	subs	r3, #27
 800190c:	2207      	movs	r2, #7
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	4019      	ands	r1, r3
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	6898      	ldr	r0, [r3, #8]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	3b1b      	subs	r3, #27
 8001926:	fa00 f203 	lsl.w	r2, r0, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	619a      	str	r2, [r3, #24]
 8001932:	e01b      	b.n	800196c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6959      	ldr	r1, [r3, #20]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	2207      	movs	r2, #7
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	4019      	ands	r1, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	6898      	ldr	r0, [r3, #8]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	fa00 f203 	lsl.w	r2, r0, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001974:	d004      	beq.n	8001980 <HAL_ADC_ConfigChannel+0x41c>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a1d      	ldr	r2, [pc, #116]	; (80019f0 <HAL_ADC_ConfigChannel+0x48c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x420>
 8001980:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <HAL_ADC_ConfigChannel+0x490>)
 8001982:	e000      	b.n	8001986 <HAL_ADC_ConfigChannel+0x422>
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_ADC_ConfigChannel+0x494>)
 8001986:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b10      	cmp	r3, #16
 800198e:	d105      	bne.n	800199c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001998:	2b00      	cmp	r3, #0
 800199a:	d015      	beq.n	80019c8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019a0:	2b11      	cmp	r3, #17
 80019a2:	d105      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00b      	beq.n	80019c8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019b4:	2b12      	cmp	r3, #18
 80019b6:	f040 80ac 	bne.w	8001b12 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80019ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 80a5 	bne.w	8001b12 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019d0:	d102      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x474>
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <HAL_ADC_ConfigChannel+0x48c>)
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	e023      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x4bc>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_ADC_ConfigChannel+0x48c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d10c      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x498>
 80019e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e01a      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x4bc>
 80019ea:	bf00      	nop
 80019ec:	83fff000 	.word	0x83fff000
 80019f0:	50000100 	.word	0x50000100
 80019f4:	50000300 	.word	0x50000300
 80019f8:	50000700 	.word	0x50000700
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a4a      	ldr	r2, [pc, #296]	; (8001b2c <HAL_ADC_ConfigChannel+0x5c8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d102      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x4a8>
 8001a06:	4b4a      	ldr	r3, [pc, #296]	; (8001b30 <HAL_ADC_ConfigChannel+0x5cc>)
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	e009      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x4bc>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a47      	ldr	r2, [pc, #284]	; (8001b30 <HAL_ADC_ConfigChannel+0x5cc>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d102      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x4b8>
 8001a16:	4b45      	ldr	r3, [pc, #276]	; (8001b2c <HAL_ADC_ConfigChannel+0x5c8>)
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	e001      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x4bc>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d108      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x4dc>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x4dc>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x4de>
 8001a40:	2300      	movs	r3, #0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d150      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a46:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d010      	beq.n	8001a6e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d107      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x504>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x504>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x506>
 8001a68:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d13c      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b10      	cmp	r3, #16
 8001a74:	d11d      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x54e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a7e:	d118      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a8a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a8c:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <HAL_ADC_ConfigChannel+0x5d0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a29      	ldr	r2, [pc, #164]	; (8001b38 <HAL_ADC_ConfigChannel+0x5d4>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	0c9a      	lsrs	r2, r3, #18
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aa2:	e002      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f9      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ab0:	e02e      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b11      	cmp	r3, #17
 8001ab8:	d10b      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x56e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac2:	d106      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ace:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ad0:	e01e      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b12      	cmp	r3, #18
 8001ad8:	d11a      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ae6:	e013      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f043 0220 	orr.w	r2, r3, #32
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001afa:	e00a      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	f043 0220 	orr.w	r2, r3, #32
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b0e:	e000      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b10:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	376c      	adds	r7, #108	; 0x6c
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	50000400 	.word	0x50000400
 8001b30:	50000500 	.word	0x50000500
 8001b34:	20000080 	.word	0x20000080
 8001b38:	431bde83 	.word	0x431bde83

08001b3c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d126      	bne.n	8001ba4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d115      	bne.n	8001b9c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d111      	bne.n	8001b9c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d105      	bne.n	8001b9c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7fe fbf5 	bl	800038c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ba2:	e004      	b.n	8001bae <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	4798      	blx	r3
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f7ff f947 	bl	8000e58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	f043 0204 	orr.w	r2, r3, #4
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7ff f937 	bl	8000e6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d108      	bne.n	8001c34 <ADC_Enable+0x2c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <ADC_Enable+0x2c>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <ADC_Enable+0x2e>
 8001c34:	2300      	movs	r3, #0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d13c      	bne.n	8001cb4 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <ADC_Enable+0xb8>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00d      	beq.n	8001c64 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f043 0210 	orr.w	r2, r3, #16
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	f043 0201 	orr.w	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e028      	b.n	8001cb6 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001c74:	f7ff f8e4 	bl	8000e40 <HAL_GetTick>
 8001c78:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c7a:	e014      	b.n	8001ca6 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c7c:	f7ff f8e0 	bl	8000e40 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d90d      	bls.n	8001ca6 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f043 0210 	orr.w	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f043 0201 	orr.w	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e007      	b.n	8001cb6 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d1e3      	bne.n	8001c7c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	8000003f 	.word	0x8000003f

08001cc4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d108      	bne.n	8001cf0 <ADC_Disable+0x2c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <ADC_Disable+0x2c>
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <ADC_Disable+0x2e>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d040      	beq.n	8001d78 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 030d 	and.w	r3, r3, #13
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d10f      	bne.n	8001d24 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0202 	orr.w	r2, r2, #2
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2203      	movs	r2, #3
 8001d1a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001d1c:	f7ff f890 	bl	8000e40 <HAL_GetTick>
 8001d20:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d22:	e022      	b.n	8001d6a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f043 0210 	orr.w	r2, r3, #16
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d34:	f043 0201 	orr.w	r2, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e01c      	b.n	8001d7a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d40:	f7ff f87e 	bl	8000e40 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d90d      	bls.n	8001d6a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f043 0210 	orr.w	r2, r3, #16
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f043 0201 	orr.w	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e007      	b.n	8001d7a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d0e3      	beq.n	8001d40 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8093 	beq.w	8001ed0 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001db8:	d12a      	bne.n	8001e10 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d126      	bne.n	8001e10 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d122      	bne.n	8001e10 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001dca:	230c      	movs	r3, #12
 8001dcc:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001dce:	e014      	b.n	8001dfa <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4a42      	ldr	r2, [pc, #264]	; (8001edc <ADC_ConversionStop+0x158>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d90d      	bls.n	8001df4 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	f043 0210 	orr.w	r2, r3, #16
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de8:	f043 0201 	orr.w	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e06e      	b.n	8001ed2 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	3301      	adds	r3, #1
 8001df8:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e04:	2b40      	cmp	r3, #64	; 0x40
 8001e06:	d1e3      	bne.n	8001dd0 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2240      	movs	r2, #64	; 0x40
 8001e0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2b60      	cmp	r3, #96	; 0x60
 8001e14:	d015      	beq.n	8001e42 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d10e      	bne.n	8001e42 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d107      	bne.n	8001e42 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0210 	orr.w	r2, r2, #16
 8001e40:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b0c      	cmp	r3, #12
 8001e46:	d015      	beq.n	8001e74 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d10e      	bne.n	8001e74 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d107      	bne.n	8001e74 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0220 	orr.w	r2, r2, #32
 8001e72:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2b60      	cmp	r3, #96	; 0x60
 8001e78:	d004      	beq.n	8001e84 <ADC_ConversionStop+0x100>
 8001e7a:	2b6c      	cmp	r3, #108	; 0x6c
 8001e7c:	d105      	bne.n	8001e8a <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001e7e:	230c      	movs	r3, #12
 8001e80:	617b      	str	r3, [r7, #20]
        break;
 8001e82:	e005      	b.n	8001e90 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001e84:	2308      	movs	r3, #8
 8001e86:	617b      	str	r3, [r7, #20]
        break;
 8001e88:	e002      	b.n	8001e90 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	617b      	str	r3, [r7, #20]
        break;
 8001e8e:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001e90:	f7fe ffd6 	bl	8000e40 <HAL_GetTick>
 8001e94:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001e96:	e014      	b.n	8001ec2 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001e98:	f7fe ffd2 	bl	8000e40 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b0b      	cmp	r3, #11
 8001ea4:	d90d      	bls.n	8001ec2 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f043 0210 	orr.w	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f043 0201 	orr.w	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e007      	b.n	8001ed2 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e3      	bne.n	8001e98 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	000993ff 	.word	0x000993ff

08001ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001efc:	4013      	ands	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f12:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	60d3      	str	r3, [r2, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <__NVIC_GetPriorityGrouping+0x18>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	f003 0307 	and.w	r3, r3, #7
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	db0b      	blt.n	8001f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	f003 021f 	and.w	r2, r3, #31
 8001f5c:	4907      	ldr	r1, [pc, #28]	; (8001f7c <__NVIC_EnableIRQ+0x38>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	2001      	movs	r0, #1
 8001f66:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000e100 	.word	0xe000e100

08001f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	db0a      	blt.n	8001faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	490c      	ldr	r1, [pc, #48]	; (8001fcc <__NVIC_SetPriority+0x4c>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	0112      	lsls	r2, r2, #4
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa8:	e00a      	b.n	8001fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4908      	ldr	r1, [pc, #32]	; (8001fd0 <__NVIC_SetPriority+0x50>)
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	3b04      	subs	r3, #4
 8001fb8:	0112      	lsls	r2, r2, #4
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	761a      	strb	r2, [r3, #24]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000e100 	.word	0xe000e100
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	; 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f1c3 0307 	rsb	r3, r3, #7
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	bf28      	it	cs
 8001ff2:	2304      	movcs	r3, #4
 8001ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	2b06      	cmp	r3, #6
 8001ffc:	d902      	bls.n	8002004 <NVIC_EncodePriority+0x30>
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3b03      	subs	r3, #3
 8002002:	e000      	b.n	8002006 <NVIC_EncodePriority+0x32>
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43da      	mvns	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	401a      	ands	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800201c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	43d9      	mvns	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	4313      	orrs	r3, r2
         );
}
 800202e:	4618      	mov	r0, r3
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3b01      	subs	r3, #1
 8002048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800204c:	d301      	bcc.n	8002052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800204e:	2301      	movs	r3, #1
 8002050:	e00f      	b.n	8002072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002052:	4a0a      	ldr	r2, [pc, #40]	; (800207c <SysTick_Config+0x40>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205a:	210f      	movs	r1, #15
 800205c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002060:	f7ff ff8e 	bl	8001f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <SysTick_Config+0x40>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206a:	4b04      	ldr	r3, [pc, #16]	; (800207c <SysTick_Config+0x40>)
 800206c:	2207      	movs	r2, #7
 800206e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	e000e010 	.word	0xe000e010

08002080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff29 	bl	8001ee0 <__NVIC_SetPriorityGrouping>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a8:	f7ff ff3e 	bl	8001f28 <__NVIC_GetPriorityGrouping>
 80020ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	6978      	ldr	r0, [r7, #20]
 80020b4:	f7ff ff8e 	bl	8001fd4 <NVIC_EncodePriority>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff5d 	bl	8001f80 <__NVIC_SetPriority>
}
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff31 	bl	8001f44 <__NVIC_EnableIRQ>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ffa2 	bl	800203c <SysTick_Config>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e037      	b.n	8002188 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800212e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002132:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800213c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f9b8 	bl	80024e0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}  
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_DMA_Start+0x20>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e02d      	b.n	800220c <HAL_DMA_Start+0x7c>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d11d      	bne.n	80021fe <HAL_DMA_Start+0x6e>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2202      	movs	r2, #2
 80021c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f94b 	bl	8002482 <DMA_SetConfig>
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;  
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e005      	b.n	800220a <HAL_DMA_Start+0x7a>
  }
  else
  {
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	/* Remain BUSY */
  	status = HAL_BUSY;
 8002206:	2302      	movs	r3, #2
 8002208:	75fb      	strb	r3, [r7, #23]
  }  

  return status; 
 800220a:	7dfb      	ldrb	r3, [r7, #23]
} 
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3020 	ldrb.w	r3, [r3, #32]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_DMA_Start_IT+0x20>
 8002230:	2302      	movs	r3, #2
 8002232:	e04a      	b.n	80022ca <HAL_DMA_Start_IT+0xb6>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002242:	2b01      	cmp	r3, #1
 8002244:	d13a      	bne.n	80022bc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2202      	movs	r2, #2
 800224a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f909 	bl	8002482 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	2b00      	cmp	r3, #0
 8002276:	d008      	beq.n	800228a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 020e 	orr.w	r2, r2, #14
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	e00f      	b.n	80022aa <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 020a 	orr.w	r2, r2, #10
 8002298:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0204 	bic.w	r2, r2, #4
 80022a8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0201 	orr.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	e005      	b.n	80022c8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80022c4:	2302      	movs	r3, #2
 80022c6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80022c8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d008      	beq.n	80022f6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2204      	movs	r2, #4
 80022e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e020      	b.n	8002338 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 020e 	bic.w	r2, r2, #14
 8002304:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	2101      	movs	r1, #1
 8002320:	fa01 f202 	lsl.w	r2, r1, r2
 8002324:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	2204      	movs	r2, #4
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d024      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x72>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d01f      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	2b00      	cmp	r3, #0
 8002382:	d107      	bne.n	8002394 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0204 	bic.w	r2, r2, #4
 8002392:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239c:	2104      	movs	r1, #4
 800239e:	fa01 f202 	lsl.w	r2, r1, r2
 80023a2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d066      	beq.n	800247a <HAL_DMA_IRQHandler+0x136>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80023b4:	e061      	b.n	800247a <HAL_DMA_IRQHandler+0x136>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	2202      	movs	r2, #2
 80023bc:	409a      	lsls	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d028      	beq.n	8002418 <HAL_DMA_IRQHandler+0xd4>
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d023      	beq.n	8002418 <HAL_DMA_IRQHandler+0xd4>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d107      	bne.n	80023ee <HAL_DMA_IRQHandler+0xaa>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 020a 	bic.w	r2, r2, #10
 80023ec:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		//hdma->State = HAL_DMA_STATE_READY;
  	}
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	2102      	movs	r1, #2
 80023f8:	fa01 f202 	lsl.w	r2, r1, r2
 80023fc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	2b00      	cmp	r3, #0
 800240c:	d035      	beq.n	800247a <HAL_DMA_IRQHandler+0x136>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002416:	e030      	b.n	800247a <HAL_DMA_IRQHandler+0x136>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	2208      	movs	r2, #8
 800241e:	409a      	lsls	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d028      	beq.n	800247a <HAL_DMA_IRQHandler+0x136>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d023      	beq.n	800247a <HAL_DMA_IRQHandler+0x136>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 020e 	bic.w	r2, r2, #14
 8002440:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f202 	lsl.w	r2, r1, r2
 8002450:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	2b00      	cmp	r3, #0
 800246e:	d004      	beq.n	800247a <HAL_DMA_IRQHandler+0x136>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	4798      	blx	r3
    }
  }
}  
 8002478:	e7ff      	b.n	800247a <HAL_DMA_IRQHandler+0x136>
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002482:	b480      	push	{r7}
 8002484:	b085      	sub	sp, #20
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002498:	2101      	movs	r1, #1
 800249a:	fa01 f202 	lsl.w	r2, r1, r2
 800249e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d108      	bne.n	80024c2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024c0:	e007      	b.n	80024d2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	60da      	str	r2, [r3, #12]
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b14      	ldr	r3, [pc, #80]	; (8002540 <DMA_CalcBaseAndBitshift+0x60>)
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d80f      	bhi.n	8002514 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <DMA_CalcBaseAndBitshift+0x64>)
 80024fc:	4413      	add	r3, r2
 80024fe:	4a12      	ldr	r2, [pc, #72]	; (8002548 <DMA_CalcBaseAndBitshift+0x68>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	009a      	lsls	r2, r3, #2
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a0f      	ldr	r2, [pc, #60]	; (800254c <DMA_CalcBaseAndBitshift+0x6c>)
 8002510:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002512:	e00e      	b.n	8002532 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <DMA_CalcBaseAndBitshift+0x70>)
 800251c:	4413      	add	r3, r2
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <DMA_CalcBaseAndBitshift+0x68>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	009a      	lsls	r2, r3, #2
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <DMA_CalcBaseAndBitshift+0x74>)
 8002530:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40020407 	.word	0x40020407
 8002544:	bffdfff8 	.word	0xbffdfff8
 8002548:	cccccccd 	.word	0xcccccccd
 800254c:	40020000 	.word	0x40020000
 8002550:	bffdfbf8 	.word	0xbffdfbf8
 8002554:	40020400 	.word	0x40020400

08002558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002566:	e160      	b.n	800282a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2101      	movs	r1, #1
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	fa01 f303 	lsl.w	r3, r1, r3
 8002574:	4013      	ands	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8152 	beq.w	8002824 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x38>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b12      	cmp	r3, #18
 800258e:	d123      	bne.n	80025d8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	08da      	lsrs	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3208      	adds	r2, #8
 8002598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	220f      	movs	r2, #15
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	08da      	lsrs	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3208      	adds	r2, #8
 80025d2:	6939      	ldr	r1, [r7, #16]
 80025d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d00b      	beq.n	800262c <HAL_GPIO_Init+0xd4>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d007      	beq.n	800262c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002620:	2b11      	cmp	r3, #17
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b12      	cmp	r3, #18
 800262a:	d130      	bne.n	800268e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002662:	2201      	movs	r2, #1
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	f003 0201 	and.w	r2, r3, #1
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	2203      	movs	r2, #3
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 80ac 	beq.w	8002824 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026cc:	4b5e      	ldr	r3, [pc, #376]	; (8002848 <HAL_GPIO_Init+0x2f0>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	4a5d      	ldr	r2, [pc, #372]	; (8002848 <HAL_GPIO_Init+0x2f0>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6193      	str	r3, [r2, #24]
 80026d8:	4b5b      	ldr	r3, [pc, #364]	; (8002848 <HAL_GPIO_Init+0x2f0>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026e4:	4a59      	ldr	r2, [pc, #356]	; (800284c <HAL_GPIO_Init+0x2f4>)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	089b      	lsrs	r3, r3, #2
 80026ea:	3302      	adds	r3, #2
 80026ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	220f      	movs	r2, #15
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800270e:	d025      	beq.n	800275c <HAL_GPIO_Init+0x204>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a4f      	ldr	r2, [pc, #316]	; (8002850 <HAL_GPIO_Init+0x2f8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d01f      	beq.n	8002758 <HAL_GPIO_Init+0x200>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a4e      	ldr	r2, [pc, #312]	; (8002854 <HAL_GPIO_Init+0x2fc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d019      	beq.n	8002754 <HAL_GPIO_Init+0x1fc>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a4d      	ldr	r2, [pc, #308]	; (8002858 <HAL_GPIO_Init+0x300>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d013      	beq.n	8002750 <HAL_GPIO_Init+0x1f8>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a4c      	ldr	r2, [pc, #304]	; (800285c <HAL_GPIO_Init+0x304>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00d      	beq.n	800274c <HAL_GPIO_Init+0x1f4>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a4b      	ldr	r2, [pc, #300]	; (8002860 <HAL_GPIO_Init+0x308>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d007      	beq.n	8002748 <HAL_GPIO_Init+0x1f0>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a4a      	ldr	r2, [pc, #296]	; (8002864 <HAL_GPIO_Init+0x30c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d101      	bne.n	8002744 <HAL_GPIO_Init+0x1ec>
 8002740:	2306      	movs	r3, #6
 8002742:	e00c      	b.n	800275e <HAL_GPIO_Init+0x206>
 8002744:	2307      	movs	r3, #7
 8002746:	e00a      	b.n	800275e <HAL_GPIO_Init+0x206>
 8002748:	2305      	movs	r3, #5
 800274a:	e008      	b.n	800275e <HAL_GPIO_Init+0x206>
 800274c:	2304      	movs	r3, #4
 800274e:	e006      	b.n	800275e <HAL_GPIO_Init+0x206>
 8002750:	2303      	movs	r3, #3
 8002752:	e004      	b.n	800275e <HAL_GPIO_Init+0x206>
 8002754:	2302      	movs	r3, #2
 8002756:	e002      	b.n	800275e <HAL_GPIO_Init+0x206>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <HAL_GPIO_Init+0x206>
 800275c:	2300      	movs	r3, #0
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	f002 0203 	and.w	r2, r2, #3
 8002764:	0092      	lsls	r2, r2, #2
 8002766:	4093      	lsls	r3, r2
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800276e:	4937      	ldr	r1, [pc, #220]	; (800284c <HAL_GPIO_Init+0x2f4>)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	3302      	adds	r3, #2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800277c:	4b3a      	ldr	r3, [pc, #232]	; (8002868 <HAL_GPIO_Init+0x310>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027a0:	4a31      	ldr	r2, [pc, #196]	; (8002868 <HAL_GPIO_Init+0x310>)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027a6:	4b30      	ldr	r3, [pc, #192]	; (8002868 <HAL_GPIO_Init+0x310>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027ca:	4a27      	ldr	r2, [pc, #156]	; (8002868 <HAL_GPIO_Init+0x310>)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027d0:	4b25      	ldr	r3, [pc, #148]	; (8002868 <HAL_GPIO_Init+0x310>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	43db      	mvns	r3, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027f4:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <HAL_GPIO_Init+0x310>)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_GPIO_Init+0x310>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	43db      	mvns	r3, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800281e:	4a12      	ldr	r2, [pc, #72]	; (8002868 <HAL_GPIO_Init+0x310>)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	f47f ae97 	bne.w	8002568 <HAL_GPIO_Init+0x10>
  }
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	40010000 	.word	0x40010000
 8002850:	48000400 	.word	0x48000400
 8002854:	48000800 	.word	0x48000800
 8002858:	48000c00 	.word	0x48000c00
 800285c:	48001000 	.word	0x48001000
 8002860:	48001400 	.word	0x48001400
 8002864:	48001800 	.word	0x48001800
 8002868:	40010400 	.word	0x40010400

0800286c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	807b      	strh	r3, [r7, #2]
 8002878:	4613      	mov	r3, r2
 800287a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800287c:	787b      	ldrb	r3, [r7, #1]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002882:	887a      	ldrh	r2, [r7, #2]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002888:	e002      	b.n	8002890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f000 bf01 	b.w	80036b8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8160 	beq.w	8002b86 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028c6:	4bae      	ldr	r3, [pc, #696]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d00c      	beq.n	80028ec <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028d2:	4bab      	ldr	r3, [pc, #684]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d159      	bne.n	8002992 <HAL_RCC_OscConfig+0xf6>
 80028de:	4ba8      	ldr	r3, [pc, #672]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80028e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ea:	d152      	bne.n	8002992 <HAL_RCC_OscConfig+0xf6>
 80028ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002900:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d102      	bne.n	800291e <HAL_RCC_OscConfig+0x82>
 8002918:	4b99      	ldr	r3, [pc, #612]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	e015      	b.n	800294a <HAL_RCC_OscConfig+0xae>
 800291e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002922:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002932:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002936:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800293a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002946:	4b8e      	ldr	r3, [pc, #568]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800294e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002952:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002956:	fa92 f2a2 	rbit	r2, r2
 800295a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800295e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002962:	fab2 f282 	clz	r2, r2
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f042 0220 	orr.w	r2, r2, #32
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	f002 021f 	and.w	r2, r2, #31
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f202 	lsl.w	r2, r1, r2
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8102 	beq.w	8002b84 <HAL_RCC_OscConfig+0x2e8>
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 80fc 	bne.w	8002b84 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	f000 be93 	b.w	80036b8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299c:	d106      	bne.n	80029ac <HAL_RCC_OscConfig+0x110>
 800299e:	4b78      	ldr	r3, [pc, #480]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a77      	ldr	r2, [pc, #476]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e030      	b.n	8002a0e <HAL_RCC_OscConfig+0x172>
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x134>
 80029b6:	4b72      	ldr	r3, [pc, #456]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a71      	ldr	r2, [pc, #452]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 80029bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b6f      	ldr	r3, [pc, #444]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a6e      	ldr	r2, [pc, #440]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 80029c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e01e      	b.n	8002a0e <HAL_RCC_OscConfig+0x172>
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029da:	d10c      	bne.n	80029f6 <HAL_RCC_OscConfig+0x15a>
 80029dc:	4b68      	ldr	r3, [pc, #416]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a67      	ldr	r2, [pc, #412]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 80029e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	4b65      	ldr	r3, [pc, #404]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a64      	ldr	r2, [pc, #400]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 80029ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	e00b      	b.n	8002a0e <HAL_RCC_OscConfig+0x172>
 80029f6:	4b62      	ldr	r3, [pc, #392]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a61      	ldr	r2, [pc, #388]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 80029fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4b5f      	ldr	r3, [pc, #380]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a5e      	ldr	r2, [pc, #376]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 8002a08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d059      	beq.n	8002acc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fe fa12 	bl	8000e40 <HAL_GetTick>
 8002a1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a20:	e00a      	b.n	8002a38 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a22:	f7fe fa0d 	bl	8000e40 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b64      	cmp	r3, #100	; 0x64
 8002a30:	d902      	bls.n	8002a38 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	f000 be40 	b.w	80036b8 <HAL_RCC_OscConfig+0xe1c>
 8002a38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a3c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002a4c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d102      	bne.n	8002a6a <HAL_RCC_OscConfig+0x1ce>
 8002a64:	4b46      	ldr	r3, [pc, #280]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	e015      	b.n	8002a96 <HAL_RCC_OscConfig+0x1fa>
 8002a6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a6e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002a7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a82:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a86:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002a92:	4b3b      	ldr	r3, [pc, #236]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a9a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002a9e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002aa2:	fa92 f2a2 	rbit	r2, r2
 8002aa6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002aaa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002aae:	fab2 f282 	clz	r2, r2
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	f042 0220 	orr.w	r2, r2, #32
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	f002 021f 	and.w	r2, r2, #31
 8002abe:	2101      	movs	r1, #1
 8002ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0ab      	beq.n	8002a22 <HAL_RCC_OscConfig+0x186>
 8002aca:	e05c      	b.n	8002b86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fe f9b8 	bl	8000e40 <HAL_GetTick>
 8002ad0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad6:	f7fe f9b3 	bl	8000e40 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d902      	bls.n	8002aec <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	f000 bde6 	b.w	80036b8 <HAL_RCC_OscConfig+0xe1c>
 8002aec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002af0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002b00:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d102      	bne.n	8002b1e <HAL_RCC_OscConfig+0x282>
 8002b18:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	e015      	b.n	8002b4a <HAL_RCC_OscConfig+0x2ae>
 8002b1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b22:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002b32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b36:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b46:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <HAL_RCC_OscConfig+0x2e4>)
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b4e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002b52:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002b56:	fa92 f2a2 	rbit	r2, r2
 8002b5a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002b5e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002b62:	fab2 f282 	clz	r2, r2
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	f042 0220 	orr.w	r2, r2, #32
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	f002 021f 	and.w	r2, r2, #31
 8002b72:	2101      	movs	r1, #1
 8002b74:	fa01 f202 	lsl.w	r2, r1, r2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1ab      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x23a>
 8002b7e:	e002      	b.n	8002b86 <HAL_RCC_OscConfig+0x2ea>
 8002b80:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b86:	1d3b      	adds	r3, r7, #4
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8170 	beq.w	8002e76 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b96:	4bd0      	ldr	r3, [pc, #832]	; (8002ed8 <HAL_RCC_OscConfig+0x63c>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00c      	beq.n	8002bbc <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ba2:	4bcd      	ldr	r3, [pc, #820]	; (8002ed8 <HAL_RCC_OscConfig+0x63c>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d16d      	bne.n	8002c8a <HAL_RCC_OscConfig+0x3ee>
 8002bae:	4bca      	ldr	r3, [pc, #808]	; (8002ed8 <HAL_RCC_OscConfig+0x63c>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bba:	d166      	bne.n	8002c8a <HAL_RCC_OscConfig+0x3ee>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002bce:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd2:	fab3 f383 	clz	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d102      	bne.n	8002bec <HAL_RCC_OscConfig+0x350>
 8002be6:	4bbc      	ldr	r3, [pc, #752]	; (8002ed8 <HAL_RCC_OscConfig+0x63c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	e013      	b.n	8002c14 <HAL_RCC_OscConfig+0x378>
 8002bec:	2302      	movs	r3, #2
 8002bee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002bfe:	2302      	movs	r3, #2
 8002c00:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c04:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c10:	4bb1      	ldr	r3, [pc, #708]	; (8002ed8 <HAL_RCC_OscConfig+0x63c>)
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	2202      	movs	r2, #2
 8002c16:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002c1a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002c1e:	fa92 f2a2 	rbit	r2, r2
 8002c22:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002c26:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c2a:	fab2 f282 	clz	r2, r2
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	f042 0220 	orr.w	r2, r2, #32
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f002 021f 	and.w	r2, r2, #31
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_RCC_OscConfig+0x3ba>
 8002c46:	1d3b      	adds	r3, r7, #4
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d002      	beq.n	8002c56 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f000 bd31 	b.w	80036b8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c56:	4ba0      	ldr	r3, [pc, #640]	; (8002ed8 <HAL_RCC_OscConfig+0x63c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	21f8      	movs	r1, #248	; 0xf8
 8002c66:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002c6e:	fa91 f1a1 	rbit	r1, r1
 8002c72:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002c76:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002c7a:	fab1 f181 	clz	r1, r1
 8002c7e:	b2c9      	uxtb	r1, r1
 8002c80:	408b      	lsls	r3, r1
 8002c82:	4995      	ldr	r1, [pc, #596]	; (8002ed8 <HAL_RCC_OscConfig+0x63c>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c88:	e0f5      	b.n	8002e76 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8085 	beq.w	8002da0 <HAL_RCC_OscConfig+0x504>
 8002c96:	2301      	movs	r3, #1
 8002c98:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002ca8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cac:	fab3 f383 	clz	r3, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cb6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc2:	f7fe f8bd 	bl	8000e40 <HAL_GetTick>
 8002cc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ccc:	f7fe f8b8 	bl	8000e40 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d902      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	f000 bceb 	b.w	80036b8 <HAL_RCC_OscConfig+0xe1c>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002cf4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d102      	bne.n	8002d12 <HAL_RCC_OscConfig+0x476>
 8002d0c:	4b72      	ldr	r3, [pc, #456]	; (8002ed8 <HAL_RCC_OscConfig+0x63c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	e013      	b.n	8002d3a <HAL_RCC_OscConfig+0x49e>
 8002d12:	2302      	movs	r3, #2
 8002d14:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002d1c:	fa93 f3a3 	rbit	r3, r3
 8002d20:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002d24:	2302      	movs	r3, #2
 8002d26:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d2a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d36:	4b68      	ldr	r3, [pc, #416]	; (8002ed8 <HAL_RCC_OscConfig+0x63c>)
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002d40:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002d44:	fa92 f2a2 	rbit	r2, r2
 8002d48:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002d4c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d50:	fab2 f282 	clz	r2, r2
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	f042 0220 	orr.w	r2, r2, #32
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	f002 021f 	and.w	r2, r2, #31
 8002d60:	2101      	movs	r1, #1
 8002d62:	fa01 f202 	lsl.w	r2, r1, r2
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0af      	beq.n	8002ccc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	4b5a      	ldr	r3, [pc, #360]	; (8002ed8 <HAL_RCC_OscConfig+0x63c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d74:	1d3b      	adds	r3, r7, #4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	21f8      	movs	r1, #248	; 0xf8
 8002d7c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002d84:	fa91 f1a1 	rbit	r1, r1
 8002d88:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002d8c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002d90:	fab1 f181 	clz	r1, r1
 8002d94:	b2c9      	uxtb	r1, r1
 8002d96:	408b      	lsls	r3, r1
 8002d98:	494f      	ldr	r1, [pc, #316]	; (8002ed8 <HAL_RCC_OscConfig+0x63c>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]
 8002d9e:	e06a      	b.n	8002e76 <HAL_RCC_OscConfig+0x5da>
 8002da0:	2301      	movs	r3, #1
 8002da2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002db2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2300      	movs	r3, #0
 8002dca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe f838 	bl	8000e40 <HAL_GetTick>
 8002dd0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd6:	f7fe f833 	bl	8000e40 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d902      	bls.n	8002dec <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	f000 bc66 	b.w	80036b8 <HAL_RCC_OscConfig+0xe1c>
 8002dec:	2302      	movs	r3, #2
 8002dee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002dfe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d102      	bne.n	8002e1c <HAL_RCC_OscConfig+0x580>
 8002e16:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <HAL_RCC_OscConfig+0x63c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	e013      	b.n	8002e44 <HAL_RCC_OscConfig+0x5a8>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002e2e:	2302      	movs	r3, #2
 8002e30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e34:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e40:	4b25      	ldr	r3, [pc, #148]	; (8002ed8 <HAL_RCC_OscConfig+0x63c>)
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	2202      	movs	r2, #2
 8002e46:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002e4a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002e4e:	fa92 f2a2 	rbit	r2, r2
 8002e52:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002e56:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002e5a:	fab2 f282 	clz	r2, r2
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	f042 0220 	orr.w	r2, r2, #32
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	f002 021f 	and.w	r2, r2, #31
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1af      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80da 	beq.w	800303a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d069      	beq.n	8002f64 <HAL_RCC_OscConfig+0x6c8>
 8002e90:	2301      	movs	r3, #1
 8002e92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002ea2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_OscConfig+0x640>)
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eba:	f7fd ffc1 	bl	8000e40 <HAL_GetTick>
 8002ebe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec2:	e00d      	b.n	8002ee0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec4:	f7fd ffbc 	bl	8000e40 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d905      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e3ef      	b.n	80036b8 <HAL_RCC_OscConfig+0xe1c>
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	10908120 	.word	0x10908120
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eea:	fa93 f2a3 	rbit	r2, r3
 8002eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002ef8:	2202      	movs	r2, #2
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	fa93 f2a3 	rbit	r2, r3
 8002f06:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002f10:	2202      	movs	r2, #2
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	fa93 f2a3 	rbit	r2, r3
 8002f1e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f24:	4ba4      	ldr	r3, [pc, #656]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 8002f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f28:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	6019      	str	r1, [r3, #0]
 8002f30:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	fa93 f1a3 	rbit	r1, r3
 8002f3a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002f3e:	6019      	str	r1, [r3, #0]
  return result;
 8002f40:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	2101      	movs	r1, #1
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0b0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x628>
 8002f62:	e06a      	b.n	800303a <HAL_RCC_OscConfig+0x79e>
 8002f64:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	fa93 f2a3 	rbit	r2, r3
 8002f76:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002f7a:	601a      	str	r2, [r3, #0]
  return result;
 8002f7c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002f80:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b8c      	ldr	r3, [pc, #560]	; (80031bc <HAL_RCC_OscConfig+0x920>)
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	461a      	mov	r2, r3
 8002f92:	2300      	movs	r3, #0
 8002f94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fd ff53 	bl	8000e40 <HAL_GetTick>
 8002f9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9e:	e009      	b.n	8002fb4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa0:	f7fd ff4e 	bl	8000e40 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e381      	b.n	80036b8 <HAL_RCC_OscConfig+0xe1c>
 8002fb4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002fb8:	2202      	movs	r2, #2
 8002fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	fa93 f2a3 	rbit	r2, r3
 8002fc6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	fa93 f2a3 	rbit	r2, r3
 8002fde:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002fe8:	2202      	movs	r2, #2
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	fa93 f2a3 	rbit	r2, r3
 8002ff6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002ffa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffc:	4b6e      	ldr	r3, [pc, #440]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 8002ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003000:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003004:	2102      	movs	r1, #2
 8003006:	6019      	str	r1, [r3, #0]
 8003008:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	fa93 f1a3 	rbit	r1, r3
 8003012:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003016:	6019      	str	r1, [r3, #0]
  return result;
 8003018:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	2101      	movs	r1, #1
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1b2      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800303a:	1d3b      	adds	r3, r7, #4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8157 	beq.w	80032f8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003050:	4b59      	ldr	r3, [pc, #356]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d112      	bne.n	8003082 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305c:	4b56      	ldr	r3, [pc, #344]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	4a55      	ldr	r2, [pc, #340]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 8003062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003066:	61d3      	str	r3, [r2, #28]
 8003068:	4b53      	ldr	r3, [pc, #332]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003070:	f107 030c 	add.w	r3, r7, #12
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f107 030c 	add.w	r3, r7, #12
 800307a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800307c:	2301      	movs	r3, #1
 800307e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003082:	4b4f      	ldr	r3, [pc, #316]	; (80031c0 <HAL_RCC_OscConfig+0x924>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d11a      	bne.n	80030c4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308e:	4b4c      	ldr	r3, [pc, #304]	; (80031c0 <HAL_RCC_OscConfig+0x924>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a4b      	ldr	r2, [pc, #300]	; (80031c0 <HAL_RCC_OscConfig+0x924>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003098:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309a:	f7fd fed1 	bl	8000e40 <HAL_GetTick>
 800309e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a2:	e009      	b.n	80030b8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a4:	f7fd fecc 	bl	8000e40 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b64      	cmp	r3, #100	; 0x64
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e2ff      	b.n	80036b8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b8:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <HAL_RCC_OscConfig+0x924>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0ef      	beq.n	80030a4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c4:	1d3b      	adds	r3, r7, #4
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0x840>
 80030ce:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	4a39      	ldr	r2, [pc, #228]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6213      	str	r3, [r2, #32]
 80030da:	e02f      	b.n	800313c <HAL_RCC_OscConfig+0x8a0>
 80030dc:	1d3b      	adds	r3, r7, #4
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x864>
 80030e6:	4b34      	ldr	r3, [pc, #208]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4a33      	ldr	r2, [pc, #204]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	6213      	str	r3, [r2, #32]
 80030f2:	4b31      	ldr	r3, [pc, #196]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	4a30      	ldr	r2, [pc, #192]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 80030f8:	f023 0304 	bic.w	r3, r3, #4
 80030fc:	6213      	str	r3, [r2, #32]
 80030fe:	e01d      	b.n	800313c <HAL_RCC_OscConfig+0x8a0>
 8003100:	1d3b      	adds	r3, r7, #4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b05      	cmp	r3, #5
 8003108:	d10c      	bne.n	8003124 <HAL_RCC_OscConfig+0x888>
 800310a:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4a2a      	ldr	r2, [pc, #168]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 8003110:	f043 0304 	orr.w	r3, r3, #4
 8003114:	6213      	str	r3, [r2, #32]
 8003116:	4b28      	ldr	r3, [pc, #160]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	4a27      	ldr	r2, [pc, #156]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6213      	str	r3, [r2, #32]
 8003122:	e00b      	b.n	800313c <HAL_RCC_OscConfig+0x8a0>
 8003124:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4a23      	ldr	r2, [pc, #140]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 800312a:	f023 0301 	bic.w	r3, r3, #1
 800312e:	6213      	str	r3, [r2, #32]
 8003130:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	4a20      	ldr	r2, [pc, #128]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 8003136:	f023 0304 	bic.w	r3, r3, #4
 800313a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d06a      	beq.n	800321c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003146:	f7fd fe7b 	bl	8000e40 <HAL_GetTick>
 800314a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314e:	e00b      	b.n	8003168 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003150:	f7fd fe76 	bl	8000e40 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e2a7      	b.n	80036b8 <HAL_RCC_OscConfig+0xe1c>
 8003168:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800316c:	2202      	movs	r2, #2
 800316e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	fa93 f2a3 	rbit	r2, r3
 800317a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003184:	2202      	movs	r2, #2
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	fa93 f2a3 	rbit	r2, r3
 8003192:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003196:	601a      	str	r2, [r3, #0]
  return result;
 8003198:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800319c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319e:	fab3 f383 	clz	r3, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f043 0302 	orr.w	r3, r3, #2
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d108      	bne.n	80031c4 <HAL_RCC_OscConfig+0x928>
 80031b2:	4b01      	ldr	r3, [pc, #4]	; (80031b8 <HAL_RCC_OscConfig+0x91c>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	e013      	b.n	80031e0 <HAL_RCC_OscConfig+0x944>
 80031b8:	40021000 	.word	0x40021000
 80031bc:	10908120 	.word	0x10908120
 80031c0:	40007000 	.word	0x40007000
 80031c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80031c8:	2202      	movs	r2, #2
 80031ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	fa93 f2a3 	rbit	r2, r3
 80031d6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	4bc0      	ldr	r3, [pc, #768]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80031e4:	2102      	movs	r1, #2
 80031e6:	6011      	str	r1, [r2, #0]
 80031e8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	fa92 f1a2 	rbit	r1, r2
 80031f2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80031f6:	6011      	str	r1, [r2, #0]
  return result;
 80031f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	fab2 f282 	clz	r2, r2
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	f002 021f 	and.w	r2, r2, #31
 800320e:	2101      	movs	r1, #1
 8003210:	fa01 f202 	lsl.w	r2, r1, r2
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d09a      	beq.n	8003150 <HAL_RCC_OscConfig+0x8b4>
 800321a:	e063      	b.n	80032e4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321c:	f7fd fe10 	bl	8000e40 <HAL_GetTick>
 8003220:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003224:	e00b      	b.n	800323e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fd fe0b 	bl	8000e40 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e23c      	b.n	80036b8 <HAL_RCC_OscConfig+0xe1c>
 800323e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003242:	2202      	movs	r2, #2
 8003244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800325a:	2202      	movs	r2, #2
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f2a3 	rbit	r2, r3
 8003268:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800326c:	601a      	str	r2, [r3, #0]
  return result;
 800326e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003272:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003274:	fab3 f383 	clz	r3, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f043 0302 	orr.w	r3, r3, #2
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d102      	bne.n	800328e <HAL_RCC_OscConfig+0x9f2>
 8003288:	4b95      	ldr	r3, [pc, #596]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	e00d      	b.n	80032aa <HAL_RCC_OscConfig+0xa0e>
 800328e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003292:	2202      	movs	r2, #2
 8003294:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	fa93 f2a3 	rbit	r2, r3
 80032a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	4b8e      	ldr	r3, [pc, #568]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80032ae:	2102      	movs	r1, #2
 80032b0:	6011      	str	r1, [r2, #0]
 80032b2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	fa92 f1a2 	rbit	r1, r2
 80032bc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80032c0:	6011      	str	r1, [r2, #0]
  return result;
 80032c2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	fab2 f282 	clz	r2, r2
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	f002 021f 	and.w	r2, r2, #31
 80032d8:	2101      	movs	r1, #1
 80032da:	fa01 f202 	lsl.w	r2, r1, r2
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1a0      	bne.n	8003226 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032e4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d105      	bne.n	80032f8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ec:	4b7c      	ldr	r3, [pc, #496]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	4a7b      	ldr	r2, [pc, #492]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 80032f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f8:	1d3b      	adds	r3, r7, #4
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 81d9 	beq.w	80036b6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003304:	4b76      	ldr	r3, [pc, #472]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b08      	cmp	r3, #8
 800330e:	f000 81a6 	beq.w	800365e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	2b02      	cmp	r3, #2
 800331a:	f040 811e 	bne.w	800355a <HAL_RCC_OscConfig+0xcbe>
 800331e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003322:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	fa93 f2a3 	rbit	r2, r3
 8003332:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003336:	601a      	str	r2, [r3, #0]
  return result;
 8003338:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800333c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003348:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	461a      	mov	r2, r3
 8003350:	2300      	movs	r3, #0
 8003352:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fd fd74 	bl	8000e40 <HAL_GetTick>
 8003358:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335c:	e009      	b.n	8003372 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335e:	f7fd fd6f 	bl	8000e40 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e1a2      	b.n	80036b8 <HAL_RCC_OscConfig+0xe1c>
 8003372:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003376:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800337a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	fa93 f2a3 	rbit	r2, r3
 8003386:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800338a:	601a      	str	r2, [r3, #0]
  return result;
 800338c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003390:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d102      	bne.n	80033ac <HAL_RCC_OscConfig+0xb10>
 80033a6:	4b4e      	ldr	r3, [pc, #312]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	e01b      	b.n	80033e4 <HAL_RCC_OscConfig+0xb48>
 80033ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80033b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	fa93 f2a3 	rbit	r2, r3
 80033c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80033ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	fa93 f2a3 	rbit	r2, r3
 80033da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	4b3f      	ldr	r3, [pc, #252]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80033e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033ec:	6011      	str	r1, [r2, #0]
 80033ee:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	fa92 f1a2 	rbit	r1, r2
 80033f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80033fc:	6011      	str	r1, [r2, #0]
  return result;
 80033fe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	fab2 f282 	clz	r2, r2
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	f042 0220 	orr.w	r2, r2, #32
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	f002 021f 	and.w	r2, r2, #31
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f202 	lsl.w	r2, r1, r2
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d19e      	bne.n	800335e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003420:	4b2f      	ldr	r3, [pc, #188]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	f023 020f 	bic.w	r2, r3, #15
 8003428:	1d3b      	adds	r3, r7, #4
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	492c      	ldr	r1, [pc, #176]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 8003430:	4313      	orrs	r3, r2
 8003432:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003434:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6a19      	ldr	r1, [r3, #32]
 8003442:	1d3b      	adds	r3, r7, #4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	430b      	orrs	r3, r1
 800344a:	4925      	ldr	r1, [pc, #148]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
 8003450:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003454:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	fa93 f2a3 	rbit	r2, r3
 8003464:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003468:	601a      	str	r2, [r3, #0]
  return result;
 800346a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800346e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003470:	fab3 f383 	clz	r3, r3
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800347a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	461a      	mov	r2, r3
 8003482:	2301      	movs	r3, #1
 8003484:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7fd fcdb 	bl	8000e40 <HAL_GetTick>
 800348a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800348e:	e009      	b.n	80034a4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003490:	f7fd fcd6 	bl	8000e40 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e109      	b.n	80036b8 <HAL_RCC_OscConfig+0xe1c>
 80034a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	fa93 f2a3 	rbit	r2, r3
 80034b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034bc:	601a      	str	r2, [r3, #0]
  return result;
 80034be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c4:	fab3 f383 	clz	r3, r3
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d105      	bne.n	80034e4 <HAL_RCC_OscConfig+0xc48>
 80034d8:	4b01      	ldr	r3, [pc, #4]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	e01e      	b.n	800351c <HAL_RCC_OscConfig+0xc80>
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000
 80034e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	fa93 f2a3 	rbit	r2, r3
 80034f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003502:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	fa93 f2a3 	rbit	r2, r3
 8003512:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	4b6a      	ldr	r3, [pc, #424]	; (80036c4 <HAL_RCC_OscConfig+0xe28>)
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003520:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003524:	6011      	str	r1, [r2, #0]
 8003526:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	fa92 f1a2 	rbit	r1, r2
 8003530:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003534:	6011      	str	r1, [r2, #0]
  return result;
 8003536:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	fab2 f282 	clz	r2, r2
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	f042 0220 	orr.w	r2, r2, #32
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	f002 021f 	and.w	r2, r2, #31
 800354c:	2101      	movs	r1, #1
 800354e:	fa01 f202 	lsl.w	r2, r1, r2
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d09b      	beq.n	8003490 <HAL_RCC_OscConfig+0xbf4>
 8003558:	e0ad      	b.n	80036b6 <HAL_RCC_OscConfig+0xe1a>
 800355a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800355e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	fa93 f2a3 	rbit	r2, r3
 800356e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003572:	601a      	str	r2, [r3, #0]
  return result;
 8003574:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003578:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003584:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	461a      	mov	r2, r3
 800358c:	2300      	movs	r3, #0
 800358e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fd fc56 	bl	8000e40 <HAL_GetTick>
 8003594:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003598:	e009      	b.n	80035ae <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359a:	f7fd fc51 	bl	8000e40 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e084      	b.n	80036b8 <HAL_RCC_OscConfig+0xe1c>
 80035ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	fa93 f2a3 	rbit	r2, r3
 80035c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035c6:	601a      	str	r2, [r3, #0]
  return result;
 80035c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d102      	bne.n	80035e8 <HAL_RCC_OscConfig+0xd4c>
 80035e2:	4b38      	ldr	r3, [pc, #224]	; (80036c4 <HAL_RCC_OscConfig+0xe28>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	e01b      	b.n	8003620 <HAL_RCC_OscConfig+0xd84>
 80035e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	fa93 f2a3 	rbit	r2, r3
 80035fc:	f107 0320 	add.w	r3, r7, #32
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	f107 031c 	add.w	r3, r7, #28
 8003606:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	f107 031c 	add.w	r3, r7, #28
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	fa93 f2a3 	rbit	r2, r3
 8003616:	f107 0318 	add.w	r3, r7, #24
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	4b29      	ldr	r3, [pc, #164]	; (80036c4 <HAL_RCC_OscConfig+0xe28>)
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	f107 0214 	add.w	r2, r7, #20
 8003624:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003628:	6011      	str	r1, [r2, #0]
 800362a:	f107 0214 	add.w	r2, r7, #20
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	fa92 f1a2 	rbit	r1, r2
 8003634:	f107 0210 	add.w	r2, r7, #16
 8003638:	6011      	str	r1, [r2, #0]
  return result;
 800363a:	f107 0210 	add.w	r2, r7, #16
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	fab2 f282 	clz	r2, r2
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	f042 0220 	orr.w	r2, r2, #32
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	f002 021f 	and.w	r2, r2, #31
 8003650:	2101      	movs	r1, #1
 8003652:	fa01 f202 	lsl.w	r2, r1, r2
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d19e      	bne.n	800359a <HAL_RCC_OscConfig+0xcfe>
 800365c:	e02b      	b.n	80036b6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e025      	b.n	80036b8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800366c:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <HAL_RCC_OscConfig+0xe28>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003674:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <HAL_RCC_OscConfig+0xe28>)
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800367c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003680:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003684:	1d3b      	adds	r3, r7, #4
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	429a      	cmp	r2, r3
 800368c:	d111      	bne.n	80036b2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800368e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003692:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800369c:	429a      	cmp	r2, r3
 800369e:	d108      	bne.n	80036b2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80036a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036a4:	f003 020f 	and.w	r2, r3, #15
 80036a8:	1d3b      	adds	r3, r7, #4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d001      	beq.n	80036b6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000

080036c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b09e      	sub	sp, #120	; 0x78
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e162      	b.n	80039a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e0:	4b90      	ldr	r3, [pc, #576]	; (8003924 <HAL_RCC_ClockConfig+0x25c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d910      	bls.n	8003710 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ee:	4b8d      	ldr	r3, [pc, #564]	; (8003924 <HAL_RCC_ClockConfig+0x25c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 0207 	bic.w	r2, r3, #7
 80036f6:	498b      	ldr	r1, [pc, #556]	; (8003924 <HAL_RCC_ClockConfig+0x25c>)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b89      	ldr	r3, [pc, #548]	; (8003924 <HAL_RCC_ClockConfig+0x25c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e14a      	b.n	80039a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b82      	ldr	r3, [pc, #520]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	497f      	ldr	r1, [pc, #508]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80dc 	beq.w	80038f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d13c      	bne.n	80037be <HAL_RCC_ClockConfig+0xf6>
 8003744:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003748:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d102      	bne.n	800376e <HAL_RCC_ClockConfig+0xa6>
 8003768:	4b6f      	ldr	r3, [pc, #444]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	e00f      	b.n	800378e <HAL_RCC_ClockConfig+0xc6>
 800376e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003772:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	667b      	str	r3, [r7, #100]	; 0x64
 800377c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003780:	663b      	str	r3, [r7, #96]	; 0x60
 8003782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003784:	fa93 f3a3 	rbit	r3, r3
 8003788:	65fb      	str	r3, [r7, #92]	; 0x5c
 800378a:	4b67      	ldr	r3, [pc, #412]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003792:	65ba      	str	r2, [r7, #88]	; 0x58
 8003794:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003796:	fa92 f2a2 	rbit	r2, r2
 800379a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800379c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800379e:	fab2 f282 	clz	r2, r2
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	f042 0220 	orr.w	r2, r2, #32
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	f002 021f 	and.w	r2, r2, #31
 80037ae:	2101      	movs	r1, #1
 80037b0:	fa01 f202 	lsl.w	r2, r1, r2
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d17b      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e0f3      	b.n	80039a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d13c      	bne.n	8003840 <HAL_RCC_ClockConfig+0x178>
 80037c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d6:	fab3 f383 	clz	r3, r3
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	095b      	lsrs	r3, r3, #5
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d102      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x128>
 80037ea:	4b4f      	ldr	r3, [pc, #316]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	e00f      	b.n	8003810 <HAL_RCC_ClockConfig+0x148>
 80037f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	647b      	str	r3, [r7, #68]	; 0x44
 80037fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003802:	643b      	str	r3, [r7, #64]	; 0x40
 8003804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800380c:	4b46      	ldr	r3, [pc, #280]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003814:	63ba      	str	r2, [r7, #56]	; 0x38
 8003816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003818:	fa92 f2a2 	rbit	r2, r2
 800381c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800381e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003820:	fab2 f282 	clz	r2, r2
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	f042 0220 	orr.w	r2, r2, #32
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	f002 021f 	and.w	r2, r2, #31
 8003830:	2101      	movs	r1, #1
 8003832:	fa01 f202 	lsl.w	r2, r1, r2
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d13a      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0b2      	b.n	80039a6 <HAL_RCC_ClockConfig+0x2de>
 8003840:	2302      	movs	r3, #2
 8003842:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	fa93 f3a3 	rbit	r3, r3
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b01      	cmp	r3, #1
 8003860:	d102      	bne.n	8003868 <HAL_RCC_ClockConfig+0x1a0>
 8003862:	4b31      	ldr	r3, [pc, #196]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	e00d      	b.n	8003884 <HAL_RCC_ClockConfig+0x1bc>
 8003868:	2302      	movs	r3, #2
 800386a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
 8003874:	2302      	movs	r3, #2
 8003876:	623b      	str	r3, [r7, #32]
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	4b29      	ldr	r3, [pc, #164]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	2202      	movs	r2, #2
 8003886:	61ba      	str	r2, [r7, #24]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	fa92 f2a2 	rbit	r2, r2
 800388e:	617a      	str	r2, [r7, #20]
  return result;
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	fab2 f282 	clz	r2, r2
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	f042 0220 	orr.w	r2, r2, #32
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	f002 021f 	and.w	r2, r2, #31
 80038a2:	2101      	movs	r1, #1
 80038a4:	fa01 f202 	lsl.w	r2, r1, r2
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e079      	b.n	80039a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	491a      	ldr	r1, [pc, #104]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c4:	f7fd fabc 	bl	8000e40 <HAL_GetTick>
 80038c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fd fab8 	bl	8000e40 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e061      	b.n	80039a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 020c 	and.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1eb      	bne.n	80038cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_ClockConfig+0x25c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d214      	bcs.n	800392c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b08      	ldr	r3, [pc, #32]	; (8003924 <HAL_RCC_ClockConfig+0x25c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 0207 	bic.w	r2, r3, #7
 800390a:	4906      	ldr	r1, [pc, #24]	; (8003924 <HAL_RCC_ClockConfig+0x25c>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b04      	ldr	r3, [pc, #16]	; (8003924 <HAL_RCC_ClockConfig+0x25c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d005      	beq.n	800392c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e040      	b.n	80039a6 <HAL_RCC_ClockConfig+0x2de>
 8003924:	40022000 	.word	0x40022000
 8003928:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003938:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <HAL_RCC_ClockConfig+0x2e8>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	491a      	ldr	r1, [pc, #104]	; (80039b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003946:	4313      	orrs	r3, r2
 8003948:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003956:	4b16      	ldr	r3, [pc, #88]	; (80039b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4912      	ldr	r1, [pc, #72]	; (80039b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003966:	4313      	orrs	r3, r2
 8003968:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800396a:	f000 f829 	bl	80039c0 <HAL_RCC_GetSysClockFreq>
 800396e:	4601      	mov	r1, r0
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003978:	22f0      	movs	r2, #240	; 0xf0
 800397a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	fa92 f2a2 	rbit	r2, r2
 8003982:	60fa      	str	r2, [r7, #12]
  return result;
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	fab2 f282 	clz	r2, r2
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	40d3      	lsrs	r3, r2
 800398e:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <HAL_RCC_ClockConfig+0x2ec>)
 8003990:	5cd3      	ldrb	r3, [r2, r3]
 8003992:	fa21 f303 	lsr.w	r3, r1, r3
 8003996:	4a08      	ldr	r2, [pc, #32]	; (80039b8 <HAL_RCC_ClockConfig+0x2f0>)
 8003998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <HAL_RCC_ClockConfig+0x2f4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fa0a 	bl	8000db8 <HAL_InitTick>
  
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3778      	adds	r7, #120	; 0x78
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000
 80039b4:	08005c1c 	.word	0x08005c1c
 80039b8:	20000080 	.word	0x20000080
 80039bc:	20000084 	.word	0x20000084

080039c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b08b      	sub	sp, #44	; 0x2c
 80039c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	2300      	movs	r3, #0
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	2300      	movs	r3, #0
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80039da:	4b2a      	ldr	r3, [pc, #168]	; (8003a84 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d002      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0x30>
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d003      	beq.n	80039f6 <HAL_RCC_GetSysClockFreq+0x36>
 80039ee:	e03f      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039f0:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xc8>)
 80039f2:	623b      	str	r3, [r7, #32]
      break;
 80039f4:	e03f      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80039fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a00:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	fa92 f2a2 	rbit	r2, r2
 8003a08:	607a      	str	r2, [r7, #4]
  return result;
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	fab2 f282 	clz	r2, r2
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	40d3      	lsrs	r3, r2
 8003a14:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a16:	5cd3      	ldrb	r3, [r2, r3]
 8003a18:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a1a:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	220f      	movs	r2, #15
 8003a24:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	fa92 f2a2 	rbit	r2, r2
 8003a2c:	60fa      	str	r2, [r7, #12]
  return result;
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	fab2 f282 	clz	r2, r2
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	40d3      	lsrs	r3, r2
 8003a38:	4a15      	ldr	r2, [pc, #84]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a3a:	5cd3      	ldrb	r3, [r2, r3]
 8003a3c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a48:	4a0f      	ldr	r2, [pc, #60]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
 8003a58:	e007      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a5a:	4a0b      	ldr	r2, [pc, #44]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	fb02 f303 	mul.w	r3, r2, r3
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	623b      	str	r3, [r7, #32]
      break;
 8003a6e:	e002      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a72:	623b      	str	r3, [r7, #32]
      break;
 8003a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a76:	6a3b      	ldr	r3, [r7, #32]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	372c      	adds	r7, #44	; 0x2c
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	40021000 	.word	0x40021000
 8003a88:	007a1200 	.word	0x007a1200
 8003a8c:	08005c34 	.word	0x08005c34
 8003a90:	08005c44 	.word	0x08005c44

08003a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20000080 	.word	0x20000080

08003aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ab2:	f7ff ffef 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8003ab6:	4601      	mov	r1, r0
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ac0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ac4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	fa92 f2a2 	rbit	r2, r2
 8003acc:	603a      	str	r2, [r7, #0]
  return result;
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	fab2 f282 	clz	r2, r2
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	40d3      	lsrs	r3, r2
 8003ad8:	4a04      	ldr	r2, [pc, #16]	; (8003aec <HAL_RCC_GetPCLK1Freq+0x40>)
 8003ada:	5cd3      	ldrb	r3, [r2, r3]
 8003adc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	08005c2c 	.word	0x08005c2c

08003af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003af6:	f7ff ffcd 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8003afa:	4601      	mov	r1, r0
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b04:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	fa92 f2a2 	rbit	r2, r2
 8003b10:	603a      	str	r2, [r7, #0]
  return result;
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	fab2 f282 	clz	r2, r2
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	40d3      	lsrs	r3, r2
 8003b1c:	4a04      	ldr	r2, [pc, #16]	; (8003b30 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b1e:	5cd3      	ldrb	r3, [r2, r3]
 8003b20:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	08005c2c 	.word	0x08005c2c

08003b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b092      	sub	sp, #72	; 0x48
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80d7 	beq.w	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b58:	4b4e      	ldr	r3, [pc, #312]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10e      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b64:	4b4b      	ldr	r3, [pc, #300]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	4a4a      	ldr	r2, [pc, #296]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	61d3      	str	r3, [r2, #28]
 8003b70:	4b48      	ldr	r3, [pc, #288]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b82:	4b45      	ldr	r3, [pc, #276]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d118      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8e:	4b42      	ldr	r3, [pc, #264]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a41      	ldr	r2, [pc, #260]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9a:	f7fd f951 	bl	8000e40 <HAL_GetTick>
 8003b9e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba2:	f7fd f94d 	bl	8000e40 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b64      	cmp	r3, #100	; 0x64
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e1d6      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	4b38      	ldr	r3, [pc, #224]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bc0:	4b34      	ldr	r3, [pc, #208]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8084 	beq.w	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d07c      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003be0:	4b2c      	ldr	r3, [pc, #176]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bfa:	fab3 f383 	clz	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	461a      	mov	r2, r3
 8003c02:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c16:	fa93 f3a3 	rbit	r3, r3
 8003c1a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c1e:	fab3 f383 	clz	r3, r3
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	2300      	movs	r3, #0
 8003c30:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c32:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c36:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d04b      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c42:	f7fd f8fd 	bl	8000e40 <HAL_GetTick>
 8003c46:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c48:	e00a      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7fd f8f9 	bl	8000e40 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e180      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003c60:	2302      	movs	r3, #2
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c66:	fa93 f3a3 	rbit	r3, r3
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	623b      	str	r3, [r7, #32]
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	61fb      	str	r3, [r7, #28]
  return result;
 8003c78:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f043 0302 	orr.w	r3, r3, #2
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d108      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c8e:	4b01      	ldr	r3, [pc, #4]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	e00d      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	10908100 	.word	0x10908100
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	fa93 f3a3 	rbit	r3, r3
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	4ba0      	ldr	r3, [pc, #640]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	613a      	str	r2, [r7, #16]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	fa92 f2a2 	rbit	r2, r2
 8003cba:	60fa      	str	r2, [r7, #12]
  return result;
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	fab2 f282 	clz	r2, r2
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	f002 021f 	and.w	r2, r2, #31
 8003cce:	2101      	movs	r1, #1
 8003cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0b7      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003cda:	4b95      	ldr	r3, [pc, #596]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	4992      	ldr	r1, [pc, #584]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d105      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf4:	4b8e      	ldr	r3, [pc, #568]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	4a8d      	ldr	r2, [pc, #564]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d0c:	4b88      	ldr	r3, [pc, #544]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	f023 0203 	bic.w	r2, r3, #3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	4985      	ldr	r1, [pc, #532]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d2a:	4b81      	ldr	r3, [pc, #516]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	497e      	ldr	r1, [pc, #504]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d48:	4b79      	ldr	r3, [pc, #484]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	4976      	ldr	r1, [pc, #472]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d66:	4b72      	ldr	r3, [pc, #456]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f023 0210 	bic.w	r2, r3, #16
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	496f      	ldr	r1, [pc, #444]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d84:	4b6a      	ldr	r3, [pc, #424]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	4967      	ldr	r1, [pc, #412]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003da2:	4b63      	ldr	r3, [pc, #396]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f023 0220 	bic.w	r2, r3, #32
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	4960      	ldr	r1, [pc, #384]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dc0:	4b5b      	ldr	r3, [pc, #364]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	4958      	ldr	r1, [pc, #352]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dde:	4b54      	ldr	r3, [pc, #336]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	4951      	ldr	r1, [pc, #324]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dfc:	4b4c      	ldr	r3, [pc, #304]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	4949      	ldr	r1, [pc, #292]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d008      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e1a:	4b45      	ldr	r3, [pc, #276]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	4942      	ldr	r1, [pc, #264]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e38:	4b3d      	ldr	r3, [pc, #244]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	493a      	ldr	r1, [pc, #232]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d008      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003e56:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	4933      	ldr	r1, [pc, #204]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e74:	4b2e      	ldr	r3, [pc, #184]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	492b      	ldr	r1, [pc, #172]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d008      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003e92:	4b27      	ldr	r3, [pc, #156]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	4924      	ldr	r1, [pc, #144]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003eb0:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	491c      	ldr	r1, [pc, #112]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003ece:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	4915      	ldr	r1, [pc, #84]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003eec:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	490d      	ldr	r1, [pc, #52]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d008      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f16:	4906      	ldr	r1, [pc, #24]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00c      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003f28:	4b01      	ldr	r3, [pc, #4]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	e002      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3c:	490b      	ldr	r1, [pc, #44]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003f4e:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5a:	4904      	ldr	r1, [pc, #16]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3748      	adds	r7, #72	; 0x48
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000

08003f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e01d      	b.n	8003fbe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fc fd32 	bl	8000a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f000 f8ee 	bl	8004190 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	4b0e      	ldr	r3, [pc, #56]	; (8004018 <HAL_TIM_Base_Start+0x50>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b06      	cmp	r3, #6
 8003fe8:	d00b      	beq.n	8004002 <HAL_TIM_Base_Start+0x3a>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff0:	d007      	beq.n	8004002 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0201 	orr.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	00010007 	.word	0x00010007

0800401c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_TIM_ConfigClockSource+0x18>
 8004030:	2302      	movs	r3, #2
 8004032:	e0a8      	b.n	8004186 <HAL_TIM_ConfigClockSource+0x16a>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004052:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004056:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800405e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d067      	beq.n	8004140 <HAL_TIM_ConfigClockSource+0x124>
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d80b      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x70>
 8004074:	2b10      	cmp	r3, #16
 8004076:	d073      	beq.n	8004160 <HAL_TIM_ConfigClockSource+0x144>
 8004078:	2b10      	cmp	r3, #16
 800407a:	d802      	bhi.n	8004082 <HAL_TIM_ConfigClockSource+0x66>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d06f      	beq.n	8004160 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004080:	e078      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004082:	2b20      	cmp	r3, #32
 8004084:	d06c      	beq.n	8004160 <HAL_TIM_ConfigClockSource+0x144>
 8004086:	2b30      	cmp	r3, #48	; 0x30
 8004088:	d06a      	beq.n	8004160 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800408a:	e073      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800408c:	2b70      	cmp	r3, #112	; 0x70
 800408e:	d00d      	beq.n	80040ac <HAL_TIM_ConfigClockSource+0x90>
 8004090:	2b70      	cmp	r3, #112	; 0x70
 8004092:	d804      	bhi.n	800409e <HAL_TIM_ConfigClockSource+0x82>
 8004094:	2b50      	cmp	r3, #80	; 0x50
 8004096:	d033      	beq.n	8004100 <HAL_TIM_ConfigClockSource+0xe4>
 8004098:	2b60      	cmp	r3, #96	; 0x60
 800409a:	d041      	beq.n	8004120 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800409c:	e06a      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800409e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a2:	d066      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0x156>
 80040a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a8:	d017      	beq.n	80040da <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80040aa:	e063      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	6899      	ldr	r1, [r3, #8]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f000 f980 	bl	80043c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	609a      	str	r2, [r3, #8]
      break;
 80040d8:	e04c      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6899      	ldr	r1, [r3, #8]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f000 f969 	bl	80043c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040fc:	609a      	str	r2, [r3, #8]
      break;
 80040fe:	e039      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	461a      	mov	r2, r3
 800410e:	f000 f8dd 	bl	80042cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2150      	movs	r1, #80	; 0x50
 8004118:	4618      	mov	r0, r3
 800411a:	f000 f936 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 800411e:	e029      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6859      	ldr	r1, [r3, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	461a      	mov	r2, r3
 800412e:	f000 f8fc 	bl	800432a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2160      	movs	r1, #96	; 0x60
 8004138:	4618      	mov	r0, r3
 800413a:	f000 f926 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 800413e:	e019      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6818      	ldr	r0, [r3, #0]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	6859      	ldr	r1, [r3, #4]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	461a      	mov	r2, r3
 800414e:	f000 f8bd 	bl	80042cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2140      	movs	r1, #64	; 0x40
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f916 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 800415e:	e009      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f000 f90d 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8004170:	e000      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a42      	ldr	r2, [pc, #264]	; (80042ac <TIM_Base_SetConfig+0x11c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d013      	beq.n	80041d0 <TIM_Base_SetConfig+0x40>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ae:	d00f      	beq.n	80041d0 <TIM_Base_SetConfig+0x40>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a3f      	ldr	r2, [pc, #252]	; (80042b0 <TIM_Base_SetConfig+0x120>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00b      	beq.n	80041d0 <TIM_Base_SetConfig+0x40>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a3e      	ldr	r2, [pc, #248]	; (80042b4 <TIM_Base_SetConfig+0x124>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d007      	beq.n	80041d0 <TIM_Base_SetConfig+0x40>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a3d      	ldr	r2, [pc, #244]	; (80042b8 <TIM_Base_SetConfig+0x128>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <TIM_Base_SetConfig+0x40>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a3c      	ldr	r2, [pc, #240]	; (80042bc <TIM_Base_SetConfig+0x12c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d108      	bne.n	80041e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a31      	ldr	r2, [pc, #196]	; (80042ac <TIM_Base_SetConfig+0x11c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01f      	beq.n	800422a <TIM_Base_SetConfig+0x9a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f0:	d01b      	beq.n	800422a <TIM_Base_SetConfig+0x9a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a2e      	ldr	r2, [pc, #184]	; (80042b0 <TIM_Base_SetConfig+0x120>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d017      	beq.n	800422a <TIM_Base_SetConfig+0x9a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a2d      	ldr	r2, [pc, #180]	; (80042b4 <TIM_Base_SetConfig+0x124>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d013      	beq.n	800422a <TIM_Base_SetConfig+0x9a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a2c      	ldr	r2, [pc, #176]	; (80042b8 <TIM_Base_SetConfig+0x128>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00f      	beq.n	800422a <TIM_Base_SetConfig+0x9a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a2c      	ldr	r2, [pc, #176]	; (80042c0 <TIM_Base_SetConfig+0x130>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00b      	beq.n	800422a <TIM_Base_SetConfig+0x9a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2b      	ldr	r2, [pc, #172]	; (80042c4 <TIM_Base_SetConfig+0x134>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d007      	beq.n	800422a <TIM_Base_SetConfig+0x9a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a2a      	ldr	r2, [pc, #168]	; (80042c8 <TIM_Base_SetConfig+0x138>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d003      	beq.n	800422a <TIM_Base_SetConfig+0x9a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a25      	ldr	r2, [pc, #148]	; (80042bc <TIM_Base_SetConfig+0x12c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d108      	bne.n	800423c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a12      	ldr	r2, [pc, #72]	; (80042ac <TIM_Base_SetConfig+0x11c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <TIM_Base_SetConfig+0x100>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a13      	ldr	r2, [pc, #76]	; (80042b8 <TIM_Base_SetConfig+0x128>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00f      	beq.n	8004290 <TIM_Base_SetConfig+0x100>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a13      	ldr	r2, [pc, #76]	; (80042c0 <TIM_Base_SetConfig+0x130>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00b      	beq.n	8004290 <TIM_Base_SetConfig+0x100>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <TIM_Base_SetConfig+0x134>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <TIM_Base_SetConfig+0x100>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a11      	ldr	r2, [pc, #68]	; (80042c8 <TIM_Base_SetConfig+0x138>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_Base_SetConfig+0x100>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a0c      	ldr	r2, [pc, #48]	; (80042bc <TIM_Base_SetConfig+0x12c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d103      	bne.n	8004298 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	615a      	str	r2, [r3, #20]
}
 800429e:	bf00      	nop
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40012c00 	.word	0x40012c00
 80042b0:	40000400 	.word	0x40000400
 80042b4:	40000800 	.word	0x40000800
 80042b8:	40013400 	.word	0x40013400
 80042bc:	40015000 	.word	0x40015000
 80042c0:	40014000 	.word	0x40014000
 80042c4:	40014400 	.word	0x40014400
 80042c8:	40014800 	.word	0x40014800

080042cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f023 0201 	bic.w	r2, r3, #1
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f023 030a 	bic.w	r3, r3, #10
 8004308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800432a:	b480      	push	{r7}
 800432c:	b087      	sub	sp, #28
 800432e:	af00      	add	r7, sp, #0
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f023 0210 	bic.w	r2, r3, #16
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004354:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	031b      	lsls	r3, r3, #12
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004366:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800438a:	b480      	push	{r7}
 800438c:	b085      	sub	sp, #20
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f043 0307 	orr.w	r3, r3, #7
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	609a      	str	r2, [r3, #8]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	021a      	lsls	r2, r3, #8
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004414:	2302      	movs	r3, #2
 8004416:	e06d      	b.n	80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a30      	ldr	r2, [pc, #192]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d009      	beq.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a2f      	ldr	r2, [pc, #188]	; (8004504 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d004      	beq.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2d      	ldr	r2, [pc, #180]	; (8004508 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d108      	bne.n	8004468 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800445c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a1e      	ldr	r2, [pc, #120]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d01d      	beq.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004494:	d018      	beq.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1c      	ldr	r2, [pc, #112]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d013      	beq.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1a      	ldr	r2, [pc, #104]	; (8004510 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00e      	beq.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a15      	ldr	r2, [pc, #84]	; (8004504 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d009      	beq.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a16      	ldr	r2, [pc, #88]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a11      	ldr	r2, [pc, #68]	; (8004508 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d10c      	bne.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	40012c00 	.word	0x40012c00
 8004504:	40013400 	.word	0x40013400
 8004508:	40015000 	.word	0x40015000
 800450c:	40000400 	.word	0x40000400
 8004510:	40000800 	.word	0x40000800
 8004514:	40014000 	.word	0x40014000

08004518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e040      	b.n	80045ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fc fac6 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2224      	movs	r2, #36	; 0x24
 8004544:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0201 	bic.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8c0 	bl	80046dc <UART_SetConfig>
 800455c:	4603      	mov	r3, r0
 800455e:	2b01      	cmp	r3, #1
 8004560:	d101      	bne.n	8004566 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e022      	b.n	80045ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 face 	bl	8004b10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004592:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fb55 	bl	8004c54 <UART_CheckIdleState>
 80045aa:	4603      	mov	r3, r0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08a      	sub	sp, #40	; 0x28
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	4613      	mov	r3, r2
 80045c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	f040 8081 	bne.w	80046d0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_UART_Transmit+0x26>
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e079      	b.n	80046d2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_UART_Transmit+0x38>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e072      	b.n	80046d2 <HAL_UART_Transmit+0x11e>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2221      	movs	r2, #33	; 0x21
 80045fe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004600:	f7fc fc1e 	bl	8000e40 <HAL_GetTick>
 8004604:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	88fa      	ldrh	r2, [r7, #6]
 800460a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	88fa      	ldrh	r2, [r7, #6]
 8004612:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461e:	d108      	bne.n	8004632 <HAL_UART_Transmit+0x7e>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d104      	bne.n	8004632 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004628:	2300      	movs	r3, #0
 800462a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	e003      	b.n	800463a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800463a:	e02d      	b.n	8004698 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2200      	movs	r2, #0
 8004644:	2180      	movs	r1, #128	; 0x80
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 fb49 	bl	8004cde <UART_WaitOnFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e03d      	b.n	80046d2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10b      	bne.n	8004674 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	881a      	ldrh	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004668:	b292      	uxth	r2, r2
 800466a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	3302      	adds	r3, #2
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	e008      	b.n	8004686 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	781a      	ldrb	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	b292      	uxth	r2, r2
 800467e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	3301      	adds	r3, #1
 8004684:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1cb      	bne.n	800463c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2200      	movs	r2, #0
 80046ac:	2140      	movs	r1, #64	; 0x40
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fb15 	bl	8004cde <UART_WaitOnFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e009      	b.n	80046d2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e000      	b.n	80046d2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4bac      	ldr	r3, [pc, #688]	; (80049bc <UART_SetConfig+0x2e0>)
 800470c:	4013      	ands	r3, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	6939      	ldr	r1, [r7, #16]
 8004714:	430b      	orrs	r3, r1
 8004716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	430a      	orrs	r2, r1
 8004750:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a9a      	ldr	r2, [pc, #616]	; (80049c0 <UART_SetConfig+0x2e4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d121      	bne.n	80047a0 <UART_SetConfig+0xc4>
 800475c:	4b99      	ldr	r3, [pc, #612]	; (80049c4 <UART_SetConfig+0x2e8>)
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	2b03      	cmp	r3, #3
 8004766:	d817      	bhi.n	8004798 <UART_SetConfig+0xbc>
 8004768:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <UART_SetConfig+0x94>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	08004781 	.word	0x08004781
 8004774:	0800478d 	.word	0x0800478d
 8004778:	08004793 	.word	0x08004793
 800477c:	08004787 	.word	0x08004787
 8004780:	2301      	movs	r3, #1
 8004782:	77fb      	strb	r3, [r7, #31]
 8004784:	e0b2      	b.n	80048ec <UART_SetConfig+0x210>
 8004786:	2302      	movs	r3, #2
 8004788:	77fb      	strb	r3, [r7, #31]
 800478a:	e0af      	b.n	80048ec <UART_SetConfig+0x210>
 800478c:	2304      	movs	r3, #4
 800478e:	77fb      	strb	r3, [r7, #31]
 8004790:	e0ac      	b.n	80048ec <UART_SetConfig+0x210>
 8004792:	2308      	movs	r3, #8
 8004794:	77fb      	strb	r3, [r7, #31]
 8004796:	e0a9      	b.n	80048ec <UART_SetConfig+0x210>
 8004798:	2310      	movs	r3, #16
 800479a:	77fb      	strb	r3, [r7, #31]
 800479c:	bf00      	nop
 800479e:	e0a5      	b.n	80048ec <UART_SetConfig+0x210>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a88      	ldr	r2, [pc, #544]	; (80049c8 <UART_SetConfig+0x2ec>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d123      	bne.n	80047f2 <UART_SetConfig+0x116>
 80047aa:	4b86      	ldr	r3, [pc, #536]	; (80049c4 <UART_SetConfig+0x2e8>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b6:	d012      	beq.n	80047de <UART_SetConfig+0x102>
 80047b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047bc:	d802      	bhi.n	80047c4 <UART_SetConfig+0xe8>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <UART_SetConfig+0xf6>
 80047c2:	e012      	b.n	80047ea <UART_SetConfig+0x10e>
 80047c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047c8:	d00c      	beq.n	80047e4 <UART_SetConfig+0x108>
 80047ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047ce:	d003      	beq.n	80047d8 <UART_SetConfig+0xfc>
 80047d0:	e00b      	b.n	80047ea <UART_SetConfig+0x10e>
 80047d2:	2300      	movs	r3, #0
 80047d4:	77fb      	strb	r3, [r7, #31]
 80047d6:	e089      	b.n	80048ec <UART_SetConfig+0x210>
 80047d8:	2302      	movs	r3, #2
 80047da:	77fb      	strb	r3, [r7, #31]
 80047dc:	e086      	b.n	80048ec <UART_SetConfig+0x210>
 80047de:	2304      	movs	r3, #4
 80047e0:	77fb      	strb	r3, [r7, #31]
 80047e2:	e083      	b.n	80048ec <UART_SetConfig+0x210>
 80047e4:	2308      	movs	r3, #8
 80047e6:	77fb      	strb	r3, [r7, #31]
 80047e8:	e080      	b.n	80048ec <UART_SetConfig+0x210>
 80047ea:	2310      	movs	r3, #16
 80047ec:	77fb      	strb	r3, [r7, #31]
 80047ee:	bf00      	nop
 80047f0:	e07c      	b.n	80048ec <UART_SetConfig+0x210>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a75      	ldr	r2, [pc, #468]	; (80049cc <UART_SetConfig+0x2f0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d123      	bne.n	8004844 <UART_SetConfig+0x168>
 80047fc:	4b71      	ldr	r3, [pc, #452]	; (80049c4 <UART_SetConfig+0x2e8>)
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004804:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004808:	d012      	beq.n	8004830 <UART_SetConfig+0x154>
 800480a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800480e:	d802      	bhi.n	8004816 <UART_SetConfig+0x13a>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <UART_SetConfig+0x148>
 8004814:	e012      	b.n	800483c <UART_SetConfig+0x160>
 8004816:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800481a:	d00c      	beq.n	8004836 <UART_SetConfig+0x15a>
 800481c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004820:	d003      	beq.n	800482a <UART_SetConfig+0x14e>
 8004822:	e00b      	b.n	800483c <UART_SetConfig+0x160>
 8004824:	2300      	movs	r3, #0
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e060      	b.n	80048ec <UART_SetConfig+0x210>
 800482a:	2302      	movs	r3, #2
 800482c:	77fb      	strb	r3, [r7, #31]
 800482e:	e05d      	b.n	80048ec <UART_SetConfig+0x210>
 8004830:	2304      	movs	r3, #4
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e05a      	b.n	80048ec <UART_SetConfig+0x210>
 8004836:	2308      	movs	r3, #8
 8004838:	77fb      	strb	r3, [r7, #31]
 800483a:	e057      	b.n	80048ec <UART_SetConfig+0x210>
 800483c:	2310      	movs	r3, #16
 800483e:	77fb      	strb	r3, [r7, #31]
 8004840:	bf00      	nop
 8004842:	e053      	b.n	80048ec <UART_SetConfig+0x210>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a61      	ldr	r2, [pc, #388]	; (80049d0 <UART_SetConfig+0x2f4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d123      	bne.n	8004896 <UART_SetConfig+0x1ba>
 800484e:	4b5d      	ldr	r3, [pc, #372]	; (80049c4 <UART_SetConfig+0x2e8>)
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800485a:	d012      	beq.n	8004882 <UART_SetConfig+0x1a6>
 800485c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004860:	d802      	bhi.n	8004868 <UART_SetConfig+0x18c>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <UART_SetConfig+0x19a>
 8004866:	e012      	b.n	800488e <UART_SetConfig+0x1b2>
 8004868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800486c:	d00c      	beq.n	8004888 <UART_SetConfig+0x1ac>
 800486e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004872:	d003      	beq.n	800487c <UART_SetConfig+0x1a0>
 8004874:	e00b      	b.n	800488e <UART_SetConfig+0x1b2>
 8004876:	2300      	movs	r3, #0
 8004878:	77fb      	strb	r3, [r7, #31]
 800487a:	e037      	b.n	80048ec <UART_SetConfig+0x210>
 800487c:	2302      	movs	r3, #2
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e034      	b.n	80048ec <UART_SetConfig+0x210>
 8004882:	2304      	movs	r3, #4
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e031      	b.n	80048ec <UART_SetConfig+0x210>
 8004888:	2308      	movs	r3, #8
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e02e      	b.n	80048ec <UART_SetConfig+0x210>
 800488e:	2310      	movs	r3, #16
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	bf00      	nop
 8004894:	e02a      	b.n	80048ec <UART_SetConfig+0x210>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a4e      	ldr	r2, [pc, #312]	; (80049d4 <UART_SetConfig+0x2f8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d123      	bne.n	80048e8 <UART_SetConfig+0x20c>
 80048a0:	4b48      	ldr	r3, [pc, #288]	; (80049c4 <UART_SetConfig+0x2e8>)
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80048a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ac:	d012      	beq.n	80048d4 <UART_SetConfig+0x1f8>
 80048ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b2:	d802      	bhi.n	80048ba <UART_SetConfig+0x1de>
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d007      	beq.n	80048c8 <UART_SetConfig+0x1ec>
 80048b8:	e012      	b.n	80048e0 <UART_SetConfig+0x204>
 80048ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048be:	d00c      	beq.n	80048da <UART_SetConfig+0x1fe>
 80048c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048c4:	d003      	beq.n	80048ce <UART_SetConfig+0x1f2>
 80048c6:	e00b      	b.n	80048e0 <UART_SetConfig+0x204>
 80048c8:	2300      	movs	r3, #0
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e00e      	b.n	80048ec <UART_SetConfig+0x210>
 80048ce:	2302      	movs	r3, #2
 80048d0:	77fb      	strb	r3, [r7, #31]
 80048d2:	e00b      	b.n	80048ec <UART_SetConfig+0x210>
 80048d4:	2304      	movs	r3, #4
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e008      	b.n	80048ec <UART_SetConfig+0x210>
 80048da:	2308      	movs	r3, #8
 80048dc:	77fb      	strb	r3, [r7, #31]
 80048de:	e005      	b.n	80048ec <UART_SetConfig+0x210>
 80048e0:	2310      	movs	r3, #16
 80048e2:	77fb      	strb	r3, [r7, #31]
 80048e4:	bf00      	nop
 80048e6:	e001      	b.n	80048ec <UART_SetConfig+0x210>
 80048e8:	2310      	movs	r3, #16
 80048ea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f4:	f040 8090 	bne.w	8004a18 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80048f8:	7ffb      	ldrb	r3, [r7, #31]
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d86c      	bhi.n	80049d8 <UART_SetConfig+0x2fc>
 80048fe:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <UART_SetConfig+0x228>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004929 	.word	0x08004929
 8004908:	08004949 	.word	0x08004949
 800490c:	08004969 	.word	0x08004969
 8004910:	080049d9 	.word	0x080049d9
 8004914:	08004985 	.word	0x08004985
 8004918:	080049d9 	.word	0x080049d9
 800491c:	080049d9 	.word	0x080049d9
 8004920:	080049d9 	.word	0x080049d9
 8004924:	080049a5 	.word	0x080049a5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004928:	f7ff f8c0 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 800492c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	005a      	lsls	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	085b      	lsrs	r3, r3, #1
 8004938:	441a      	add	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004942:	b29b      	uxth	r3, r3
 8004944:	61bb      	str	r3, [r7, #24]
        break;
 8004946:	e04a      	b.n	80049de <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004948:	f7ff f8d2 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 800494c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	005a      	lsls	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	441a      	add	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004962:	b29b      	uxth	r3, r3
 8004964:	61bb      	str	r3, [r7, #24]
        break;
 8004966:	e03a      	b.n	80049de <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004972:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6852      	ldr	r2, [r2, #4]
 800497a:	fbb3 f3f2 	udiv	r3, r3, r2
 800497e:	b29b      	uxth	r3, r3
 8004980:	61bb      	str	r3, [r7, #24]
        break;
 8004982:	e02c      	b.n	80049de <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004984:	f7ff f81c 	bl	80039c0 <HAL_RCC_GetSysClockFreq>
 8004988:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	005a      	lsls	r2, r3, #1
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	085b      	lsrs	r3, r3, #1
 8004994:	441a      	add	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	b29b      	uxth	r3, r3
 80049a0:	61bb      	str	r3, [r7, #24]
        break;
 80049a2:	e01c      	b.n	80049de <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	085b      	lsrs	r3, r3, #1
 80049aa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	61bb      	str	r3, [r7, #24]
        break;
 80049ba:	e010      	b.n	80049de <UART_SetConfig+0x302>
 80049bc:	efff69f3 	.word	0xefff69f3
 80049c0:	40013800 	.word	0x40013800
 80049c4:	40021000 	.word	0x40021000
 80049c8:	40004400 	.word	0x40004400
 80049cc:	40004800 	.word	0x40004800
 80049d0:	40004c00 	.word	0x40004c00
 80049d4:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	75fb      	strb	r3, [r7, #23]
        break;
 80049dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b0f      	cmp	r3, #15
 80049e2:	d916      	bls.n	8004a12 <UART_SetConfig+0x336>
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ea:	d212      	bcs.n	8004a12 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f023 030f 	bic.w	r3, r3, #15
 80049f4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	085b      	lsrs	r3, r3, #1
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	897b      	ldrh	r3, [r7, #10]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	897a      	ldrh	r2, [r7, #10]
 8004a0e:	60da      	str	r2, [r3, #12]
 8004a10:	e072      	b.n	8004af8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	75fb      	strb	r3, [r7, #23]
 8004a16:	e06f      	b.n	8004af8 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004a18:	7ffb      	ldrb	r3, [r7, #31]
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d85b      	bhi.n	8004ad6 <UART_SetConfig+0x3fa>
 8004a1e:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <UART_SetConfig+0x348>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a49 	.word	0x08004a49
 8004a28:	08004a67 	.word	0x08004a67
 8004a2c:	08004a85 	.word	0x08004a85
 8004a30:	08004ad7 	.word	0x08004ad7
 8004a34:	08004aa1 	.word	0x08004aa1
 8004a38:	08004ad7 	.word	0x08004ad7
 8004a3c:	08004ad7 	.word	0x08004ad7
 8004a40:	08004ad7 	.word	0x08004ad7
 8004a44:	08004abf 	.word	0x08004abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a48:	f7ff f830 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 8004a4c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	085a      	lsrs	r2, r3, #1
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	441a      	add	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	61bb      	str	r3, [r7, #24]
        break;
 8004a64:	e03a      	b.n	8004adc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a66:	f7ff f843 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 8004a6a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	085a      	lsrs	r2, r3, #1
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	441a      	add	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	61bb      	str	r3, [r7, #24]
        break;
 8004a82:	e02b      	b.n	8004adc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004a8e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6852      	ldr	r2, [r2, #4]
 8004a96:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	61bb      	str	r3, [r7, #24]
        break;
 8004a9e:	e01d      	b.n	8004adc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa0:	f7fe ff8e 	bl	80039c0 <HAL_RCC_GetSysClockFreq>
 8004aa4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	085a      	lsrs	r2, r3, #1
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	441a      	add	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	61bb      	str	r3, [r7, #24]
        break;
 8004abc:	e00e      	b.n	8004adc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	085b      	lsrs	r3, r3, #1
 8004ac4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	61bb      	str	r3, [r7, #24]
        break;
 8004ad4:	e002      	b.n	8004adc <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	75fb      	strb	r3, [r7, #23]
        break;
 8004ada:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b0f      	cmp	r3, #15
 8004ae0:	d908      	bls.n	8004af4 <UART_SetConfig+0x418>
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae8:	d204      	bcs.n	8004af4 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	e001      	b.n	8004af8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop

08004b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00a      	beq.n	8004b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01a      	beq.n	8004c26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c0e:	d10a      	bne.n	8004c26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	605a      	str	r2, [r3, #4]
  }
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004c62:	f7fc f8ed 	bl	8000e40 <HAL_GetTick>
 8004c66:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d10e      	bne.n	8004c94 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f82a 	bl	8004cde <UART_WaitOnFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e020      	b.n	8004cd6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d10e      	bne.n	8004cc0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ca2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f814 	bl	8004cde <UART_WaitOnFlagUntilTimeout>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e00a      	b.n	8004cd6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	603b      	str	r3, [r7, #0]
 8004cea:	4613      	mov	r3, r2
 8004cec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cee:	e05d      	b.n	8004dac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cf6:	d059      	beq.n	8004dac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf8:	f7fc f8a2 	bl	8000e40 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d302      	bcc.n	8004d0e <UART_WaitOnFlagUntilTimeout+0x30>
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d11b      	bne.n	8004d46 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0201 	bic.w	r2, r2, #1
 8004d2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2220      	movs	r2, #32
 8004d38:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e042      	b.n	8004dcc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d02b      	beq.n	8004dac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d62:	d123      	bne.n	8004dac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d6c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d7c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0201 	bic.w	r2, r2, #1
 8004d8c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e00f      	b.n	8004dcc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69da      	ldr	r2, [r3, #28]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d092      	beq.n	8004cf0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <__errno>:
 8004dd4:	4b01      	ldr	r3, [pc, #4]	; (8004ddc <__errno+0x8>)
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	2000008c 	.word	0x2000008c

08004de0 <__libc_init_array>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	4e0d      	ldr	r6, [pc, #52]	; (8004e18 <__libc_init_array+0x38>)
 8004de4:	4c0d      	ldr	r4, [pc, #52]	; (8004e1c <__libc_init_array+0x3c>)
 8004de6:	1ba4      	subs	r4, r4, r6
 8004de8:	10a4      	asrs	r4, r4, #2
 8004dea:	2500      	movs	r5, #0
 8004dec:	42a5      	cmp	r5, r4
 8004dee:	d109      	bne.n	8004e04 <__libc_init_array+0x24>
 8004df0:	4e0b      	ldr	r6, [pc, #44]	; (8004e20 <__libc_init_array+0x40>)
 8004df2:	4c0c      	ldr	r4, [pc, #48]	; (8004e24 <__libc_init_array+0x44>)
 8004df4:	f000 ff04 	bl	8005c00 <_init>
 8004df8:	1ba4      	subs	r4, r4, r6
 8004dfa:	10a4      	asrs	r4, r4, #2
 8004dfc:	2500      	movs	r5, #0
 8004dfe:	42a5      	cmp	r5, r4
 8004e00:	d105      	bne.n	8004e0e <__libc_init_array+0x2e>
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e08:	4798      	blx	r3
 8004e0a:	3501      	adds	r5, #1
 8004e0c:	e7ee      	b.n	8004dec <__libc_init_array+0xc>
 8004e0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e12:	4798      	blx	r3
 8004e14:	3501      	adds	r5, #1
 8004e16:	e7f2      	b.n	8004dfe <__libc_init_array+0x1e>
 8004e18:	08005cec 	.word	0x08005cec
 8004e1c:	08005cec 	.word	0x08005cec
 8004e20:	08005cec 	.word	0x08005cec
 8004e24:	08005cf0 	.word	0x08005cf0

08004e28 <memset>:
 8004e28:	4402      	add	r2, r0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d100      	bne.n	8004e32 <memset+0xa>
 8004e30:	4770      	bx	lr
 8004e32:	f803 1b01 	strb.w	r1, [r3], #1
 8004e36:	e7f9      	b.n	8004e2c <memset+0x4>

08004e38 <iprintf>:
 8004e38:	b40f      	push	{r0, r1, r2, r3}
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <iprintf+0x2c>)
 8004e3c:	b513      	push	{r0, r1, r4, lr}
 8004e3e:	681c      	ldr	r4, [r3, #0]
 8004e40:	b124      	cbz	r4, 8004e4c <iprintf+0x14>
 8004e42:	69a3      	ldr	r3, [r4, #24]
 8004e44:	b913      	cbnz	r3, 8004e4c <iprintf+0x14>
 8004e46:	4620      	mov	r0, r4
 8004e48:	f000 f84e 	bl	8004ee8 <__sinit>
 8004e4c:	ab05      	add	r3, sp, #20
 8004e4e:	9a04      	ldr	r2, [sp, #16]
 8004e50:	68a1      	ldr	r1, [r4, #8]
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	4620      	mov	r0, r4
 8004e56:	f000 f955 	bl	8005104 <_vfiprintf_r>
 8004e5a:	b002      	add	sp, #8
 8004e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e60:	b004      	add	sp, #16
 8004e62:	4770      	bx	lr
 8004e64:	2000008c 	.word	0x2000008c

08004e68 <std>:
 8004e68:	2300      	movs	r3, #0
 8004e6a:	b510      	push	{r4, lr}
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e72:	6083      	str	r3, [r0, #8]
 8004e74:	8181      	strh	r1, [r0, #12]
 8004e76:	6643      	str	r3, [r0, #100]	; 0x64
 8004e78:	81c2      	strh	r2, [r0, #14]
 8004e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e7e:	6183      	str	r3, [r0, #24]
 8004e80:	4619      	mov	r1, r3
 8004e82:	2208      	movs	r2, #8
 8004e84:	305c      	adds	r0, #92	; 0x5c
 8004e86:	f7ff ffcf 	bl	8004e28 <memset>
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <std+0x38>)
 8004e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8004e8e:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <std+0x3c>)
 8004e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <std+0x40>)
 8004e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e96:	4b05      	ldr	r3, [pc, #20]	; (8004eac <std+0x44>)
 8004e98:	6224      	str	r4, [r4, #32]
 8004e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e9c:	bd10      	pop	{r4, pc}
 8004e9e:	bf00      	nop
 8004ea0:	08005661 	.word	0x08005661
 8004ea4:	08005683 	.word	0x08005683
 8004ea8:	080056bb 	.word	0x080056bb
 8004eac:	080056df 	.word	0x080056df

08004eb0 <_cleanup_r>:
 8004eb0:	4901      	ldr	r1, [pc, #4]	; (8004eb8 <_cleanup_r+0x8>)
 8004eb2:	f000 b885 	b.w	8004fc0 <_fwalk_reent>
 8004eb6:	bf00      	nop
 8004eb8:	080059b9 	.word	0x080059b9

08004ebc <__sfmoreglue>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	1e4a      	subs	r2, r1, #1
 8004ec0:	2568      	movs	r5, #104	; 0x68
 8004ec2:	4355      	muls	r5, r2
 8004ec4:	460e      	mov	r6, r1
 8004ec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004eca:	f000 f897 	bl	8004ffc <_malloc_r>
 8004ece:	4604      	mov	r4, r0
 8004ed0:	b140      	cbz	r0, 8004ee4 <__sfmoreglue+0x28>
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ed8:	300c      	adds	r0, #12
 8004eda:	60a0      	str	r0, [r4, #8]
 8004edc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ee0:	f7ff ffa2 	bl	8004e28 <memset>
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}

08004ee8 <__sinit>:
 8004ee8:	6983      	ldr	r3, [r0, #24]
 8004eea:	b510      	push	{r4, lr}
 8004eec:	4604      	mov	r4, r0
 8004eee:	bb33      	cbnz	r3, 8004f3e <__sinit+0x56>
 8004ef0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004ef4:	6503      	str	r3, [r0, #80]	; 0x50
 8004ef6:	4b12      	ldr	r3, [pc, #72]	; (8004f40 <__sinit+0x58>)
 8004ef8:	4a12      	ldr	r2, [pc, #72]	; (8004f44 <__sinit+0x5c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6282      	str	r2, [r0, #40]	; 0x28
 8004efe:	4298      	cmp	r0, r3
 8004f00:	bf04      	itt	eq
 8004f02:	2301      	moveq	r3, #1
 8004f04:	6183      	streq	r3, [r0, #24]
 8004f06:	f000 f81f 	bl	8004f48 <__sfp>
 8004f0a:	6060      	str	r0, [r4, #4]
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f000 f81b 	bl	8004f48 <__sfp>
 8004f12:	60a0      	str	r0, [r4, #8]
 8004f14:	4620      	mov	r0, r4
 8004f16:	f000 f817 	bl	8004f48 <__sfp>
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	60e0      	str	r0, [r4, #12]
 8004f1e:	2104      	movs	r1, #4
 8004f20:	6860      	ldr	r0, [r4, #4]
 8004f22:	f7ff ffa1 	bl	8004e68 <std>
 8004f26:	2201      	movs	r2, #1
 8004f28:	2109      	movs	r1, #9
 8004f2a:	68a0      	ldr	r0, [r4, #8]
 8004f2c:	f7ff ff9c 	bl	8004e68 <std>
 8004f30:	2202      	movs	r2, #2
 8004f32:	2112      	movs	r1, #18
 8004f34:	68e0      	ldr	r0, [r4, #12]
 8004f36:	f7ff ff97 	bl	8004e68 <std>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	61a3      	str	r3, [r4, #24]
 8004f3e:	bd10      	pop	{r4, pc}
 8004f40:	08005c54 	.word	0x08005c54
 8004f44:	08004eb1 	.word	0x08004eb1

08004f48 <__sfp>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	4b1b      	ldr	r3, [pc, #108]	; (8004fb8 <__sfp+0x70>)
 8004f4c:	681e      	ldr	r6, [r3, #0]
 8004f4e:	69b3      	ldr	r3, [r6, #24]
 8004f50:	4607      	mov	r7, r0
 8004f52:	b913      	cbnz	r3, 8004f5a <__sfp+0x12>
 8004f54:	4630      	mov	r0, r6
 8004f56:	f7ff ffc7 	bl	8004ee8 <__sinit>
 8004f5a:	3648      	adds	r6, #72	; 0x48
 8004f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	d503      	bpl.n	8004f6c <__sfp+0x24>
 8004f64:	6833      	ldr	r3, [r6, #0]
 8004f66:	b133      	cbz	r3, 8004f76 <__sfp+0x2e>
 8004f68:	6836      	ldr	r6, [r6, #0]
 8004f6a:	e7f7      	b.n	8004f5c <__sfp+0x14>
 8004f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f70:	b16d      	cbz	r5, 8004f8e <__sfp+0x46>
 8004f72:	3468      	adds	r4, #104	; 0x68
 8004f74:	e7f4      	b.n	8004f60 <__sfp+0x18>
 8004f76:	2104      	movs	r1, #4
 8004f78:	4638      	mov	r0, r7
 8004f7a:	f7ff ff9f 	bl	8004ebc <__sfmoreglue>
 8004f7e:	6030      	str	r0, [r6, #0]
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d1f1      	bne.n	8004f68 <__sfp+0x20>
 8004f84:	230c      	movs	r3, #12
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	4604      	mov	r4, r0
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f8e:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <__sfp+0x74>)
 8004f90:	6665      	str	r5, [r4, #100]	; 0x64
 8004f92:	e9c4 5500 	strd	r5, r5, [r4]
 8004f96:	60a5      	str	r5, [r4, #8]
 8004f98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004f9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fa8:	f7ff ff3e 	bl	8004e28 <memset>
 8004fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fb4:	e7e9      	b.n	8004f8a <__sfp+0x42>
 8004fb6:	bf00      	nop
 8004fb8:	08005c54 	.word	0x08005c54
 8004fbc:	ffff0001 	.word	0xffff0001

08004fc0 <_fwalk_reent>:
 8004fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	4689      	mov	r9, r1
 8004fc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fcc:	2600      	movs	r6, #0
 8004fce:	b914      	cbnz	r4, 8004fd6 <_fwalk_reent+0x16>
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004fda:	3f01      	subs	r7, #1
 8004fdc:	d501      	bpl.n	8004fe2 <_fwalk_reent+0x22>
 8004fde:	6824      	ldr	r4, [r4, #0]
 8004fe0:	e7f5      	b.n	8004fce <_fwalk_reent+0xe>
 8004fe2:	89ab      	ldrh	r3, [r5, #12]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d907      	bls.n	8004ff8 <_fwalk_reent+0x38>
 8004fe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fec:	3301      	adds	r3, #1
 8004fee:	d003      	beq.n	8004ff8 <_fwalk_reent+0x38>
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	4640      	mov	r0, r8
 8004ff4:	47c8      	blx	r9
 8004ff6:	4306      	orrs	r6, r0
 8004ff8:	3568      	adds	r5, #104	; 0x68
 8004ffa:	e7ee      	b.n	8004fda <_fwalk_reent+0x1a>

08004ffc <_malloc_r>:
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	1ccd      	adds	r5, r1, #3
 8005000:	f025 0503 	bic.w	r5, r5, #3
 8005004:	3508      	adds	r5, #8
 8005006:	2d0c      	cmp	r5, #12
 8005008:	bf38      	it	cc
 800500a:	250c      	movcc	r5, #12
 800500c:	2d00      	cmp	r5, #0
 800500e:	4606      	mov	r6, r0
 8005010:	db01      	blt.n	8005016 <_malloc_r+0x1a>
 8005012:	42a9      	cmp	r1, r5
 8005014:	d903      	bls.n	800501e <_malloc_r+0x22>
 8005016:	230c      	movs	r3, #12
 8005018:	6033      	str	r3, [r6, #0]
 800501a:	2000      	movs	r0, #0
 800501c:	bd70      	pop	{r4, r5, r6, pc}
 800501e:	f000 fd6b 	bl	8005af8 <__malloc_lock>
 8005022:	4a21      	ldr	r2, [pc, #132]	; (80050a8 <_malloc_r+0xac>)
 8005024:	6814      	ldr	r4, [r2, #0]
 8005026:	4621      	mov	r1, r4
 8005028:	b991      	cbnz	r1, 8005050 <_malloc_r+0x54>
 800502a:	4c20      	ldr	r4, [pc, #128]	; (80050ac <_malloc_r+0xb0>)
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	b91b      	cbnz	r3, 8005038 <_malloc_r+0x3c>
 8005030:	4630      	mov	r0, r6
 8005032:	f000 fb05 	bl	8005640 <_sbrk_r>
 8005036:	6020      	str	r0, [r4, #0]
 8005038:	4629      	mov	r1, r5
 800503a:	4630      	mov	r0, r6
 800503c:	f000 fb00 	bl	8005640 <_sbrk_r>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d124      	bne.n	800508e <_malloc_r+0x92>
 8005044:	230c      	movs	r3, #12
 8005046:	6033      	str	r3, [r6, #0]
 8005048:	4630      	mov	r0, r6
 800504a:	f000 fd56 	bl	8005afa <__malloc_unlock>
 800504e:	e7e4      	b.n	800501a <_malloc_r+0x1e>
 8005050:	680b      	ldr	r3, [r1, #0]
 8005052:	1b5b      	subs	r3, r3, r5
 8005054:	d418      	bmi.n	8005088 <_malloc_r+0x8c>
 8005056:	2b0b      	cmp	r3, #11
 8005058:	d90f      	bls.n	800507a <_malloc_r+0x7e>
 800505a:	600b      	str	r3, [r1, #0]
 800505c:	50cd      	str	r5, [r1, r3]
 800505e:	18cc      	adds	r4, r1, r3
 8005060:	4630      	mov	r0, r6
 8005062:	f000 fd4a 	bl	8005afa <__malloc_unlock>
 8005066:	f104 000b 	add.w	r0, r4, #11
 800506a:	1d23      	adds	r3, r4, #4
 800506c:	f020 0007 	bic.w	r0, r0, #7
 8005070:	1ac3      	subs	r3, r0, r3
 8005072:	d0d3      	beq.n	800501c <_malloc_r+0x20>
 8005074:	425a      	negs	r2, r3
 8005076:	50e2      	str	r2, [r4, r3]
 8005078:	e7d0      	b.n	800501c <_malloc_r+0x20>
 800507a:	428c      	cmp	r4, r1
 800507c:	684b      	ldr	r3, [r1, #4]
 800507e:	bf16      	itet	ne
 8005080:	6063      	strne	r3, [r4, #4]
 8005082:	6013      	streq	r3, [r2, #0]
 8005084:	460c      	movne	r4, r1
 8005086:	e7eb      	b.n	8005060 <_malloc_r+0x64>
 8005088:	460c      	mov	r4, r1
 800508a:	6849      	ldr	r1, [r1, #4]
 800508c:	e7cc      	b.n	8005028 <_malloc_r+0x2c>
 800508e:	1cc4      	adds	r4, r0, #3
 8005090:	f024 0403 	bic.w	r4, r4, #3
 8005094:	42a0      	cmp	r0, r4
 8005096:	d005      	beq.n	80050a4 <_malloc_r+0xa8>
 8005098:	1a21      	subs	r1, r4, r0
 800509a:	4630      	mov	r0, r6
 800509c:	f000 fad0 	bl	8005640 <_sbrk_r>
 80050a0:	3001      	adds	r0, #1
 80050a2:	d0cf      	beq.n	8005044 <_malloc_r+0x48>
 80050a4:	6025      	str	r5, [r4, #0]
 80050a6:	e7db      	b.n	8005060 <_malloc_r+0x64>
 80050a8:	20000114 	.word	0x20000114
 80050ac:	20000118 	.word	0x20000118

080050b0 <__sfputc_r>:
 80050b0:	6893      	ldr	r3, [r2, #8]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	b410      	push	{r4}
 80050b8:	6093      	str	r3, [r2, #8]
 80050ba:	da08      	bge.n	80050ce <__sfputc_r+0x1e>
 80050bc:	6994      	ldr	r4, [r2, #24]
 80050be:	42a3      	cmp	r3, r4
 80050c0:	db01      	blt.n	80050c6 <__sfputc_r+0x16>
 80050c2:	290a      	cmp	r1, #10
 80050c4:	d103      	bne.n	80050ce <__sfputc_r+0x1e>
 80050c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050ca:	f000 bb0d 	b.w	80056e8 <__swbuf_r>
 80050ce:	6813      	ldr	r3, [r2, #0]
 80050d0:	1c58      	adds	r0, r3, #1
 80050d2:	6010      	str	r0, [r2, #0]
 80050d4:	7019      	strb	r1, [r3, #0]
 80050d6:	4608      	mov	r0, r1
 80050d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050dc:	4770      	bx	lr

080050de <__sfputs_r>:
 80050de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e0:	4606      	mov	r6, r0
 80050e2:	460f      	mov	r7, r1
 80050e4:	4614      	mov	r4, r2
 80050e6:	18d5      	adds	r5, r2, r3
 80050e8:	42ac      	cmp	r4, r5
 80050ea:	d101      	bne.n	80050f0 <__sfputs_r+0x12>
 80050ec:	2000      	movs	r0, #0
 80050ee:	e007      	b.n	8005100 <__sfputs_r+0x22>
 80050f0:	463a      	mov	r2, r7
 80050f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f6:	4630      	mov	r0, r6
 80050f8:	f7ff ffda 	bl	80050b0 <__sfputc_r>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	d1f3      	bne.n	80050e8 <__sfputs_r+0xa>
 8005100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005104 <_vfiprintf_r>:
 8005104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005108:	460c      	mov	r4, r1
 800510a:	b09d      	sub	sp, #116	; 0x74
 800510c:	4617      	mov	r7, r2
 800510e:	461d      	mov	r5, r3
 8005110:	4606      	mov	r6, r0
 8005112:	b118      	cbz	r0, 800511c <_vfiprintf_r+0x18>
 8005114:	6983      	ldr	r3, [r0, #24]
 8005116:	b90b      	cbnz	r3, 800511c <_vfiprintf_r+0x18>
 8005118:	f7ff fee6 	bl	8004ee8 <__sinit>
 800511c:	4b7c      	ldr	r3, [pc, #496]	; (8005310 <_vfiprintf_r+0x20c>)
 800511e:	429c      	cmp	r4, r3
 8005120:	d158      	bne.n	80051d4 <_vfiprintf_r+0xd0>
 8005122:	6874      	ldr	r4, [r6, #4]
 8005124:	89a3      	ldrh	r3, [r4, #12]
 8005126:	0718      	lsls	r0, r3, #28
 8005128:	d55e      	bpl.n	80051e8 <_vfiprintf_r+0xe4>
 800512a:	6923      	ldr	r3, [r4, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d05b      	beq.n	80051e8 <_vfiprintf_r+0xe4>
 8005130:	2300      	movs	r3, #0
 8005132:	9309      	str	r3, [sp, #36]	; 0x24
 8005134:	2320      	movs	r3, #32
 8005136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800513a:	2330      	movs	r3, #48	; 0x30
 800513c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005140:	9503      	str	r5, [sp, #12]
 8005142:	f04f 0b01 	mov.w	fp, #1
 8005146:	46b8      	mov	r8, r7
 8005148:	4645      	mov	r5, r8
 800514a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800514e:	b10b      	cbz	r3, 8005154 <_vfiprintf_r+0x50>
 8005150:	2b25      	cmp	r3, #37	; 0x25
 8005152:	d154      	bne.n	80051fe <_vfiprintf_r+0xfa>
 8005154:	ebb8 0a07 	subs.w	sl, r8, r7
 8005158:	d00b      	beq.n	8005172 <_vfiprintf_r+0x6e>
 800515a:	4653      	mov	r3, sl
 800515c:	463a      	mov	r2, r7
 800515e:	4621      	mov	r1, r4
 8005160:	4630      	mov	r0, r6
 8005162:	f7ff ffbc 	bl	80050de <__sfputs_r>
 8005166:	3001      	adds	r0, #1
 8005168:	f000 80c2 	beq.w	80052f0 <_vfiprintf_r+0x1ec>
 800516c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800516e:	4453      	add	r3, sl
 8005170:	9309      	str	r3, [sp, #36]	; 0x24
 8005172:	f898 3000 	ldrb.w	r3, [r8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 80ba 	beq.w	80052f0 <_vfiprintf_r+0x1ec>
 800517c:	2300      	movs	r3, #0
 800517e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005182:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005186:	9304      	str	r3, [sp, #16]
 8005188:	9307      	str	r3, [sp, #28]
 800518a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800518e:	931a      	str	r3, [sp, #104]	; 0x68
 8005190:	46a8      	mov	r8, r5
 8005192:	2205      	movs	r2, #5
 8005194:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005198:	485e      	ldr	r0, [pc, #376]	; (8005314 <_vfiprintf_r+0x210>)
 800519a:	f7fb f821 	bl	80001e0 <memchr>
 800519e:	9b04      	ldr	r3, [sp, #16]
 80051a0:	bb78      	cbnz	r0, 8005202 <_vfiprintf_r+0xfe>
 80051a2:	06d9      	lsls	r1, r3, #27
 80051a4:	bf44      	itt	mi
 80051a6:	2220      	movmi	r2, #32
 80051a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051ac:	071a      	lsls	r2, r3, #28
 80051ae:	bf44      	itt	mi
 80051b0:	222b      	movmi	r2, #43	; 0x2b
 80051b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051b6:	782a      	ldrb	r2, [r5, #0]
 80051b8:	2a2a      	cmp	r2, #42	; 0x2a
 80051ba:	d02a      	beq.n	8005212 <_vfiprintf_r+0x10e>
 80051bc:	9a07      	ldr	r2, [sp, #28]
 80051be:	46a8      	mov	r8, r5
 80051c0:	2000      	movs	r0, #0
 80051c2:	250a      	movs	r5, #10
 80051c4:	4641      	mov	r1, r8
 80051c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051ca:	3b30      	subs	r3, #48	; 0x30
 80051cc:	2b09      	cmp	r3, #9
 80051ce:	d969      	bls.n	80052a4 <_vfiprintf_r+0x1a0>
 80051d0:	b360      	cbz	r0, 800522c <_vfiprintf_r+0x128>
 80051d2:	e024      	b.n	800521e <_vfiprintf_r+0x11a>
 80051d4:	4b50      	ldr	r3, [pc, #320]	; (8005318 <_vfiprintf_r+0x214>)
 80051d6:	429c      	cmp	r4, r3
 80051d8:	d101      	bne.n	80051de <_vfiprintf_r+0xda>
 80051da:	68b4      	ldr	r4, [r6, #8]
 80051dc:	e7a2      	b.n	8005124 <_vfiprintf_r+0x20>
 80051de:	4b4f      	ldr	r3, [pc, #316]	; (800531c <_vfiprintf_r+0x218>)
 80051e0:	429c      	cmp	r4, r3
 80051e2:	bf08      	it	eq
 80051e4:	68f4      	ldreq	r4, [r6, #12]
 80051e6:	e79d      	b.n	8005124 <_vfiprintf_r+0x20>
 80051e8:	4621      	mov	r1, r4
 80051ea:	4630      	mov	r0, r6
 80051ec:	f000 fae0 	bl	80057b0 <__swsetup_r>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d09d      	beq.n	8005130 <_vfiprintf_r+0x2c>
 80051f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051f8:	b01d      	add	sp, #116	; 0x74
 80051fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fe:	46a8      	mov	r8, r5
 8005200:	e7a2      	b.n	8005148 <_vfiprintf_r+0x44>
 8005202:	4a44      	ldr	r2, [pc, #272]	; (8005314 <_vfiprintf_r+0x210>)
 8005204:	1a80      	subs	r0, r0, r2
 8005206:	fa0b f000 	lsl.w	r0, fp, r0
 800520a:	4318      	orrs	r0, r3
 800520c:	9004      	str	r0, [sp, #16]
 800520e:	4645      	mov	r5, r8
 8005210:	e7be      	b.n	8005190 <_vfiprintf_r+0x8c>
 8005212:	9a03      	ldr	r2, [sp, #12]
 8005214:	1d11      	adds	r1, r2, #4
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	9103      	str	r1, [sp, #12]
 800521a:	2a00      	cmp	r2, #0
 800521c:	db01      	blt.n	8005222 <_vfiprintf_r+0x11e>
 800521e:	9207      	str	r2, [sp, #28]
 8005220:	e004      	b.n	800522c <_vfiprintf_r+0x128>
 8005222:	4252      	negs	r2, r2
 8005224:	f043 0302 	orr.w	r3, r3, #2
 8005228:	9207      	str	r2, [sp, #28]
 800522a:	9304      	str	r3, [sp, #16]
 800522c:	f898 3000 	ldrb.w	r3, [r8]
 8005230:	2b2e      	cmp	r3, #46	; 0x2e
 8005232:	d10e      	bne.n	8005252 <_vfiprintf_r+0x14e>
 8005234:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005238:	2b2a      	cmp	r3, #42	; 0x2a
 800523a:	d138      	bne.n	80052ae <_vfiprintf_r+0x1aa>
 800523c:	9b03      	ldr	r3, [sp, #12]
 800523e:	1d1a      	adds	r2, r3, #4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	9203      	str	r2, [sp, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	bfb8      	it	lt
 8005248:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800524c:	f108 0802 	add.w	r8, r8, #2
 8005250:	9305      	str	r3, [sp, #20]
 8005252:	4d33      	ldr	r5, [pc, #204]	; (8005320 <_vfiprintf_r+0x21c>)
 8005254:	f898 1000 	ldrb.w	r1, [r8]
 8005258:	2203      	movs	r2, #3
 800525a:	4628      	mov	r0, r5
 800525c:	f7fa ffc0 	bl	80001e0 <memchr>
 8005260:	b140      	cbz	r0, 8005274 <_vfiprintf_r+0x170>
 8005262:	2340      	movs	r3, #64	; 0x40
 8005264:	1b40      	subs	r0, r0, r5
 8005266:	fa03 f000 	lsl.w	r0, r3, r0
 800526a:	9b04      	ldr	r3, [sp, #16]
 800526c:	4303      	orrs	r3, r0
 800526e:	f108 0801 	add.w	r8, r8, #1
 8005272:	9304      	str	r3, [sp, #16]
 8005274:	f898 1000 	ldrb.w	r1, [r8]
 8005278:	482a      	ldr	r0, [pc, #168]	; (8005324 <_vfiprintf_r+0x220>)
 800527a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800527e:	2206      	movs	r2, #6
 8005280:	f108 0701 	add.w	r7, r8, #1
 8005284:	f7fa ffac 	bl	80001e0 <memchr>
 8005288:	2800      	cmp	r0, #0
 800528a:	d037      	beq.n	80052fc <_vfiprintf_r+0x1f8>
 800528c:	4b26      	ldr	r3, [pc, #152]	; (8005328 <_vfiprintf_r+0x224>)
 800528e:	bb1b      	cbnz	r3, 80052d8 <_vfiprintf_r+0x1d4>
 8005290:	9b03      	ldr	r3, [sp, #12]
 8005292:	3307      	adds	r3, #7
 8005294:	f023 0307 	bic.w	r3, r3, #7
 8005298:	3308      	adds	r3, #8
 800529a:	9303      	str	r3, [sp, #12]
 800529c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800529e:	444b      	add	r3, r9
 80052a0:	9309      	str	r3, [sp, #36]	; 0x24
 80052a2:	e750      	b.n	8005146 <_vfiprintf_r+0x42>
 80052a4:	fb05 3202 	mla	r2, r5, r2, r3
 80052a8:	2001      	movs	r0, #1
 80052aa:	4688      	mov	r8, r1
 80052ac:	e78a      	b.n	80051c4 <_vfiprintf_r+0xc0>
 80052ae:	2300      	movs	r3, #0
 80052b0:	f108 0801 	add.w	r8, r8, #1
 80052b4:	9305      	str	r3, [sp, #20]
 80052b6:	4619      	mov	r1, r3
 80052b8:	250a      	movs	r5, #10
 80052ba:	4640      	mov	r0, r8
 80052bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052c0:	3a30      	subs	r2, #48	; 0x30
 80052c2:	2a09      	cmp	r2, #9
 80052c4:	d903      	bls.n	80052ce <_vfiprintf_r+0x1ca>
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0c3      	beq.n	8005252 <_vfiprintf_r+0x14e>
 80052ca:	9105      	str	r1, [sp, #20]
 80052cc:	e7c1      	b.n	8005252 <_vfiprintf_r+0x14e>
 80052ce:	fb05 2101 	mla	r1, r5, r1, r2
 80052d2:	2301      	movs	r3, #1
 80052d4:	4680      	mov	r8, r0
 80052d6:	e7f0      	b.n	80052ba <_vfiprintf_r+0x1b6>
 80052d8:	ab03      	add	r3, sp, #12
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	4622      	mov	r2, r4
 80052de:	4b13      	ldr	r3, [pc, #76]	; (800532c <_vfiprintf_r+0x228>)
 80052e0:	a904      	add	r1, sp, #16
 80052e2:	4630      	mov	r0, r6
 80052e4:	f3af 8000 	nop.w
 80052e8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80052ec:	4681      	mov	r9, r0
 80052ee:	d1d5      	bne.n	800529c <_vfiprintf_r+0x198>
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	065b      	lsls	r3, r3, #25
 80052f4:	f53f af7e 	bmi.w	80051f4 <_vfiprintf_r+0xf0>
 80052f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052fa:	e77d      	b.n	80051f8 <_vfiprintf_r+0xf4>
 80052fc:	ab03      	add	r3, sp, #12
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	4622      	mov	r2, r4
 8005302:	4b0a      	ldr	r3, [pc, #40]	; (800532c <_vfiprintf_r+0x228>)
 8005304:	a904      	add	r1, sp, #16
 8005306:	4630      	mov	r0, r6
 8005308:	f000 f888 	bl	800541c <_printf_i>
 800530c:	e7ec      	b.n	80052e8 <_vfiprintf_r+0x1e4>
 800530e:	bf00      	nop
 8005310:	08005c78 	.word	0x08005c78
 8005314:	08005cb8 	.word	0x08005cb8
 8005318:	08005c98 	.word	0x08005c98
 800531c:	08005c58 	.word	0x08005c58
 8005320:	08005cbe 	.word	0x08005cbe
 8005324:	08005cc2 	.word	0x08005cc2
 8005328:	00000000 	.word	0x00000000
 800532c:	080050df 	.word	0x080050df

08005330 <_printf_common>:
 8005330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005334:	4691      	mov	r9, r2
 8005336:	461f      	mov	r7, r3
 8005338:	688a      	ldr	r2, [r1, #8]
 800533a:	690b      	ldr	r3, [r1, #16]
 800533c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005340:	4293      	cmp	r3, r2
 8005342:	bfb8      	it	lt
 8005344:	4613      	movlt	r3, r2
 8005346:	f8c9 3000 	str.w	r3, [r9]
 800534a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800534e:	4606      	mov	r6, r0
 8005350:	460c      	mov	r4, r1
 8005352:	b112      	cbz	r2, 800535a <_printf_common+0x2a>
 8005354:	3301      	adds	r3, #1
 8005356:	f8c9 3000 	str.w	r3, [r9]
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	0699      	lsls	r1, r3, #26
 800535e:	bf42      	ittt	mi
 8005360:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005364:	3302      	addmi	r3, #2
 8005366:	f8c9 3000 	strmi.w	r3, [r9]
 800536a:	6825      	ldr	r5, [r4, #0]
 800536c:	f015 0506 	ands.w	r5, r5, #6
 8005370:	d107      	bne.n	8005382 <_printf_common+0x52>
 8005372:	f104 0a19 	add.w	sl, r4, #25
 8005376:	68e3      	ldr	r3, [r4, #12]
 8005378:	f8d9 2000 	ldr.w	r2, [r9]
 800537c:	1a9b      	subs	r3, r3, r2
 800537e:	42ab      	cmp	r3, r5
 8005380:	dc28      	bgt.n	80053d4 <_printf_common+0xa4>
 8005382:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005386:	6822      	ldr	r2, [r4, #0]
 8005388:	3300      	adds	r3, #0
 800538a:	bf18      	it	ne
 800538c:	2301      	movne	r3, #1
 800538e:	0692      	lsls	r2, r2, #26
 8005390:	d42d      	bmi.n	80053ee <_printf_common+0xbe>
 8005392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005396:	4639      	mov	r1, r7
 8005398:	4630      	mov	r0, r6
 800539a:	47c0      	blx	r8
 800539c:	3001      	adds	r0, #1
 800539e:	d020      	beq.n	80053e2 <_printf_common+0xb2>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	68e5      	ldr	r5, [r4, #12]
 80053a4:	f8d9 2000 	ldr.w	r2, [r9]
 80053a8:	f003 0306 	and.w	r3, r3, #6
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	bf08      	it	eq
 80053b0:	1aad      	subeq	r5, r5, r2
 80053b2:	68a3      	ldr	r3, [r4, #8]
 80053b4:	6922      	ldr	r2, [r4, #16]
 80053b6:	bf0c      	ite	eq
 80053b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053bc:	2500      	movne	r5, #0
 80053be:	4293      	cmp	r3, r2
 80053c0:	bfc4      	itt	gt
 80053c2:	1a9b      	subgt	r3, r3, r2
 80053c4:	18ed      	addgt	r5, r5, r3
 80053c6:	f04f 0900 	mov.w	r9, #0
 80053ca:	341a      	adds	r4, #26
 80053cc:	454d      	cmp	r5, r9
 80053ce:	d11a      	bne.n	8005406 <_printf_common+0xd6>
 80053d0:	2000      	movs	r0, #0
 80053d2:	e008      	b.n	80053e6 <_printf_common+0xb6>
 80053d4:	2301      	movs	r3, #1
 80053d6:	4652      	mov	r2, sl
 80053d8:	4639      	mov	r1, r7
 80053da:	4630      	mov	r0, r6
 80053dc:	47c0      	blx	r8
 80053de:	3001      	adds	r0, #1
 80053e0:	d103      	bne.n	80053ea <_printf_common+0xba>
 80053e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ea:	3501      	adds	r5, #1
 80053ec:	e7c3      	b.n	8005376 <_printf_common+0x46>
 80053ee:	18e1      	adds	r1, r4, r3
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	2030      	movs	r0, #48	; 0x30
 80053f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053f8:	4422      	add	r2, r4
 80053fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005402:	3302      	adds	r3, #2
 8005404:	e7c5      	b.n	8005392 <_printf_common+0x62>
 8005406:	2301      	movs	r3, #1
 8005408:	4622      	mov	r2, r4
 800540a:	4639      	mov	r1, r7
 800540c:	4630      	mov	r0, r6
 800540e:	47c0      	blx	r8
 8005410:	3001      	adds	r0, #1
 8005412:	d0e6      	beq.n	80053e2 <_printf_common+0xb2>
 8005414:	f109 0901 	add.w	r9, r9, #1
 8005418:	e7d8      	b.n	80053cc <_printf_common+0x9c>
	...

0800541c <_printf_i>:
 800541c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005420:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005424:	460c      	mov	r4, r1
 8005426:	7e09      	ldrb	r1, [r1, #24]
 8005428:	b085      	sub	sp, #20
 800542a:	296e      	cmp	r1, #110	; 0x6e
 800542c:	4617      	mov	r7, r2
 800542e:	4606      	mov	r6, r0
 8005430:	4698      	mov	r8, r3
 8005432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005434:	f000 80b3 	beq.w	800559e <_printf_i+0x182>
 8005438:	d822      	bhi.n	8005480 <_printf_i+0x64>
 800543a:	2963      	cmp	r1, #99	; 0x63
 800543c:	d036      	beq.n	80054ac <_printf_i+0x90>
 800543e:	d80a      	bhi.n	8005456 <_printf_i+0x3a>
 8005440:	2900      	cmp	r1, #0
 8005442:	f000 80b9 	beq.w	80055b8 <_printf_i+0x19c>
 8005446:	2958      	cmp	r1, #88	; 0x58
 8005448:	f000 8083 	beq.w	8005552 <_printf_i+0x136>
 800544c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005450:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005454:	e032      	b.n	80054bc <_printf_i+0xa0>
 8005456:	2964      	cmp	r1, #100	; 0x64
 8005458:	d001      	beq.n	800545e <_printf_i+0x42>
 800545a:	2969      	cmp	r1, #105	; 0x69
 800545c:	d1f6      	bne.n	800544c <_printf_i+0x30>
 800545e:	6820      	ldr	r0, [r4, #0]
 8005460:	6813      	ldr	r3, [r2, #0]
 8005462:	0605      	lsls	r5, r0, #24
 8005464:	f103 0104 	add.w	r1, r3, #4
 8005468:	d52a      	bpl.n	80054c0 <_printf_i+0xa4>
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6011      	str	r1, [r2, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	da03      	bge.n	800547a <_printf_i+0x5e>
 8005472:	222d      	movs	r2, #45	; 0x2d
 8005474:	425b      	negs	r3, r3
 8005476:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800547a:	486f      	ldr	r0, [pc, #444]	; (8005638 <_printf_i+0x21c>)
 800547c:	220a      	movs	r2, #10
 800547e:	e039      	b.n	80054f4 <_printf_i+0xd8>
 8005480:	2973      	cmp	r1, #115	; 0x73
 8005482:	f000 809d 	beq.w	80055c0 <_printf_i+0x1a4>
 8005486:	d808      	bhi.n	800549a <_printf_i+0x7e>
 8005488:	296f      	cmp	r1, #111	; 0x6f
 800548a:	d020      	beq.n	80054ce <_printf_i+0xb2>
 800548c:	2970      	cmp	r1, #112	; 0x70
 800548e:	d1dd      	bne.n	800544c <_printf_i+0x30>
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	f043 0320 	orr.w	r3, r3, #32
 8005496:	6023      	str	r3, [r4, #0]
 8005498:	e003      	b.n	80054a2 <_printf_i+0x86>
 800549a:	2975      	cmp	r1, #117	; 0x75
 800549c:	d017      	beq.n	80054ce <_printf_i+0xb2>
 800549e:	2978      	cmp	r1, #120	; 0x78
 80054a0:	d1d4      	bne.n	800544c <_printf_i+0x30>
 80054a2:	2378      	movs	r3, #120	; 0x78
 80054a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054a8:	4864      	ldr	r0, [pc, #400]	; (800563c <_printf_i+0x220>)
 80054aa:	e055      	b.n	8005558 <_printf_i+0x13c>
 80054ac:	6813      	ldr	r3, [r2, #0]
 80054ae:	1d19      	adds	r1, r3, #4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6011      	str	r1, [r2, #0]
 80054b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054bc:	2301      	movs	r3, #1
 80054be:	e08c      	b.n	80055da <_printf_i+0x1be>
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6011      	str	r1, [r2, #0]
 80054c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054c8:	bf18      	it	ne
 80054ca:	b21b      	sxthne	r3, r3
 80054cc:	e7cf      	b.n	800546e <_printf_i+0x52>
 80054ce:	6813      	ldr	r3, [r2, #0]
 80054d0:	6825      	ldr	r5, [r4, #0]
 80054d2:	1d18      	adds	r0, r3, #4
 80054d4:	6010      	str	r0, [r2, #0]
 80054d6:	0628      	lsls	r0, r5, #24
 80054d8:	d501      	bpl.n	80054de <_printf_i+0xc2>
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	e002      	b.n	80054e4 <_printf_i+0xc8>
 80054de:	0668      	lsls	r0, r5, #25
 80054e0:	d5fb      	bpl.n	80054da <_printf_i+0xbe>
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	4854      	ldr	r0, [pc, #336]	; (8005638 <_printf_i+0x21c>)
 80054e6:	296f      	cmp	r1, #111	; 0x6f
 80054e8:	bf14      	ite	ne
 80054ea:	220a      	movne	r2, #10
 80054ec:	2208      	moveq	r2, #8
 80054ee:	2100      	movs	r1, #0
 80054f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054f4:	6865      	ldr	r5, [r4, #4]
 80054f6:	60a5      	str	r5, [r4, #8]
 80054f8:	2d00      	cmp	r5, #0
 80054fa:	f2c0 8095 	blt.w	8005628 <_printf_i+0x20c>
 80054fe:	6821      	ldr	r1, [r4, #0]
 8005500:	f021 0104 	bic.w	r1, r1, #4
 8005504:	6021      	str	r1, [r4, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d13d      	bne.n	8005586 <_printf_i+0x16a>
 800550a:	2d00      	cmp	r5, #0
 800550c:	f040 808e 	bne.w	800562c <_printf_i+0x210>
 8005510:	4665      	mov	r5, ip
 8005512:	2a08      	cmp	r2, #8
 8005514:	d10b      	bne.n	800552e <_printf_i+0x112>
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	07db      	lsls	r3, r3, #31
 800551a:	d508      	bpl.n	800552e <_printf_i+0x112>
 800551c:	6923      	ldr	r3, [r4, #16]
 800551e:	6862      	ldr	r2, [r4, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	bfde      	ittt	le
 8005524:	2330      	movle	r3, #48	; 0x30
 8005526:	f805 3c01 	strble.w	r3, [r5, #-1]
 800552a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800552e:	ebac 0305 	sub.w	r3, ip, r5
 8005532:	6123      	str	r3, [r4, #16]
 8005534:	f8cd 8000 	str.w	r8, [sp]
 8005538:	463b      	mov	r3, r7
 800553a:	aa03      	add	r2, sp, #12
 800553c:	4621      	mov	r1, r4
 800553e:	4630      	mov	r0, r6
 8005540:	f7ff fef6 	bl	8005330 <_printf_common>
 8005544:	3001      	adds	r0, #1
 8005546:	d14d      	bne.n	80055e4 <_printf_i+0x1c8>
 8005548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800554c:	b005      	add	sp, #20
 800554e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005552:	4839      	ldr	r0, [pc, #228]	; (8005638 <_printf_i+0x21c>)
 8005554:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005558:	6813      	ldr	r3, [r2, #0]
 800555a:	6821      	ldr	r1, [r4, #0]
 800555c:	1d1d      	adds	r5, r3, #4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6015      	str	r5, [r2, #0]
 8005562:	060a      	lsls	r2, r1, #24
 8005564:	d50b      	bpl.n	800557e <_printf_i+0x162>
 8005566:	07ca      	lsls	r2, r1, #31
 8005568:	bf44      	itt	mi
 800556a:	f041 0120 	orrmi.w	r1, r1, #32
 800556e:	6021      	strmi	r1, [r4, #0]
 8005570:	b91b      	cbnz	r3, 800557a <_printf_i+0x15e>
 8005572:	6822      	ldr	r2, [r4, #0]
 8005574:	f022 0220 	bic.w	r2, r2, #32
 8005578:	6022      	str	r2, [r4, #0]
 800557a:	2210      	movs	r2, #16
 800557c:	e7b7      	b.n	80054ee <_printf_i+0xd2>
 800557e:	064d      	lsls	r5, r1, #25
 8005580:	bf48      	it	mi
 8005582:	b29b      	uxthmi	r3, r3
 8005584:	e7ef      	b.n	8005566 <_printf_i+0x14a>
 8005586:	4665      	mov	r5, ip
 8005588:	fbb3 f1f2 	udiv	r1, r3, r2
 800558c:	fb02 3311 	mls	r3, r2, r1, r3
 8005590:	5cc3      	ldrb	r3, [r0, r3]
 8005592:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005596:	460b      	mov	r3, r1
 8005598:	2900      	cmp	r1, #0
 800559a:	d1f5      	bne.n	8005588 <_printf_i+0x16c>
 800559c:	e7b9      	b.n	8005512 <_printf_i+0xf6>
 800559e:	6813      	ldr	r3, [r2, #0]
 80055a0:	6825      	ldr	r5, [r4, #0]
 80055a2:	6961      	ldr	r1, [r4, #20]
 80055a4:	1d18      	adds	r0, r3, #4
 80055a6:	6010      	str	r0, [r2, #0]
 80055a8:	0628      	lsls	r0, r5, #24
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	d501      	bpl.n	80055b2 <_printf_i+0x196>
 80055ae:	6019      	str	r1, [r3, #0]
 80055b0:	e002      	b.n	80055b8 <_printf_i+0x19c>
 80055b2:	066a      	lsls	r2, r5, #25
 80055b4:	d5fb      	bpl.n	80055ae <_printf_i+0x192>
 80055b6:	8019      	strh	r1, [r3, #0]
 80055b8:	2300      	movs	r3, #0
 80055ba:	6123      	str	r3, [r4, #16]
 80055bc:	4665      	mov	r5, ip
 80055be:	e7b9      	b.n	8005534 <_printf_i+0x118>
 80055c0:	6813      	ldr	r3, [r2, #0]
 80055c2:	1d19      	adds	r1, r3, #4
 80055c4:	6011      	str	r1, [r2, #0]
 80055c6:	681d      	ldr	r5, [r3, #0]
 80055c8:	6862      	ldr	r2, [r4, #4]
 80055ca:	2100      	movs	r1, #0
 80055cc:	4628      	mov	r0, r5
 80055ce:	f7fa fe07 	bl	80001e0 <memchr>
 80055d2:	b108      	cbz	r0, 80055d8 <_printf_i+0x1bc>
 80055d4:	1b40      	subs	r0, r0, r5
 80055d6:	6060      	str	r0, [r4, #4]
 80055d8:	6863      	ldr	r3, [r4, #4]
 80055da:	6123      	str	r3, [r4, #16]
 80055dc:	2300      	movs	r3, #0
 80055de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055e2:	e7a7      	b.n	8005534 <_printf_i+0x118>
 80055e4:	6923      	ldr	r3, [r4, #16]
 80055e6:	462a      	mov	r2, r5
 80055e8:	4639      	mov	r1, r7
 80055ea:	4630      	mov	r0, r6
 80055ec:	47c0      	blx	r8
 80055ee:	3001      	adds	r0, #1
 80055f0:	d0aa      	beq.n	8005548 <_printf_i+0x12c>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	079b      	lsls	r3, r3, #30
 80055f6:	d413      	bmi.n	8005620 <_printf_i+0x204>
 80055f8:	68e0      	ldr	r0, [r4, #12]
 80055fa:	9b03      	ldr	r3, [sp, #12]
 80055fc:	4298      	cmp	r0, r3
 80055fe:	bfb8      	it	lt
 8005600:	4618      	movlt	r0, r3
 8005602:	e7a3      	b.n	800554c <_printf_i+0x130>
 8005604:	2301      	movs	r3, #1
 8005606:	464a      	mov	r2, r9
 8005608:	4639      	mov	r1, r7
 800560a:	4630      	mov	r0, r6
 800560c:	47c0      	blx	r8
 800560e:	3001      	adds	r0, #1
 8005610:	d09a      	beq.n	8005548 <_printf_i+0x12c>
 8005612:	3501      	adds	r5, #1
 8005614:	68e3      	ldr	r3, [r4, #12]
 8005616:	9a03      	ldr	r2, [sp, #12]
 8005618:	1a9b      	subs	r3, r3, r2
 800561a:	42ab      	cmp	r3, r5
 800561c:	dcf2      	bgt.n	8005604 <_printf_i+0x1e8>
 800561e:	e7eb      	b.n	80055f8 <_printf_i+0x1dc>
 8005620:	2500      	movs	r5, #0
 8005622:	f104 0919 	add.w	r9, r4, #25
 8005626:	e7f5      	b.n	8005614 <_printf_i+0x1f8>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1ac      	bne.n	8005586 <_printf_i+0x16a>
 800562c:	7803      	ldrb	r3, [r0, #0]
 800562e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005632:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005636:	e76c      	b.n	8005512 <_printf_i+0xf6>
 8005638:	08005cc9 	.word	0x08005cc9
 800563c:	08005cda 	.word	0x08005cda

08005640 <_sbrk_r>:
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	4c06      	ldr	r4, [pc, #24]	; (800565c <_sbrk_r+0x1c>)
 8005644:	2300      	movs	r3, #0
 8005646:	4605      	mov	r5, r0
 8005648:	4608      	mov	r0, r1
 800564a:	6023      	str	r3, [r4, #0]
 800564c:	f7fb fb32 	bl	8000cb4 <_sbrk>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_sbrk_r+0x1a>
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	b103      	cbz	r3, 800565a <_sbrk_r+0x1a>
 8005658:	602b      	str	r3, [r5, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	20000f78 	.word	0x20000f78

08005660 <__sread>:
 8005660:	b510      	push	{r4, lr}
 8005662:	460c      	mov	r4, r1
 8005664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005668:	f000 fa96 	bl	8005b98 <_read_r>
 800566c:	2800      	cmp	r0, #0
 800566e:	bfab      	itete	ge
 8005670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005672:	89a3      	ldrhlt	r3, [r4, #12]
 8005674:	181b      	addge	r3, r3, r0
 8005676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800567a:	bfac      	ite	ge
 800567c:	6563      	strge	r3, [r4, #84]	; 0x54
 800567e:	81a3      	strhlt	r3, [r4, #12]
 8005680:	bd10      	pop	{r4, pc}

08005682 <__swrite>:
 8005682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005686:	461f      	mov	r7, r3
 8005688:	898b      	ldrh	r3, [r1, #12]
 800568a:	05db      	lsls	r3, r3, #23
 800568c:	4605      	mov	r5, r0
 800568e:	460c      	mov	r4, r1
 8005690:	4616      	mov	r6, r2
 8005692:	d505      	bpl.n	80056a0 <__swrite+0x1e>
 8005694:	2302      	movs	r3, #2
 8005696:	2200      	movs	r2, #0
 8005698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800569c:	f000 f9b6 	bl	8005a0c <_lseek_r>
 80056a0:	89a3      	ldrh	r3, [r4, #12]
 80056a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056aa:	81a3      	strh	r3, [r4, #12]
 80056ac:	4632      	mov	r2, r6
 80056ae:	463b      	mov	r3, r7
 80056b0:	4628      	mov	r0, r5
 80056b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056b6:	f000 b869 	b.w	800578c <_write_r>

080056ba <__sseek>:
 80056ba:	b510      	push	{r4, lr}
 80056bc:	460c      	mov	r4, r1
 80056be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c2:	f000 f9a3 	bl	8005a0c <_lseek_r>
 80056c6:	1c43      	adds	r3, r0, #1
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	bf15      	itete	ne
 80056cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80056ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056d6:	81a3      	strheq	r3, [r4, #12]
 80056d8:	bf18      	it	ne
 80056da:	81a3      	strhne	r3, [r4, #12]
 80056dc:	bd10      	pop	{r4, pc}

080056de <__sclose>:
 80056de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e2:	f000 b8d3 	b.w	800588c <_close_r>
	...

080056e8 <__swbuf_r>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	460e      	mov	r6, r1
 80056ec:	4614      	mov	r4, r2
 80056ee:	4605      	mov	r5, r0
 80056f0:	b118      	cbz	r0, 80056fa <__swbuf_r+0x12>
 80056f2:	6983      	ldr	r3, [r0, #24]
 80056f4:	b90b      	cbnz	r3, 80056fa <__swbuf_r+0x12>
 80056f6:	f7ff fbf7 	bl	8004ee8 <__sinit>
 80056fa:	4b21      	ldr	r3, [pc, #132]	; (8005780 <__swbuf_r+0x98>)
 80056fc:	429c      	cmp	r4, r3
 80056fe:	d12a      	bne.n	8005756 <__swbuf_r+0x6e>
 8005700:	686c      	ldr	r4, [r5, #4]
 8005702:	69a3      	ldr	r3, [r4, #24]
 8005704:	60a3      	str	r3, [r4, #8]
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	071a      	lsls	r2, r3, #28
 800570a:	d52e      	bpl.n	800576a <__swbuf_r+0x82>
 800570c:	6923      	ldr	r3, [r4, #16]
 800570e:	b363      	cbz	r3, 800576a <__swbuf_r+0x82>
 8005710:	6923      	ldr	r3, [r4, #16]
 8005712:	6820      	ldr	r0, [r4, #0]
 8005714:	1ac0      	subs	r0, r0, r3
 8005716:	6963      	ldr	r3, [r4, #20]
 8005718:	b2f6      	uxtb	r6, r6
 800571a:	4283      	cmp	r3, r0
 800571c:	4637      	mov	r7, r6
 800571e:	dc04      	bgt.n	800572a <__swbuf_r+0x42>
 8005720:	4621      	mov	r1, r4
 8005722:	4628      	mov	r0, r5
 8005724:	f000 f948 	bl	80059b8 <_fflush_r>
 8005728:	bb28      	cbnz	r0, 8005776 <__swbuf_r+0x8e>
 800572a:	68a3      	ldr	r3, [r4, #8]
 800572c:	3b01      	subs	r3, #1
 800572e:	60a3      	str	r3, [r4, #8]
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	6022      	str	r2, [r4, #0]
 8005736:	701e      	strb	r6, [r3, #0]
 8005738:	6963      	ldr	r3, [r4, #20]
 800573a:	3001      	adds	r0, #1
 800573c:	4283      	cmp	r3, r0
 800573e:	d004      	beq.n	800574a <__swbuf_r+0x62>
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	07db      	lsls	r3, r3, #31
 8005744:	d519      	bpl.n	800577a <__swbuf_r+0x92>
 8005746:	2e0a      	cmp	r6, #10
 8005748:	d117      	bne.n	800577a <__swbuf_r+0x92>
 800574a:	4621      	mov	r1, r4
 800574c:	4628      	mov	r0, r5
 800574e:	f000 f933 	bl	80059b8 <_fflush_r>
 8005752:	b190      	cbz	r0, 800577a <__swbuf_r+0x92>
 8005754:	e00f      	b.n	8005776 <__swbuf_r+0x8e>
 8005756:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <__swbuf_r+0x9c>)
 8005758:	429c      	cmp	r4, r3
 800575a:	d101      	bne.n	8005760 <__swbuf_r+0x78>
 800575c:	68ac      	ldr	r4, [r5, #8]
 800575e:	e7d0      	b.n	8005702 <__swbuf_r+0x1a>
 8005760:	4b09      	ldr	r3, [pc, #36]	; (8005788 <__swbuf_r+0xa0>)
 8005762:	429c      	cmp	r4, r3
 8005764:	bf08      	it	eq
 8005766:	68ec      	ldreq	r4, [r5, #12]
 8005768:	e7cb      	b.n	8005702 <__swbuf_r+0x1a>
 800576a:	4621      	mov	r1, r4
 800576c:	4628      	mov	r0, r5
 800576e:	f000 f81f 	bl	80057b0 <__swsetup_r>
 8005772:	2800      	cmp	r0, #0
 8005774:	d0cc      	beq.n	8005710 <__swbuf_r+0x28>
 8005776:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800577a:	4638      	mov	r0, r7
 800577c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800577e:	bf00      	nop
 8005780:	08005c78 	.word	0x08005c78
 8005784:	08005c98 	.word	0x08005c98
 8005788:	08005c58 	.word	0x08005c58

0800578c <_write_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4c07      	ldr	r4, [pc, #28]	; (80057ac <_write_r+0x20>)
 8005790:	4605      	mov	r5, r0
 8005792:	4608      	mov	r0, r1
 8005794:	4611      	mov	r1, r2
 8005796:	2200      	movs	r2, #0
 8005798:	6022      	str	r2, [r4, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	f7fb fa39 	bl	8000c12 <_write>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d102      	bne.n	80057aa <_write_r+0x1e>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	b103      	cbz	r3, 80057aa <_write_r+0x1e>
 80057a8:	602b      	str	r3, [r5, #0]
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	20000f78 	.word	0x20000f78

080057b0 <__swsetup_r>:
 80057b0:	4b32      	ldr	r3, [pc, #200]	; (800587c <__swsetup_r+0xcc>)
 80057b2:	b570      	push	{r4, r5, r6, lr}
 80057b4:	681d      	ldr	r5, [r3, #0]
 80057b6:	4606      	mov	r6, r0
 80057b8:	460c      	mov	r4, r1
 80057ba:	b125      	cbz	r5, 80057c6 <__swsetup_r+0x16>
 80057bc:	69ab      	ldr	r3, [r5, #24]
 80057be:	b913      	cbnz	r3, 80057c6 <__swsetup_r+0x16>
 80057c0:	4628      	mov	r0, r5
 80057c2:	f7ff fb91 	bl	8004ee8 <__sinit>
 80057c6:	4b2e      	ldr	r3, [pc, #184]	; (8005880 <__swsetup_r+0xd0>)
 80057c8:	429c      	cmp	r4, r3
 80057ca:	d10f      	bne.n	80057ec <__swsetup_r+0x3c>
 80057cc:	686c      	ldr	r4, [r5, #4]
 80057ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	0715      	lsls	r5, r2, #28
 80057d6:	d42c      	bmi.n	8005832 <__swsetup_r+0x82>
 80057d8:	06d0      	lsls	r0, r2, #27
 80057da:	d411      	bmi.n	8005800 <__swsetup_r+0x50>
 80057dc:	2209      	movs	r2, #9
 80057de:	6032      	str	r2, [r6, #0]
 80057e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057e4:	81a3      	strh	r3, [r4, #12]
 80057e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057ea:	e03e      	b.n	800586a <__swsetup_r+0xba>
 80057ec:	4b25      	ldr	r3, [pc, #148]	; (8005884 <__swsetup_r+0xd4>)
 80057ee:	429c      	cmp	r4, r3
 80057f0:	d101      	bne.n	80057f6 <__swsetup_r+0x46>
 80057f2:	68ac      	ldr	r4, [r5, #8]
 80057f4:	e7eb      	b.n	80057ce <__swsetup_r+0x1e>
 80057f6:	4b24      	ldr	r3, [pc, #144]	; (8005888 <__swsetup_r+0xd8>)
 80057f8:	429c      	cmp	r4, r3
 80057fa:	bf08      	it	eq
 80057fc:	68ec      	ldreq	r4, [r5, #12]
 80057fe:	e7e6      	b.n	80057ce <__swsetup_r+0x1e>
 8005800:	0751      	lsls	r1, r2, #29
 8005802:	d512      	bpl.n	800582a <__swsetup_r+0x7a>
 8005804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005806:	b141      	cbz	r1, 800581a <__swsetup_r+0x6a>
 8005808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800580c:	4299      	cmp	r1, r3
 800580e:	d002      	beq.n	8005816 <__swsetup_r+0x66>
 8005810:	4630      	mov	r0, r6
 8005812:	f000 f973 	bl	8005afc <_free_r>
 8005816:	2300      	movs	r3, #0
 8005818:	6363      	str	r3, [r4, #52]	; 0x34
 800581a:	89a3      	ldrh	r3, [r4, #12]
 800581c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005820:	81a3      	strh	r3, [r4, #12]
 8005822:	2300      	movs	r3, #0
 8005824:	6063      	str	r3, [r4, #4]
 8005826:	6923      	ldr	r3, [r4, #16]
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	89a3      	ldrh	r3, [r4, #12]
 800582c:	f043 0308 	orr.w	r3, r3, #8
 8005830:	81a3      	strh	r3, [r4, #12]
 8005832:	6923      	ldr	r3, [r4, #16]
 8005834:	b94b      	cbnz	r3, 800584a <__swsetup_r+0x9a>
 8005836:	89a3      	ldrh	r3, [r4, #12]
 8005838:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800583c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005840:	d003      	beq.n	800584a <__swsetup_r+0x9a>
 8005842:	4621      	mov	r1, r4
 8005844:	4630      	mov	r0, r6
 8005846:	f000 f917 	bl	8005a78 <__smakebuf_r>
 800584a:	89a2      	ldrh	r2, [r4, #12]
 800584c:	f012 0301 	ands.w	r3, r2, #1
 8005850:	d00c      	beq.n	800586c <__swsetup_r+0xbc>
 8005852:	2300      	movs	r3, #0
 8005854:	60a3      	str	r3, [r4, #8]
 8005856:	6963      	ldr	r3, [r4, #20]
 8005858:	425b      	negs	r3, r3
 800585a:	61a3      	str	r3, [r4, #24]
 800585c:	6923      	ldr	r3, [r4, #16]
 800585e:	b953      	cbnz	r3, 8005876 <__swsetup_r+0xc6>
 8005860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005864:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005868:	d1ba      	bne.n	80057e0 <__swsetup_r+0x30>
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	0792      	lsls	r2, r2, #30
 800586e:	bf58      	it	pl
 8005870:	6963      	ldrpl	r3, [r4, #20]
 8005872:	60a3      	str	r3, [r4, #8]
 8005874:	e7f2      	b.n	800585c <__swsetup_r+0xac>
 8005876:	2000      	movs	r0, #0
 8005878:	e7f7      	b.n	800586a <__swsetup_r+0xba>
 800587a:	bf00      	nop
 800587c:	2000008c 	.word	0x2000008c
 8005880:	08005c78 	.word	0x08005c78
 8005884:	08005c98 	.word	0x08005c98
 8005888:	08005c58 	.word	0x08005c58

0800588c <_close_r>:
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	4c06      	ldr	r4, [pc, #24]	; (80058a8 <_close_r+0x1c>)
 8005890:	2300      	movs	r3, #0
 8005892:	4605      	mov	r5, r0
 8005894:	4608      	mov	r0, r1
 8005896:	6023      	str	r3, [r4, #0]
 8005898:	f7fb f9d7 	bl	8000c4a <_close>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	d102      	bne.n	80058a6 <_close_r+0x1a>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	b103      	cbz	r3, 80058a6 <_close_r+0x1a>
 80058a4:	602b      	str	r3, [r5, #0]
 80058a6:	bd38      	pop	{r3, r4, r5, pc}
 80058a8:	20000f78 	.word	0x20000f78

080058ac <__sflush_r>:
 80058ac:	898a      	ldrh	r2, [r1, #12]
 80058ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b2:	4605      	mov	r5, r0
 80058b4:	0710      	lsls	r0, r2, #28
 80058b6:	460c      	mov	r4, r1
 80058b8:	d458      	bmi.n	800596c <__sflush_r+0xc0>
 80058ba:	684b      	ldr	r3, [r1, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	dc05      	bgt.n	80058cc <__sflush_r+0x20>
 80058c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	dc02      	bgt.n	80058cc <__sflush_r+0x20>
 80058c6:	2000      	movs	r0, #0
 80058c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058ce:	2e00      	cmp	r6, #0
 80058d0:	d0f9      	beq.n	80058c6 <__sflush_r+0x1a>
 80058d2:	2300      	movs	r3, #0
 80058d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058d8:	682f      	ldr	r7, [r5, #0]
 80058da:	6a21      	ldr	r1, [r4, #32]
 80058dc:	602b      	str	r3, [r5, #0]
 80058de:	d032      	beq.n	8005946 <__sflush_r+0x9a>
 80058e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058e2:	89a3      	ldrh	r3, [r4, #12]
 80058e4:	075a      	lsls	r2, r3, #29
 80058e6:	d505      	bpl.n	80058f4 <__sflush_r+0x48>
 80058e8:	6863      	ldr	r3, [r4, #4]
 80058ea:	1ac0      	subs	r0, r0, r3
 80058ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058ee:	b10b      	cbz	r3, 80058f4 <__sflush_r+0x48>
 80058f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058f2:	1ac0      	subs	r0, r0, r3
 80058f4:	2300      	movs	r3, #0
 80058f6:	4602      	mov	r2, r0
 80058f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058fa:	6a21      	ldr	r1, [r4, #32]
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b0      	blx	r6
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	d106      	bne.n	8005914 <__sflush_r+0x68>
 8005906:	6829      	ldr	r1, [r5, #0]
 8005908:	291d      	cmp	r1, #29
 800590a:	d848      	bhi.n	800599e <__sflush_r+0xf2>
 800590c:	4a29      	ldr	r2, [pc, #164]	; (80059b4 <__sflush_r+0x108>)
 800590e:	40ca      	lsrs	r2, r1
 8005910:	07d6      	lsls	r6, r2, #31
 8005912:	d544      	bpl.n	800599e <__sflush_r+0xf2>
 8005914:	2200      	movs	r2, #0
 8005916:	6062      	str	r2, [r4, #4]
 8005918:	04d9      	lsls	r1, r3, #19
 800591a:	6922      	ldr	r2, [r4, #16]
 800591c:	6022      	str	r2, [r4, #0]
 800591e:	d504      	bpl.n	800592a <__sflush_r+0x7e>
 8005920:	1c42      	adds	r2, r0, #1
 8005922:	d101      	bne.n	8005928 <__sflush_r+0x7c>
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	b903      	cbnz	r3, 800592a <__sflush_r+0x7e>
 8005928:	6560      	str	r0, [r4, #84]	; 0x54
 800592a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800592c:	602f      	str	r7, [r5, #0]
 800592e:	2900      	cmp	r1, #0
 8005930:	d0c9      	beq.n	80058c6 <__sflush_r+0x1a>
 8005932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005936:	4299      	cmp	r1, r3
 8005938:	d002      	beq.n	8005940 <__sflush_r+0x94>
 800593a:	4628      	mov	r0, r5
 800593c:	f000 f8de 	bl	8005afc <_free_r>
 8005940:	2000      	movs	r0, #0
 8005942:	6360      	str	r0, [r4, #52]	; 0x34
 8005944:	e7c0      	b.n	80058c8 <__sflush_r+0x1c>
 8005946:	2301      	movs	r3, #1
 8005948:	4628      	mov	r0, r5
 800594a:	47b0      	blx	r6
 800594c:	1c41      	adds	r1, r0, #1
 800594e:	d1c8      	bne.n	80058e2 <__sflush_r+0x36>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0c5      	beq.n	80058e2 <__sflush_r+0x36>
 8005956:	2b1d      	cmp	r3, #29
 8005958:	d001      	beq.n	800595e <__sflush_r+0xb2>
 800595a:	2b16      	cmp	r3, #22
 800595c:	d101      	bne.n	8005962 <__sflush_r+0xb6>
 800595e:	602f      	str	r7, [r5, #0]
 8005960:	e7b1      	b.n	80058c6 <__sflush_r+0x1a>
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005968:	81a3      	strh	r3, [r4, #12]
 800596a:	e7ad      	b.n	80058c8 <__sflush_r+0x1c>
 800596c:	690f      	ldr	r7, [r1, #16]
 800596e:	2f00      	cmp	r7, #0
 8005970:	d0a9      	beq.n	80058c6 <__sflush_r+0x1a>
 8005972:	0793      	lsls	r3, r2, #30
 8005974:	680e      	ldr	r6, [r1, #0]
 8005976:	bf08      	it	eq
 8005978:	694b      	ldreq	r3, [r1, #20]
 800597a:	600f      	str	r7, [r1, #0]
 800597c:	bf18      	it	ne
 800597e:	2300      	movne	r3, #0
 8005980:	eba6 0807 	sub.w	r8, r6, r7
 8005984:	608b      	str	r3, [r1, #8]
 8005986:	f1b8 0f00 	cmp.w	r8, #0
 800598a:	dd9c      	ble.n	80058c6 <__sflush_r+0x1a>
 800598c:	4643      	mov	r3, r8
 800598e:	463a      	mov	r2, r7
 8005990:	6a21      	ldr	r1, [r4, #32]
 8005992:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005994:	4628      	mov	r0, r5
 8005996:	47b0      	blx	r6
 8005998:	2800      	cmp	r0, #0
 800599a:	dc06      	bgt.n	80059aa <__sflush_r+0xfe>
 800599c:	89a3      	ldrh	r3, [r4, #12]
 800599e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059a2:	81a3      	strh	r3, [r4, #12]
 80059a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059a8:	e78e      	b.n	80058c8 <__sflush_r+0x1c>
 80059aa:	4407      	add	r7, r0
 80059ac:	eba8 0800 	sub.w	r8, r8, r0
 80059b0:	e7e9      	b.n	8005986 <__sflush_r+0xda>
 80059b2:	bf00      	nop
 80059b4:	20400001 	.word	0x20400001

080059b8 <_fflush_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	690b      	ldr	r3, [r1, #16]
 80059bc:	4605      	mov	r5, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	b1db      	cbz	r3, 80059fa <_fflush_r+0x42>
 80059c2:	b118      	cbz	r0, 80059cc <_fflush_r+0x14>
 80059c4:	6983      	ldr	r3, [r0, #24]
 80059c6:	b90b      	cbnz	r3, 80059cc <_fflush_r+0x14>
 80059c8:	f7ff fa8e 	bl	8004ee8 <__sinit>
 80059cc:	4b0c      	ldr	r3, [pc, #48]	; (8005a00 <_fflush_r+0x48>)
 80059ce:	429c      	cmp	r4, r3
 80059d0:	d109      	bne.n	80059e6 <_fflush_r+0x2e>
 80059d2:	686c      	ldr	r4, [r5, #4]
 80059d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d8:	b17b      	cbz	r3, 80059fa <_fflush_r+0x42>
 80059da:	4621      	mov	r1, r4
 80059dc:	4628      	mov	r0, r5
 80059de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059e2:	f7ff bf63 	b.w	80058ac <__sflush_r>
 80059e6:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <_fflush_r+0x4c>)
 80059e8:	429c      	cmp	r4, r3
 80059ea:	d101      	bne.n	80059f0 <_fflush_r+0x38>
 80059ec:	68ac      	ldr	r4, [r5, #8]
 80059ee:	e7f1      	b.n	80059d4 <_fflush_r+0x1c>
 80059f0:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <_fflush_r+0x50>)
 80059f2:	429c      	cmp	r4, r3
 80059f4:	bf08      	it	eq
 80059f6:	68ec      	ldreq	r4, [r5, #12]
 80059f8:	e7ec      	b.n	80059d4 <_fflush_r+0x1c>
 80059fa:	2000      	movs	r0, #0
 80059fc:	bd38      	pop	{r3, r4, r5, pc}
 80059fe:	bf00      	nop
 8005a00:	08005c78 	.word	0x08005c78
 8005a04:	08005c98 	.word	0x08005c98
 8005a08:	08005c58 	.word	0x08005c58

08005a0c <_lseek_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4c07      	ldr	r4, [pc, #28]	; (8005a2c <_lseek_r+0x20>)
 8005a10:	4605      	mov	r5, r0
 8005a12:	4608      	mov	r0, r1
 8005a14:	4611      	mov	r1, r2
 8005a16:	2200      	movs	r2, #0
 8005a18:	6022      	str	r2, [r4, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f7fb f93c 	bl	8000c98 <_lseek>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_lseek_r+0x1e>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_lseek_r+0x1e>
 8005a28:	602b      	str	r3, [r5, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	20000f78 	.word	0x20000f78

08005a30 <__swhatbuf_r>:
 8005a30:	b570      	push	{r4, r5, r6, lr}
 8005a32:	460e      	mov	r6, r1
 8005a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a38:	2900      	cmp	r1, #0
 8005a3a:	b096      	sub	sp, #88	; 0x58
 8005a3c:	4614      	mov	r4, r2
 8005a3e:	461d      	mov	r5, r3
 8005a40:	da07      	bge.n	8005a52 <__swhatbuf_r+0x22>
 8005a42:	2300      	movs	r3, #0
 8005a44:	602b      	str	r3, [r5, #0]
 8005a46:	89b3      	ldrh	r3, [r6, #12]
 8005a48:	061a      	lsls	r2, r3, #24
 8005a4a:	d410      	bmi.n	8005a6e <__swhatbuf_r+0x3e>
 8005a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a50:	e00e      	b.n	8005a70 <__swhatbuf_r+0x40>
 8005a52:	466a      	mov	r2, sp
 8005a54:	f000 f8b2 	bl	8005bbc <_fstat_r>
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	dbf2      	blt.n	8005a42 <__swhatbuf_r+0x12>
 8005a5c:	9a01      	ldr	r2, [sp, #4]
 8005a5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a66:	425a      	negs	r2, r3
 8005a68:	415a      	adcs	r2, r3
 8005a6a:	602a      	str	r2, [r5, #0]
 8005a6c:	e7ee      	b.n	8005a4c <__swhatbuf_r+0x1c>
 8005a6e:	2340      	movs	r3, #64	; 0x40
 8005a70:	2000      	movs	r0, #0
 8005a72:	6023      	str	r3, [r4, #0]
 8005a74:	b016      	add	sp, #88	; 0x58
 8005a76:	bd70      	pop	{r4, r5, r6, pc}

08005a78 <__smakebuf_r>:
 8005a78:	898b      	ldrh	r3, [r1, #12]
 8005a7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a7c:	079d      	lsls	r5, r3, #30
 8005a7e:	4606      	mov	r6, r0
 8005a80:	460c      	mov	r4, r1
 8005a82:	d507      	bpl.n	8005a94 <__smakebuf_r+0x1c>
 8005a84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	6123      	str	r3, [r4, #16]
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	6163      	str	r3, [r4, #20]
 8005a90:	b002      	add	sp, #8
 8005a92:	bd70      	pop	{r4, r5, r6, pc}
 8005a94:	ab01      	add	r3, sp, #4
 8005a96:	466a      	mov	r2, sp
 8005a98:	f7ff ffca 	bl	8005a30 <__swhatbuf_r>
 8005a9c:	9900      	ldr	r1, [sp, #0]
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	f7ff faab 	bl	8004ffc <_malloc_r>
 8005aa6:	b948      	cbnz	r0, 8005abc <__smakebuf_r+0x44>
 8005aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aac:	059a      	lsls	r2, r3, #22
 8005aae:	d4ef      	bmi.n	8005a90 <__smakebuf_r+0x18>
 8005ab0:	f023 0303 	bic.w	r3, r3, #3
 8005ab4:	f043 0302 	orr.w	r3, r3, #2
 8005ab8:	81a3      	strh	r3, [r4, #12]
 8005aba:	e7e3      	b.n	8005a84 <__smakebuf_r+0xc>
 8005abc:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <__smakebuf_r+0x7c>)
 8005abe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	6020      	str	r0, [r4, #0]
 8005ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac8:	81a3      	strh	r3, [r4, #12]
 8005aca:	9b00      	ldr	r3, [sp, #0]
 8005acc:	6163      	str	r3, [r4, #20]
 8005ace:	9b01      	ldr	r3, [sp, #4]
 8005ad0:	6120      	str	r0, [r4, #16]
 8005ad2:	b15b      	cbz	r3, 8005aec <__smakebuf_r+0x74>
 8005ad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ad8:	4630      	mov	r0, r6
 8005ada:	f000 f881 	bl	8005be0 <_isatty_r>
 8005ade:	b128      	cbz	r0, 8005aec <__smakebuf_r+0x74>
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	f023 0303 	bic.w	r3, r3, #3
 8005ae6:	f043 0301 	orr.w	r3, r3, #1
 8005aea:	81a3      	strh	r3, [r4, #12]
 8005aec:	89a3      	ldrh	r3, [r4, #12]
 8005aee:	431d      	orrs	r5, r3
 8005af0:	81a5      	strh	r5, [r4, #12]
 8005af2:	e7cd      	b.n	8005a90 <__smakebuf_r+0x18>
 8005af4:	08004eb1 	.word	0x08004eb1

08005af8 <__malloc_lock>:
 8005af8:	4770      	bx	lr

08005afa <__malloc_unlock>:
 8005afa:	4770      	bx	lr

08005afc <_free_r>:
 8005afc:	b538      	push	{r3, r4, r5, lr}
 8005afe:	4605      	mov	r5, r0
 8005b00:	2900      	cmp	r1, #0
 8005b02:	d045      	beq.n	8005b90 <_free_r+0x94>
 8005b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b08:	1f0c      	subs	r4, r1, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	bfb8      	it	lt
 8005b0e:	18e4      	addlt	r4, r4, r3
 8005b10:	f7ff fff2 	bl	8005af8 <__malloc_lock>
 8005b14:	4a1f      	ldr	r2, [pc, #124]	; (8005b94 <_free_r+0x98>)
 8005b16:	6813      	ldr	r3, [r2, #0]
 8005b18:	4610      	mov	r0, r2
 8005b1a:	b933      	cbnz	r3, 8005b2a <_free_r+0x2e>
 8005b1c:	6063      	str	r3, [r4, #4]
 8005b1e:	6014      	str	r4, [r2, #0]
 8005b20:	4628      	mov	r0, r5
 8005b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b26:	f7ff bfe8 	b.w	8005afa <__malloc_unlock>
 8005b2a:	42a3      	cmp	r3, r4
 8005b2c:	d90c      	bls.n	8005b48 <_free_r+0x4c>
 8005b2e:	6821      	ldr	r1, [r4, #0]
 8005b30:	1862      	adds	r2, r4, r1
 8005b32:	4293      	cmp	r3, r2
 8005b34:	bf04      	itt	eq
 8005b36:	681a      	ldreq	r2, [r3, #0]
 8005b38:	685b      	ldreq	r3, [r3, #4]
 8005b3a:	6063      	str	r3, [r4, #4]
 8005b3c:	bf04      	itt	eq
 8005b3e:	1852      	addeq	r2, r2, r1
 8005b40:	6022      	streq	r2, [r4, #0]
 8005b42:	6004      	str	r4, [r0, #0]
 8005b44:	e7ec      	b.n	8005b20 <_free_r+0x24>
 8005b46:	4613      	mov	r3, r2
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	b10a      	cbz	r2, 8005b50 <_free_r+0x54>
 8005b4c:	42a2      	cmp	r2, r4
 8005b4e:	d9fa      	bls.n	8005b46 <_free_r+0x4a>
 8005b50:	6819      	ldr	r1, [r3, #0]
 8005b52:	1858      	adds	r0, r3, r1
 8005b54:	42a0      	cmp	r0, r4
 8005b56:	d10b      	bne.n	8005b70 <_free_r+0x74>
 8005b58:	6820      	ldr	r0, [r4, #0]
 8005b5a:	4401      	add	r1, r0
 8005b5c:	1858      	adds	r0, r3, r1
 8005b5e:	4282      	cmp	r2, r0
 8005b60:	6019      	str	r1, [r3, #0]
 8005b62:	d1dd      	bne.n	8005b20 <_free_r+0x24>
 8005b64:	6810      	ldr	r0, [r2, #0]
 8005b66:	6852      	ldr	r2, [r2, #4]
 8005b68:	605a      	str	r2, [r3, #4]
 8005b6a:	4401      	add	r1, r0
 8005b6c:	6019      	str	r1, [r3, #0]
 8005b6e:	e7d7      	b.n	8005b20 <_free_r+0x24>
 8005b70:	d902      	bls.n	8005b78 <_free_r+0x7c>
 8005b72:	230c      	movs	r3, #12
 8005b74:	602b      	str	r3, [r5, #0]
 8005b76:	e7d3      	b.n	8005b20 <_free_r+0x24>
 8005b78:	6820      	ldr	r0, [r4, #0]
 8005b7a:	1821      	adds	r1, r4, r0
 8005b7c:	428a      	cmp	r2, r1
 8005b7e:	bf04      	itt	eq
 8005b80:	6811      	ldreq	r1, [r2, #0]
 8005b82:	6852      	ldreq	r2, [r2, #4]
 8005b84:	6062      	str	r2, [r4, #4]
 8005b86:	bf04      	itt	eq
 8005b88:	1809      	addeq	r1, r1, r0
 8005b8a:	6021      	streq	r1, [r4, #0]
 8005b8c:	605c      	str	r4, [r3, #4]
 8005b8e:	e7c7      	b.n	8005b20 <_free_r+0x24>
 8005b90:	bd38      	pop	{r3, r4, r5, pc}
 8005b92:	bf00      	nop
 8005b94:	20000114 	.word	0x20000114

08005b98 <_read_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4c07      	ldr	r4, [pc, #28]	; (8005bb8 <_read_r+0x20>)
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	4608      	mov	r0, r1
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	6022      	str	r2, [r4, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f7fb f816 	bl	8000bd8 <_read>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d102      	bne.n	8005bb6 <_read_r+0x1e>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	b103      	cbz	r3, 8005bb6 <_read_r+0x1e>
 8005bb4:	602b      	str	r3, [r5, #0]
 8005bb6:	bd38      	pop	{r3, r4, r5, pc}
 8005bb8:	20000f78 	.word	0x20000f78

08005bbc <_fstat_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	4c07      	ldr	r4, [pc, #28]	; (8005bdc <_fstat_r+0x20>)
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	4608      	mov	r0, r1
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	f7fb f84a 	bl	8000c62 <_fstat>
 8005bce:	1c43      	adds	r3, r0, #1
 8005bd0:	d102      	bne.n	8005bd8 <_fstat_r+0x1c>
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	b103      	cbz	r3, 8005bd8 <_fstat_r+0x1c>
 8005bd6:	602b      	str	r3, [r5, #0]
 8005bd8:	bd38      	pop	{r3, r4, r5, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000f78 	.word	0x20000f78

08005be0 <_isatty_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	4c06      	ldr	r4, [pc, #24]	; (8005bfc <_isatty_r+0x1c>)
 8005be4:	2300      	movs	r3, #0
 8005be6:	4605      	mov	r5, r0
 8005be8:	4608      	mov	r0, r1
 8005bea:	6023      	str	r3, [r4, #0]
 8005bec:	f7fb f849 	bl	8000c82 <_isatty>
 8005bf0:	1c43      	adds	r3, r0, #1
 8005bf2:	d102      	bne.n	8005bfa <_isatty_r+0x1a>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	b103      	cbz	r3, 8005bfa <_isatty_r+0x1a>
 8005bf8:	602b      	str	r3, [r5, #0]
 8005bfa:	bd38      	pop	{r3, r4, r5, pc}
 8005bfc:	20000f78 	.word	0x20000f78

08005c00 <_init>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	bf00      	nop
 8005c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c06:	bc08      	pop	{r3}
 8005c08:	469e      	mov	lr, r3
 8005c0a:	4770      	bx	lr

08005c0c <_fini>:
 8005c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0e:	bf00      	nop
 8005c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c12:	bc08      	pop	{r3}
 8005c14:	469e      	mov	lr, r3
 8005c16:	4770      	bx	lr
