
BNIRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005970  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08005b10  08005b10  00015b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c64  08005c64  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005c64  08005c64  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c64  08005c64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c64  08005c64  00015c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c68  08005c68  00015c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000070  08005cdc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08005cdc  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010411  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000226e  00000000  00000000  000304b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  00032720  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e30  00000000  00000000  00033668  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f32d  00000000  00000000  00034498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c599  00000000  00000000  000537c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9ed4  00000000  00000000  0005fd5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00119c32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004750  00000000  00000000  00119cb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005af8 	.word	0x08005af8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005af8 	.word	0x08005af8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b0a0      	sub	sp, #128	; 0x80
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fced 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f887 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 fa31 	bl	80006f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000292:	f000 f9fd 	bl	8000690 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000296:	f000 f9cb 	bl	8000630 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800029a:	f000 f993 	bl	80005c4 <MX_TIM6_Init>
  MX_ADC2_Init();
 800029e:	f000 f8e3 	bl	8000468 <MX_ADC2_Init>
  MX_TIM3_Init();
 80002a2:	f000 f941 	bl	8000528 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //binary sequence to be written in the BSRR register of the GPIOA port pin PA0
  uint32_t DIBS_sequence[] =
 80002a6:	4a21      	ldr	r2, [pc, #132]	; (800032c <main+0xac>)
 80002a8:	463b      	mov	r3, r7
 80002aa:	4611      	mov	r1, r2
 80002ac:	2280      	movs	r2, #128	; 0x80
 80002ae:	4618      	mov	r0, r3
 80002b0:	f004 fd2a 	bl	8004d08 <memcpy>
  {1,1,1,65536,65536,65536,65536,65536,1,1,65536,1,1,65536,1,65536,1,1,1,65536,65536,65536,65536,65536,1,1,65536,1,1,65536,1,65536}; // 1 -> High & 65536 -> Low

  HAL_TIM_Base_Init(&htim6);
 80002b4:	481e      	ldr	r0, [pc, #120]	; (8000330 <main+0xb0>)
 80002b6:	f003 fdcb 	bl	8003e50 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim6);
 80002ba:	481d      	ldr	r0, [pc, #116]	; (8000330 <main+0xb0>)
 80002bc:	f003 fdf4 	bl	8003ea8 <HAL_TIM_Base_Start>

  hdma_tim6_up.Instance = DMA1_Channel3;
 80002c0:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <main+0xb4>)
 80002c2:	4a1d      	ldr	r2, [pc, #116]	; (8000338 <main+0xb8>)
 80002c4:	601a      	str	r2, [r3, #0]
  hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80002c6:	4b1b      	ldr	r3, [pc, #108]	; (8000334 <main+0xb4>)
 80002c8:	2210      	movs	r2, #16
 80002ca:	605a      	str	r2, [r3, #4]
  hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80002cc:	4b19      	ldr	r3, [pc, #100]	; (8000334 <main+0xb4>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 80002d2:	4b18      	ldr	r3, [pc, #96]	; (8000334 <main+0xb4>)
 80002d4:	2280      	movs	r2, #128	; 0x80
 80002d6:	60da      	str	r2, [r3, #12]
  hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80002d8:	4b16      	ldr	r3, [pc, #88]	; (8000334 <main+0xb4>)
 80002da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002de:	611a      	str	r2, [r3, #16]
  hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80002e0:	4b14      	ldr	r3, [pc, #80]	; (8000334 <main+0xb4>)
 80002e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80002e6:	615a      	str	r2, [r3, #20]
  hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 80002e8:	4b12      	ldr	r3, [pc, #72]	; (8000334 <main+0xb4>)
 80002ea:	2220      	movs	r2, #32
 80002ec:	619a      	str	r2, [r3, #24]
  hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 80002ee:	4b11      	ldr	r3, [pc, #68]	; (8000334 <main+0xb4>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	61da      	str	r2, [r3, #28]
  HAL_DMA_Init(&hdma_tim6_up);
 80002f4:	480f      	ldr	r0, [pc, #60]	; (8000334 <main+0xb4>)
 80002f6:	f001 fe70 	bl	8001fda <HAL_DMA_Init>

  HAL_DMA_Start(&hdma_tim6_up, (uint32_t)DIBS_sequence, (uint32_t)&GPIOA->BSRR, 32); //initialization of data transfer in the DIBS_sequence buffer to the GPIOA periphery
 80002fa:	4639      	mov	r1, r7
 80002fc:	2320      	movs	r3, #32
 80002fe:	4a0f      	ldr	r2, [pc, #60]	; (800033c <main+0xbc>)
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <main+0xb4>)
 8000302:	f001 feb1 	bl	8002068 <HAL_DMA_Start>
  __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8000306:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <main+0xb0>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	68da      	ldr	r2, [r3, #12]
 800030c:	4b08      	ldr	r3, [pc, #32]	; (8000330 <main+0xb0>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000314:	60da      	str	r2, [r3, #12]

  HAL_TIM_Base_Start(&htim3);
 8000316:	480a      	ldr	r0, [pc, #40]	; (8000340 <main+0xc0>)
 8000318:	f003 fdc6 	bl	8003ea8 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC_BIA, 320);
 800031c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000320:	4908      	ldr	r1, [pc, #32]	; (8000344 <main+0xc4>)
 8000322:	4809      	ldr	r0, [pc, #36]	; (8000348 <main+0xc8>)
 8000324:	f000 ff12 	bl	800114c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000328:	e7fe      	b.n	8000328 <main+0xa8>
 800032a:	bf00      	nop
 800032c:	08005b10 	.word	0x08005b10
 8000330:	2000046c 	.word	0x2000046c
 8000334:	20000428 	.word	0x20000428
 8000338:	40020030 	.word	0x40020030
 800033c:	48000018 	.word	0x48000018
 8000340:	20000168 	.word	0x20000168
 8000344:	200001a8 	.word	0x200001a8
 8000348:	20000118 	.word	0x20000118

0800034c <HAL_ADC_ConvCpltCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc2);
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <HAL_ADC_ConvCpltCallback+0x40>)
 8000356:	f001 f815 	bl	8001384 <HAL_ADC_Stop_DMA>
	HAL_DMA_Abort(&hdma_tim6_up);
 800035a:	480d      	ldr	r0, [pc, #52]	; (8000390 <HAL_ADC_ConvCpltCallback+0x44>)
 800035c:	f001 ff25 	bl	80021aa <HAL_DMA_Abort>

	for(int i = 0;i < 320;i++)
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	e00a      	b.n	800037c <HAL_ADC_ConvCpltCallback+0x30>
		{
			printf("%i,",ADC_BIA[i]);
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <HAL_ADC_ConvCpltCallback+0x48>)
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800036e:	4619      	mov	r1, r3
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000372:	f004 fcdd 	bl	8004d30 <iprintf>
	for(int i = 0;i < 320;i++)
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	3301      	adds	r3, #1
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000382:	dbf0      	blt.n	8000366 <HAL_ADC_ConvCpltCallback+0x1a>
		}
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000118 	.word	0x20000118
 8000390:	20000428 	.word	0x20000428
 8000394:	200001a8 	.word	0x200001a8
 8000398:	08005b90 	.word	0x08005b90

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b0a6      	sub	sp, #152	; 0x98
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003a6:	2228      	movs	r2, #40	; 0x28
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f004 fcb7 	bl	8004d1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2258      	movs	r2, #88	; 0x58
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f004 fca9 	bl	8004d1e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003cc:	2302      	movs	r3, #2
 80003ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d0:	2301      	movs	r3, #1
 80003d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d4:	2310      	movs	r3, #16
 80003d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003da:	2302      	movs	r3, #2
 80003dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003fa:	4618      	mov	r0, r3
 80003fc:	f002 f9be 	bl	800277c <HAL_RCC_OscConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000406:	f000 f9d1 	bl	80007ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040a:	230f      	movs	r3, #15
 800040c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040e:	2302      	movs	r3, #2
 8000410:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800041a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000420:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000424:	2102      	movs	r1, #2
 8000426:	4618      	mov	r0, r3
 8000428:	f003 f8be 	bl	80035a8 <HAL_RCC_ClockConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000432:	f000 f9bb 	bl	80007ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC12
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <SystemClock_Config+0xc8>)
 8000438:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800043e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000442:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000444:	2300      	movs	r3, #0
 8000446:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	4618      	mov	r0, r3
 800044c:	f003 fae2 	bl	8003a14 <HAL_RCCEx_PeriphCLKConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000456:	f000 f9a9 	bl	80007ac <Error_Handler>
  }
}
 800045a:	bf00      	nop
 800045c:	3798      	adds	r7, #152	; 0x98
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	00200084 	.word	0x00200084

08000468 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800046e:	463b      	mov	r3, r7
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
 800047a:	611a      	str	r2, [r3, #16]
 800047c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800047e:	4b28      	ldr	r3, [pc, #160]	; (8000520 <MX_ADC2_Init+0xb8>)
 8000480:	4a28      	ldr	r2, [pc, #160]	; (8000524 <MX_ADC2_Init+0xbc>)
 8000482:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000484:	4b26      	ldr	r3, [pc, #152]	; (8000520 <MX_ADC2_Init+0xb8>)
 8000486:	2200      	movs	r2, #0
 8000488:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800048a:	4b25      	ldr	r3, [pc, #148]	; (8000520 <MX_ADC2_Init+0xb8>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000490:	4b23      	ldr	r3, [pc, #140]	; (8000520 <MX_ADC2_Init+0xb8>)
 8000492:	2200      	movs	r2, #0
 8000494:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000496:	4b22      	ldr	r3, [pc, #136]	; (8000520 <MX_ADC2_Init+0xb8>)
 8000498:	2200      	movs	r2, #0
 800049a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800049c:	4b20      	ldr	r3, [pc, #128]	; (8000520 <MX_ADC2_Init+0xb8>)
 800049e:	2200      	movs	r2, #0
 80004a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004a4:	4b1e      	ldr	r3, [pc, #120]	; (8000520 <MX_ADC2_Init+0xb8>)
 80004a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80004ac:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <MX_ADC2_Init+0xb8>)
 80004ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004b4:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <MX_ADC2_Init+0xb8>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80004ba:	4b19      	ldr	r3, [pc, #100]	; (8000520 <MX_ADC2_Init+0xb8>)
 80004bc:	2201      	movs	r2, #1
 80004be:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80004c0:	4b17      	ldr	r3, [pc, #92]	; (8000520 <MX_ADC2_Init+0xb8>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <MX_ADC2_Init+0xb8>)
 80004ca:	2204      	movs	r2, #4
 80004cc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80004ce:	4b14      	ldr	r3, [pc, #80]	; (8000520 <MX_ADC2_Init+0xb8>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <MX_ADC2_Init+0xb8>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004da:	4811      	ldr	r0, [pc, #68]	; (8000520 <MX_ADC2_Init+0xb8>)
 80004dc:	f000 fc3c 	bl	8000d58 <HAL_ADC_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 80004e6:	f000 f961 	bl	80007ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004ea:	2303      	movs	r3, #3
 80004ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ee:	2301      	movs	r3, #1
 80004f0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000502:	463b      	mov	r3, r7
 8000504:	4619      	mov	r1, r3
 8000506:	4806      	ldr	r0, [pc, #24]	; (8000520 <MX_ADC2_Init+0xb8>)
 8000508:	f000 ff98 	bl	800143c <HAL_ADC_ConfigChannel>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8000512:	f000 f94b 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	3718      	adds	r7, #24
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000118 	.word	0x20000118
 8000524:	50000100 	.word	0x50000100

08000528 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000546:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <MX_TIM3_Init+0x94>)
 8000548:	4a1d      	ldr	r2, [pc, #116]	; (80005c0 <MX_TIM3_Init+0x98>)
 800054a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1799;
 800054c:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <MX_TIM3_Init+0x94>)
 800054e:	f240 7207 	movw	r2, #1799	; 0x707
 8000552:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <MX_TIM3_Init+0x94>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2;
 800055a:	4b18      	ldr	r3, [pc, #96]	; (80005bc <MX_TIM3_Init+0x94>)
 800055c:	2202      	movs	r2, #2
 800055e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000560:	4b16      	ldr	r3, [pc, #88]	; (80005bc <MX_TIM3_Init+0x94>)
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <MX_TIM3_Init+0x94>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800056c:	4813      	ldr	r0, [pc, #76]	; (80005bc <MX_TIM3_Init+0x94>)
 800056e:	f003 fc6f 	bl	8003e50 <HAL_TIM_Base_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000578:	f000 f918 	bl	80007ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800057c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000580:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	4619      	mov	r1, r3
 8000588:	480c      	ldr	r0, [pc, #48]	; (80005bc <MX_TIM3_Init+0x94>)
 800058a:	f003 fcb7 	bl	8003efc <HAL_TIM_ConfigClockSource>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000594:	f000 f90a 	bl	80007ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000598:	2320      	movs	r3, #32
 800059a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4619      	mov	r1, r3
 80005a4:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_TIM3_Init+0x94>)
 80005a6:	f003 fe9b 	bl	80042e0 <HAL_TIMEx_MasterConfigSynchronization>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80005b0:	f000 f8fc 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005b4:	bf00      	nop
 80005b6:	3720      	adds	r7, #32
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000168 	.word	0x20000168
 80005c0:	40000400 	.word	0x40000400

080005c4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_TIM6_Init+0x64>)
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <MX_TIM6_Init+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17999;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_TIM6_Init+0x64>)
 80005dc:	f244 624f 	movw	r2, #17999	; 0x464f
 80005e0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_TIM6_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_TIM6_Init+0x64>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_TIM6_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005f4:	480c      	ldr	r0, [pc, #48]	; (8000628 <MX_TIM6_Init+0x64>)
 80005f6:	f003 fc2b 	bl	8003e50 <HAL_TIM_Base_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000600:	f000 f8d4 	bl	80007ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4619      	mov	r1, r3
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_TIM6_Init+0x64>)
 8000612:	f003 fe65 	bl	80042e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800061c:	f000 f8c6 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000046c 	.word	0x2000046c
 800062c:	40001000 	.word	0x40001000

08000630 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_USART3_UART_Init+0x58>)
 8000636:	4a15      	ldr	r2, [pc, #84]	; (800068c <MX_USART3_UART_Init+0x5c>)
 8000638:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_USART3_UART_Init+0x58>)
 800063c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000640:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_USART3_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_USART3_UART_Init+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_USART3_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_USART3_UART_Init+0x58>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_USART3_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_USART3_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_USART3_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_USART3_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_USART3_UART_Init+0x58>)
 8000674:	f003 fec0 	bl	80043f8 <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800067e:	f000 f895 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000098 	.word	0x20000098
 800068c:	40004800 	.word	0x40004800

08000690 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_DMA_Init+0x60>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <MX_DMA_Init+0x60>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6153      	str	r3, [r2, #20]
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_DMA_Init+0x60>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_DMA_Init+0x60>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <MX_DMA_Init+0x60>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_DMA_Init+0x60>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	200d      	movs	r0, #13
 80006cc:	f001 fc4f 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80006d0:	200d      	movs	r0, #13
 80006d2:	f001 fc68 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2038      	movs	r0, #56	; 0x38
 80006dc:	f001 fc47 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80006e0:	2038      	movs	r0, #56	; 0x38
 80006e2:	f001 fc60 	bl	8001fa6 <HAL_NVIC_EnableIRQ>

}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800070a:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_GPIO_Init+0x90>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a1d      	ldr	r2, [pc, #116]	; (8000784 <MX_GPIO_Init+0x90>)
 8000710:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_GPIO_Init+0x90>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_GPIO_Init+0x90>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <MX_GPIO_Init+0x90>)
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_GPIO_Init+0x90>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_GPIO_Init+0x90>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a11      	ldr	r2, [pc, #68]	; (8000784 <MX_GPIO_Init+0x90>)
 8000740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_GPIO_Init+0x90>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2101      	movs	r1, #1
 8000756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075a:	f001 fff7 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800075e:	2301      	movs	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f001 fe5e 	bl	8002438 <HAL_GPIO_Init>

}
 800077c:	bf00      	nop
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000

08000788 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000790:	1d39      	adds	r1, r7, #4
 8000792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000796:	2201      	movs	r2, #1
 8000798:	4803      	ldr	r0, [pc, #12]	; (80007a8 <__io_putchar+0x20>)
 800079a:	f003 fe7b 	bl	8004494 <HAL_UART_Transmit>

  return ch;
 800079e:	687b      	ldr	r3, [r7, #4]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000098 	.word	0x20000098

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_MspInit+0x44>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <HAL_MspInit+0x44>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6193      	str	r3, [r2, #24]
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <HAL_MspInit+0x44>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x44>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x44>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x44>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a29      	ldr	r2, [pc, #164]	; (80008c8 <HAL_ADC_MspInit+0xc4>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d14c      	bne.n	80008c0 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <HAL_ADC_MspInit+0xc8>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a28      	ldr	r2, [pc, #160]	; (80008cc <HAL_ADC_MspInit+0xc8>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6153      	str	r3, [r2, #20]
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <HAL_ADC_MspInit+0xc8>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <HAL_ADC_MspInit+0xc8>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	4a22      	ldr	r2, [pc, #136]	; (80008cc <HAL_ADC_MspInit+0xc8>)
 8000844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000848:	6153      	str	r3, [r2, #20]
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <HAL_ADC_MspInit+0xc8>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PA6     ------> ADC2_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085a:	2303      	movs	r3, #3
 800085c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086c:	f001 fde4 	bl	8002438 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_ADC_MspInit+0xcc>)
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <HAL_ADC_MspInit+0xd0>)
 8000874:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <HAL_ADC_MspInit+0xcc>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_ADC_MspInit+0xcc>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <HAL_ADC_MspInit+0xcc>)
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_ADC_MspInit+0xcc>)
 800088a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800088e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_ADC_MspInit+0xcc>)
 8000892:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000896:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000898:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_ADC_MspInit+0xcc>)
 800089a:	2220      	movs	r2, #32
 800089c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_ADC_MspInit+0xcc>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80008a4:	480a      	ldr	r0, [pc, #40]	; (80008d0 <HAL_ADC_MspInit+0xcc>)
 80008a6:	f001 fb98 	bl	8001fda <HAL_DMA_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80008b0:	f7ff ff7c 	bl	80007ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <HAL_ADC_MspInit+0xcc>)
 80008b8:	639a      	str	r2, [r3, #56]	; 0x38
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <HAL_ADC_MspInit+0xcc>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	50000100 	.word	0x50000100
 80008cc:	40021000 	.word	0x40021000
 80008d0:	200004ac 	.word	0x200004ac
 80008d4:	40020408 	.word	0x40020408

080008d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a29      	ldr	r2, [pc, #164]	; (800098c <HAL_TIM_Base_MspInit+0xb4>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d10c      	bne.n	8000904 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008ea:	4b29      	ldr	r3, [pc, #164]	; (8000990 <HAL_TIM_Base_MspInit+0xb8>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a28      	ldr	r2, [pc, #160]	; (8000990 <HAL_TIM_Base_MspInit+0xb8>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b26      	ldr	r3, [pc, #152]	; (8000990 <HAL_TIM_Base_MspInit+0xb8>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000902:	e03e      	b.n	8000982 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM6)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a22      	ldr	r2, [pc, #136]	; (8000994 <HAL_TIM_Base_MspInit+0xbc>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d139      	bne.n	8000982 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <HAL_TIM_Base_MspInit+0xb8>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <HAL_TIM_Base_MspInit+0xb8>)
 8000914:	f043 0310 	orr.w	r3, r3, #16
 8000918:	61d3      	str	r3, [r2, #28]
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <HAL_TIM_Base_MspInit+0xb8>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f003 0310 	and.w	r3, r3, #16
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Channel3;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 8000928:	4a1c      	ldr	r2, [pc, #112]	; (800099c <HAL_TIM_Base_MspInit+0xc4>)
 800092a:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 8000940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000944:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 8000948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800094c:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 8000950:	2220      	movs	r2, #32
 8000952:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 800095a:	480f      	ldr	r0, [pc, #60]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 800095c:	f001 fb3d 	bl	8001fda <HAL_DMA_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 8000966:	f7ff ff21 	bl	80007ac <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <HAL_TIM_Base_MspInit+0xc8>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <HAL_TIM_Base_MspInit+0xc8>)
 8000970:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000974:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 800097a:	621a      	str	r2, [r3, #32]
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40000400 	.word	0x40000400
 8000990:	40021000 	.word	0x40021000
 8000994:	40001000 	.word	0x40001000
 8000998:	20000428 	.word	0x20000428
 800099c:	40020030 	.word	0x40020030
 80009a0:	40010000 	.word	0x40010000

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_UART_MspInit+0x7c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d128      	bne.n	8000a18 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d0:	61d3      	str	r3, [r2, #28]
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_UART_MspInit+0x84>)
 8000a14:	f001 fd10 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40004800 	.word	0x40004800
 8000a24:	40021000 	.word	0x40021000
 8000a28:	48000c00 	.word	0x48000c00

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f936 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <DMA1_Channel3_IRQHandler+0x10>)
 8000a8e:	f001 fbc5 	bl	800221c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000428 	.word	0x20000428

08000a9c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <DMA2_Channel1_IRQHandler+0x10>)
 8000aa2:	f001 fbbb 	bl	800221c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200004ac 	.word	0x200004ac

08000ab0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	e00a      	b.n	8000ad8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ac2:	f3af 8000 	nop.w
 8000ac6:	4601      	mov	r1, r0
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	60ba      	str	r2, [r7, #8]
 8000ace:	b2ca      	uxtb	r2, r1
 8000ad0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	dbf0      	blt.n	8000ac2 <_read+0x12>
	}

return len;
 8000ae0:	687b      	ldr	r3, [r7, #4]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e009      	b.n	8000b10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fe3f 	bl	8000788 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf1      	blt.n	8000afc <_write+0x12>
	}
	return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_close>:

int _close(int file)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
	return -1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b4a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_isatty>:

int _isatty(int file)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
	return 1;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <_sbrk+0x50>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x16>
		heap_end = &end;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <_sbrk+0x50>)
 8000b9e:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <_sbrk+0x54>)
 8000ba0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <_sbrk+0x50>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <_sbrk+0x50>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	466a      	mov	r2, sp
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d907      	bls.n	8000bc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000bb6:	f004 f87d 	bl	8004cb4 <__errno>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	230c      	movs	r3, #12
 8000bbe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bc4:	e006      	b.n	8000bd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <_sbrk+0x50>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a03      	ldr	r2, [pc, #12]	; (8000bdc <_sbrk+0x50>)
 8000bd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2000008c 	.word	0x2000008c
 8000be0:	200004f8 	.word	0x200004f8

08000be4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <SystemInit+0x28>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <SystemInit+0x28>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SystemInit+0x28>)
 8000bfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bfe:	609a      	str	r2, [r3, #8]
#endif
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c16:	e003      	b.n	8000c20 <LoopCopyDataInit>

08000c18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c1e:	3104      	adds	r1, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c20:	480b      	ldr	r0, [pc, #44]	; (8000c50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c28:	d3f6      	bcc.n	8000c18 <CopyDataInit>
	ldr	r2, =_sbss
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c2c:	e002      	b.n	8000c34 <LoopFillZerobss>

08000c2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c30:	f842 3b04 	str.w	r3, [r2], #4

08000c34 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <LoopForever+0x16>)
	cmp	r2, r3
 8000c36:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c38:	d3f9      	bcc.n	8000c2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c3a:	f7ff ffd3 	bl	8000be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f004 f83f 	bl	8004cc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c42:	f7ff fb1d 	bl	8000280 <main>

08000c46 <LoopForever>:

LoopForever:
    b LoopForever
 8000c46:	e7fe      	b.n	8000c46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c48:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000c4c:	08005c6c 	.word	0x08005c6c
	ldr	r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c54:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000c58:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000c5c:	200004f8 	.word	0x200004f8

08000c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_2_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_Init+0x28>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_Init+0x28>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f001 f96f 	bl	8001f58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 f808 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c80:	f7ff fd9c 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40022000 	.word	0x40022000

08000c90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x54>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_InitTick+0x58>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 f987 	bl	8001fc2 <HAL_SYSTICK_Config>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00e      	b.n	8000cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d80a      	bhi.n	8000cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f001 f94f 	bl	8001f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_InitTick+0x5c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000004 	.word	0x20000004

08000cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	200004f0 	.word	0x200004f0

08000d18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200004f0 	.word	0x200004f0

08000d30 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b09a      	sub	sp, #104	; 0x68
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e1e3      	b.n	8001140 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d176      	bne.n	8000e78 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d152      	bne.n	8000e38 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fd29 	bl	8000804 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d13b      	bne.n	8000e38 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f000 feeb 	bl	8001b9c <ADC_Disable>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	f003 0310 	and.w	r3, r3, #16
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d12f      	bne.n	8000e38 <HAL_ADC_Init+0xe0>
 8000dd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d12b      	bne.n	8000e38 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000de8:	f023 0302 	bic.w	r3, r3, #2
 8000dec:	f043 0202 	orr.w	r2, r3, #2
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e02:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e12:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e14:	4b92      	ldr	r3, [pc, #584]	; (8001060 <HAL_ADC_Init+0x308>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a92      	ldr	r2, [pc, #584]	; (8001064 <HAL_ADC_Init+0x30c>)
 8000e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1e:	0c9a      	lsrs	r2, r3, #18
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e2a:	e002      	b.n	8000e32 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1f9      	bne.n	8000e2c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d007      	beq.n	8000e56 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e54:	d110      	bne.n	8000e78 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f023 0312 	bic.w	r3, r3, #18
 8000e5e:	f043 0210 	orr.w	r2, r3, #16
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f043 0201 	orr.w	r2, r3, #1
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f040 8150 	bne.w	8001126 <HAL_ADC_Init+0x3ce>
 8000e86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f040 814b 	bne.w	8001126 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f040 8143 	bne.w	8001126 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ea8:	f043 0202 	orr.w	r2, r3, #2
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eb8:	d004      	beq.n	8000ec4 <HAL_ADC_Init+0x16c>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a6a      	ldr	r2, [pc, #424]	; (8001068 <HAL_ADC_Init+0x310>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d101      	bne.n	8000ec8 <HAL_ADC_Init+0x170>
 8000ec4:	4b69      	ldr	r3, [pc, #420]	; (800106c <HAL_ADC_Init+0x314>)
 8000ec6:	e000      	b.n	8000eca <HAL_ADC_Init+0x172>
 8000ec8:	4b69      	ldr	r3, [pc, #420]	; (8001070 <HAL_ADC_Init+0x318>)
 8000eca:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ed4:	d102      	bne.n	8000edc <HAL_ADC_Init+0x184>
 8000ed6:	4b64      	ldr	r3, [pc, #400]	; (8001068 <HAL_ADC_Init+0x310>)
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	e01a      	b.n	8000f12 <HAL_ADC_Init+0x1ba>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a61      	ldr	r2, [pc, #388]	; (8001068 <HAL_ADC_Init+0x310>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d103      	bne.n	8000eee <HAL_ADC_Init+0x196>
 8000ee6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	e011      	b.n	8000f12 <HAL_ADC_Init+0x1ba>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a60      	ldr	r2, [pc, #384]	; (8001074 <HAL_ADC_Init+0x31c>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d102      	bne.n	8000efe <HAL_ADC_Init+0x1a6>
 8000ef8:	4b5f      	ldr	r3, [pc, #380]	; (8001078 <HAL_ADC_Init+0x320>)
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e009      	b.n	8000f12 <HAL_ADC_Init+0x1ba>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a5d      	ldr	r2, [pc, #372]	; (8001078 <HAL_ADC_Init+0x320>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d102      	bne.n	8000f0e <HAL_ADC_Init+0x1b6>
 8000f08:	4b5a      	ldr	r3, [pc, #360]	; (8001074 <HAL_ADC_Init+0x31c>)
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	e001      	b.n	8000f12 <HAL_ADC_Init+0x1ba>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d108      	bne.n	8000f32 <HAL_ADC_Init+0x1da>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d101      	bne.n	8000f32 <HAL_ADC_Init+0x1da>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <HAL_ADC_Init+0x1dc>
 8000f32:	2300      	movs	r3, #0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11c      	bne.n	8000f72 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f38:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d010      	beq.n	8000f60 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d107      	bne.n	8000f5a <HAL_ADC_Init+0x202>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d101      	bne.n	8000f5a <HAL_ADC_Init+0x202>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_ADC_Init+0x204>
 8000f5a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d108      	bne.n	8000f72 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f70:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7e5b      	ldrb	r3, [r3, #25]
 8000f76:	035b      	lsls	r3, r3, #13
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f7c:	2a01      	cmp	r2, #1
 8000f7e:	d002      	beq.n	8000f86 <HAL_ADC_Init+0x22e>
 8000f80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f84:	e000      	b.n	8000f88 <HAL_ADC_Init+0x230>
 8000f86:	2200      	movs	r2, #0
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d11b      	bne.n	8000fde <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7e5b      	ldrb	r3, [r3, #25]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d109      	bne.n	8000fc2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	045a      	lsls	r2, r3, #17
 8000fb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbe:	663b      	str	r3, [r7, #96]	; 0x60
 8000fc0:	e00d      	b.n	8000fde <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000fca:	f043 0220 	orr.w	r2, r3, #32
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f043 0201 	orr.w	r2, r3, #1
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d054      	beq.n	8001090 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a22      	ldr	r2, [pc, #136]	; (8001074 <HAL_ADC_Init+0x31c>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d004      	beq.n	8000ffa <HAL_ADC_Init+0x2a2>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a20      	ldr	r2, [pc, #128]	; (8001078 <HAL_ADC_Init+0x320>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d140      	bne.n	800107c <HAL_ADC_Init+0x324>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffe:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001002:	d02a      	beq.n	800105a <HAL_ADC_Init+0x302>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800100c:	d022      	beq.n	8001054 <HAL_ADC_Init+0x2fc>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001012:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001016:	d01a      	beq.n	800104e <HAL_ADC_Init+0x2f6>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001020:	d012      	beq.n	8001048 <HAL_ADC_Init+0x2f0>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800102a:	d00a      	beq.n	8001042 <HAL_ADC_Init+0x2ea>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001034:	d002      	beq.n	800103c <HAL_ADC_Init+0x2e4>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103a:	e023      	b.n	8001084 <HAL_ADC_Init+0x32c>
 800103c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001040:	e020      	b.n	8001084 <HAL_ADC_Init+0x32c>
 8001042:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001046:	e01d      	b.n	8001084 <HAL_ADC_Init+0x32c>
 8001048:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800104c:	e01a      	b.n	8001084 <HAL_ADC_Init+0x32c>
 800104e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001052:	e017      	b.n	8001084 <HAL_ADC_Init+0x32c>
 8001054:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001058:	e014      	b.n	8001084 <HAL_ADC_Init+0x32c>
 800105a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800105e:	e011      	b.n	8001084 <HAL_ADC_Init+0x32c>
 8001060:	20000000 	.word	0x20000000
 8001064:	431bde83 	.word	0x431bde83
 8001068:	50000100 	.word	0x50000100
 800106c:	50000300 	.word	0x50000300
 8001070:	50000700 	.word	0x50000700
 8001074:	50000400 	.word	0x50000400
 8001078:	50000500 	.word	0x50000500
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001080:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001088:	4313      	orrs	r3, r2
 800108a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800108c:	4313      	orrs	r3, r2
 800108e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	2b00      	cmp	r3, #0
 800109c:	d114      	bne.n	80010c8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	6812      	ldr	r2, [r2, #0]
 80010a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010ac:	f023 0302 	bic.w	r3, r3, #2
 80010b0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	7e1b      	ldrb	r3, [r3, #24]
 80010b6:	039a      	lsls	r2, r3, #14
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4313      	orrs	r3, r2
 80010c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010c4:	4313      	orrs	r3, r2
 80010c6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <HAL_ADC_Init+0x3f0>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80010d8:	430b      	orrs	r3, r1
 80010da:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d10c      	bne.n	80010fe <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f023 010f 	bic.w	r1, r3, #15
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	1e5a      	subs	r2, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	430a      	orrs	r2, r1
 80010fa:	631a      	str	r2, [r3, #48]	; 0x30
 80010fc:	e007      	b.n	800110e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 020f 	bic.w	r2, r2, #15
 800110c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f023 0303 	bic.w	r3, r3, #3
 800111c:	f043 0201 	orr.w	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	641a      	str	r2, [r3, #64]	; 0x40
 8001124:	e00a      	b.n	800113c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f023 0312 	bic.w	r3, r3, #18
 800112e:	f043 0210 	orr.w	r2, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001136:	2301      	movs	r3, #1
 8001138:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800113c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001140:	4618      	mov	r0, r3
 8001142:	3768      	adds	r7, #104	; 0x68
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	fff0c007 	.word	0xfff0c007

0800114c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	2b00      	cmp	r3, #0
 8001168:	f040 80f7 	bne.w	800135a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001172:	2b01      	cmp	r3, #1
 8001174:	d101      	bne.n	800117a <HAL_ADC_Start_DMA+0x2e>
 8001176:	2302      	movs	r3, #2
 8001178:	e0f2      	b.n	8001360 <HAL_ADC_Start_DMA+0x214>
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800118a:	d004      	beq.n	8001196 <HAL_ADC_Start_DMA+0x4a>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a75      	ldr	r2, [pc, #468]	; (8001368 <HAL_ADC_Start_DMA+0x21c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d109      	bne.n	80011aa <HAL_ADC_Start_DMA+0x5e>
 8001196:	4b75      	ldr	r3, [pc, #468]	; (800136c <HAL_ADC_Start_DMA+0x220>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bf0c      	ite	eq
 80011a2:	2301      	moveq	r3, #1
 80011a4:	2300      	movne	r3, #0
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	e008      	b.n	80011bc <HAL_ADC_Start_DMA+0x70>
 80011aa:	4b71      	ldr	r3, [pc, #452]	; (8001370 <HAL_ADC_Start_DMA+0x224>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	bf0c      	ite	eq
 80011b6:	2301      	moveq	r3, #1
 80011b8:	2300      	movne	r3, #0
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80c5 	beq.w	800134c <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f000 fc8c 	bl	8001ae0 <ADC_Enable>
 80011c8:	4603      	mov	r3, r0
 80011ca:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f040 80b7 	bne.w	8001342 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011dc:	f023 0301 	bic.w	r3, r3, #1
 80011e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011f0:	d004      	beq.n	80011fc <HAL_ADC_Start_DMA+0xb0>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a5c      	ldr	r2, [pc, #368]	; (8001368 <HAL_ADC_Start_DMA+0x21c>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d106      	bne.n	800120a <HAL_ADC_Start_DMA+0xbe>
 80011fc:	4b5b      	ldr	r3, [pc, #364]	; (800136c <HAL_ADC_Start_DMA+0x220>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	2b00      	cmp	r3, #0
 8001206:	d010      	beq.n	800122a <HAL_ADC_Start_DMA+0xde>
 8001208:	e005      	b.n	8001216 <HAL_ADC_Start_DMA+0xca>
 800120a:	4b59      	ldr	r3, [pc, #356]	; (8001370 <HAL_ADC_Start_DMA+0x224>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 031f 	and.w	r3, r3, #31
 8001212:	2b00      	cmp	r3, #0
 8001214:	d009      	beq.n	800122a <HAL_ADC_Start_DMA+0xde>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800121e:	d004      	beq.n	800122a <HAL_ADC_Start_DMA+0xde>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a53      	ldr	r2, [pc, #332]	; (8001374 <HAL_ADC_Start_DMA+0x228>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d115      	bne.n	8001256 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d036      	beq.n	80012b2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800124c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001254:	e02d      	b.n	80012b2 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800126a:	d004      	beq.n	8001276 <HAL_ADC_Start_DMA+0x12a>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a3d      	ldr	r2, [pc, #244]	; (8001368 <HAL_ADC_Start_DMA+0x21c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10a      	bne.n	800128c <HAL_ADC_Start_DMA+0x140>
 8001276:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001280:	2b00      	cmp	r3, #0
 8001282:	bf14      	ite	ne
 8001284:	2301      	movne	r3, #1
 8001286:	2300      	moveq	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	e008      	b.n	800129e <HAL_ADC_Start_DMA+0x152>
 800128c:	4b39      	ldr	r3, [pc, #228]	; (8001374 <HAL_ADC_Start_DMA+0x228>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf14      	ite	ne
 8001298:	2301      	movne	r3, #1
 800129a:	2300      	moveq	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012be:	d106      	bne.n	80012ce <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c4:	f023 0206 	bic.w	r2, r3, #6
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	645a      	str	r2, [r3, #68]	; 0x44
 80012cc:	e002      	b.n	80012d4 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e0:	4a25      	ldr	r2, [pc, #148]	; (8001378 <HAL_ADC_Start_DMA+0x22c>)
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e8:	4a24      	ldr	r2, [pc, #144]	; (800137c <HAL_ADC_Start_DMA+0x230>)
 80012ea:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f0:	4a23      	ldr	r2, [pc, #140]	; (8001380 <HAL_ADC_Start_DMA+0x234>)
 80012f2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	221c      	movs	r2, #28
 80012fa:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0210 	orr.w	r2, r2, #16
 800130a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0201 	orr.w	r2, r2, #1
 800131a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3340      	adds	r3, #64	; 0x40
 8001326:	4619      	mov	r1, r3
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f000 fede 	bl	80020ec <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0204 	orr.w	r2, r2, #4
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	e00d      	b.n	800135e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800134a:	e008      	b.n	800135e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001358:	e001      	b.n	800135e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800135a:	2302      	movs	r3, #2
 800135c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800135e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	50000100 	.word	0x50000100
 800136c:	50000300 	.word	0x50000300
 8001370:	50000700 	.word	0x50000700
 8001374:	50000400 	.word	0x50000400
 8001378:	08001a15 	.word	0x08001a15
 800137c:	08001a8f 	.word	0x08001a8f
 8001380:	08001aab 	.word	0x08001aab

08001384 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <HAL_ADC_Stop_DMA+0x1a>
 800139a:	2302      	movs	r3, #2
 800139c:	e04a      	b.n	8001434 <HAL_ADC_Stop_DMA+0xb0>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80013a6:	216c      	movs	r1, #108	; 0x6c
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 fc57 	bl	8001c5c <ADC_ConversionStop>
 80013ae:	4603      	mov	r3, r0
 80013b0:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d138      	bne.n	800142a <HAL_ADC_Stop_DMA+0xa6>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0201 	bic.w	r2, r2, #1
 80013c6:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 feec 	bl	80021aa <HAL_DMA_Abort>
 80013d2:	4603      	mov	r3, r0
 80013d4:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <HAL_ADC_Stop_DMA+0x64>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0210 	bic.w	r2, r2, #16
 80013f6:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d105      	bne.n	800140a <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 fbcc 	bl	8001b9c <ADC_Disable>
 8001404:	4603      	mov	r3, r0
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e002      	b.n	8001410 <HAL_ADC_Stop_DMA+0x8c>
    }
    else
    {
      ADC_Disable(hadc);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fbc6 	bl	8001b9c <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d109      	bne.n	800142a <HAL_ADC_Stop_DMA+0xa6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800141e:	f023 0301 	bic.w	r3, r3, #1
 8001422:	f043 0201 	orr.w	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800143c:	b480      	push	{r7}
 800143e:	b09b      	sub	sp, #108	; 0x6c
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001456:	2b01      	cmp	r3, #1
 8001458:	d101      	bne.n	800145e <HAL_ADC_ConfigChannel+0x22>
 800145a:	2302      	movs	r3, #2
 800145c:	e2cb      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x5ba>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	f040 82af 	bne.w	80019d4 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b04      	cmp	r3, #4
 800147c:	d81c      	bhi.n	80014b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	461a      	mov	r2, r3
 8001492:	231f      	movs	r3, #31
 8001494:	4093      	lsls	r3, r2
 8001496:	43db      	mvns	r3, r3
 8001498:	4019      	ands	r1, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	fa00 f203 	lsl.w	r2, r0, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	631a      	str	r2, [r3, #48]	; 0x30
 80014b6:	e063      	b.n	8001580 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b09      	cmp	r3, #9
 80014be:	d81e      	bhi.n	80014fe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	3b1e      	subs	r3, #30
 80014d4:	221f      	movs	r2, #31
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	4019      	ands	r1, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	3b1e      	subs	r3, #30
 80014f0:	fa00 f203 	lsl.w	r2, r0, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34
 80014fc:	e040      	b.n	8001580 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b0e      	cmp	r3, #14
 8001504:	d81e      	bhi.n	8001544 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	3b3c      	subs	r3, #60	; 0x3c
 800151a:	221f      	movs	r2, #31
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	4019      	ands	r1, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	3b3c      	subs	r3, #60	; 0x3c
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	639a      	str	r2, [r3, #56]	; 0x38
 8001542:	e01d      	b.n	8001580 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	3b5a      	subs	r3, #90	; 0x5a
 8001558:	221f      	movs	r2, #31
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	4019      	ands	r1, r3
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	3b5a      	subs	r3, #90	; 0x5a
 8001574:	fa00 f203 	lsl.w	r2, r0, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b00      	cmp	r3, #0
 800158c:	f040 80e5 	bne.w	800175a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b09      	cmp	r3, #9
 8001596:	d91c      	bls.n	80015d2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6999      	ldr	r1, [r3, #24]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	3b1e      	subs	r3, #30
 80015aa:	2207      	movs	r2, #7
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	4019      	ands	r1, r3
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	6898      	ldr	r0, [r3, #8]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	3b1e      	subs	r3, #30
 80015c4:	fa00 f203 	lsl.w	r2, r0, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	619a      	str	r2, [r3, #24]
 80015d0:	e019      	b.n	8001606 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6959      	ldr	r1, [r3, #20]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	2207      	movs	r2, #7
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	4019      	ands	r1, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	6898      	ldr	r0, [r3, #8]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	fa00 f203 	lsl.w	r2, r0, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	695a      	ldr	r2, [r3, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	3b01      	subs	r3, #1
 8001624:	2b03      	cmp	r3, #3
 8001626:	d84f      	bhi.n	80016c8 <HAL_ADC_ConfigChannel+0x28c>
 8001628:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <HAL_ADC_ConfigChannel+0x1f4>)
 800162a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162e:	bf00      	nop
 8001630:	08001641 	.word	0x08001641
 8001634:	08001663 	.word	0x08001663
 8001638:	08001685 	.word	0x08001685
 800163c:	080016a7 	.word	0x080016a7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001646:	4b9f      	ldr	r3, [pc, #636]	; (80018c4 <HAL_ADC_ConfigChannel+0x488>)
 8001648:	4013      	ands	r3, r2
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	6812      	ldr	r2, [r2, #0]
 800164e:	0691      	lsls	r1, r2, #26
 8001650:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001652:	430a      	orrs	r2, r1
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800165e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001660:	e07e      	b.n	8001760 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001668:	4b96      	ldr	r3, [pc, #600]	; (80018c4 <HAL_ADC_ConfigChannel+0x488>)
 800166a:	4013      	ands	r3, r2
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	0691      	lsls	r1, r2, #26
 8001672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001674:	430a      	orrs	r2, r1
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001680:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001682:	e06d      	b.n	8001760 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800168a:	4b8e      	ldr	r3, [pc, #568]	; (80018c4 <HAL_ADC_ConfigChannel+0x488>)
 800168c:	4013      	ands	r3, r2
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	0691      	lsls	r1, r2, #26
 8001694:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001696:	430a      	orrs	r2, r1
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016a2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016a4:	e05c      	b.n	8001760 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016ac:	4b85      	ldr	r3, [pc, #532]	; (80018c4 <HAL_ADC_ConfigChannel+0x488>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	0691      	lsls	r1, r2, #26
 80016b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016b8:	430a      	orrs	r2, r1
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016c4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016c6:	e04b      	b.n	8001760 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	069b      	lsls	r3, r3, #26
 80016d8:	429a      	cmp	r2, r3
 80016da:	d107      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016ea:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	069b      	lsls	r3, r3, #26
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d107      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800170e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001716:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	069b      	lsls	r3, r3, #26
 8001720:	429a      	cmp	r2, r3
 8001722:	d107      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001732:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800173a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	069b      	lsls	r3, r3, #26
 8001744:	429a      	cmp	r2, r3
 8001746:	d10a      	bne.n	800175e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001756:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001758:	e001      	b.n	800175e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800175a:	bf00      	nop
 800175c:	e000      	b.n	8001760 <HAL_ADC_ConfigChannel+0x324>
      break;
 800175e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d108      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x344>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x344>
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <HAL_ADC_ConfigChannel+0x346>
 8001780:	2300      	movs	r3, #0
 8001782:	2b00      	cmp	r3, #0
 8001784:	f040 8131 	bne.w	80019ea <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d00f      	beq.n	80017b0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2201      	movs	r2, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	400a      	ands	r2, r1
 80017aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80017ae:	e049      	b.n	8001844 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2201      	movs	r2, #1
 80017be:	409a      	lsls	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b09      	cmp	r3, #9
 80017d0:	d91c      	bls.n	800180c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6999      	ldr	r1, [r3, #24]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	3b1b      	subs	r3, #27
 80017e4:	2207      	movs	r2, #7
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	4019      	ands	r1, r3
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	6898      	ldr	r0, [r3, #8]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	3b1b      	subs	r3, #27
 80017fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	619a      	str	r2, [r3, #24]
 800180a:	e01b      	b.n	8001844 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6959      	ldr	r1, [r3, #20]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	2207      	movs	r2, #7
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	4019      	ands	r1, r3
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	6898      	ldr	r0, [r3, #8]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	4613      	mov	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4413      	add	r3, r2
 8001838:	fa00 f203 	lsl.w	r2, r0, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800184c:	d004      	beq.n	8001858 <HAL_ADC_ConfigChannel+0x41c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <HAL_ADC_ConfigChannel+0x48c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d101      	bne.n	800185c <HAL_ADC_ConfigChannel+0x420>
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <HAL_ADC_ConfigChannel+0x490>)
 800185a:	e000      	b.n	800185e <HAL_ADC_ConfigChannel+0x422>
 800185c:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <HAL_ADC_ConfigChannel+0x494>)
 800185e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b10      	cmp	r3, #16
 8001866:	d105      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001870:	2b00      	cmp	r3, #0
 8001872:	d015      	beq.n	80018a0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001878:	2b11      	cmp	r3, #17
 800187a:	d105      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800187c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00b      	beq.n	80018a0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800188c:	2b12      	cmp	r3, #18
 800188e:	f040 80ac 	bne.w	80019ea <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800189a:	2b00      	cmp	r3, #0
 800189c:	f040 80a5 	bne.w	80019ea <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018a8:	d102      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x474>
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_ADC_ConfigChannel+0x48c>)
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e023      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x4bc>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_ADC_ConfigChannel+0x48c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d10c      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x498>
 80018ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	e01a      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x4bc>
 80018c2:	bf00      	nop
 80018c4:	83fff000 	.word	0x83fff000
 80018c8:	50000100 	.word	0x50000100
 80018cc:	50000300 	.word	0x50000300
 80018d0:	50000700 	.word	0x50000700
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a4a      	ldr	r2, [pc, #296]	; (8001a04 <HAL_ADC_ConfigChannel+0x5c8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d102      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x4a8>
 80018de:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <HAL_ADC_ConfigChannel+0x5cc>)
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	e009      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x4bc>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a47      	ldr	r2, [pc, #284]	; (8001a08 <HAL_ADC_ConfigChannel+0x5cc>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d102      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x4b8>
 80018ee:	4b45      	ldr	r3, [pc, #276]	; (8001a04 <HAL_ADC_ConfigChannel+0x5c8>)
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	e001      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x4bc>
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b01      	cmp	r3, #1
 8001904:	d108      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x4dc>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x4dc>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_ADC_ConfigChannel+0x4de>
 8001918:	2300      	movs	r3, #0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d150      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800191e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001920:	2b00      	cmp	r3, #0
 8001922:	d010      	beq.n	8001946 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d107      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x504>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x504>
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <HAL_ADC_ConfigChannel+0x506>
 8001940:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001942:	2b00      	cmp	r3, #0
 8001944:	d13c      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b10      	cmp	r3, #16
 800194c:	d11d      	bne.n	800198a <HAL_ADC_ConfigChannel+0x54e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001956:	d118      	bne.n	800198a <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001962:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <HAL_ADC_ConfigChannel+0x5d0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a29      	ldr	r2, [pc, #164]	; (8001a10 <HAL_ADC_ConfigChannel+0x5d4>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	0c9a      	lsrs	r2, r3, #18
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800197a:	e002      	b.n	8001982 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	3b01      	subs	r3, #1
 8001980:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f9      	bne.n	800197c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001988:	e02e      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b11      	cmp	r3, #17
 8001990:	d10b      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x56e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800199a:	d106      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800199c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80019a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019a6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019a8:	e01e      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b12      	cmp	r3, #18
 80019b0:	d11a      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80019b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019bc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019be:	e013      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	f043 0220 	orr.w	r2, r3, #32
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80019d2:	e00a      	b.n	80019ea <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f043 0220 	orr.w	r2, r3, #32
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80019e6:	e000      	b.n	80019ea <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019e8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80019f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	376c      	adds	r7, #108	; 0x6c
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	50000400 	.word	0x50000400
 8001a08:	50000500 	.word	0x50000500
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	431bde83 	.word	0x431bde83

08001a14 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d126      	bne.n	8001a7c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d115      	bne.n	8001a74 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d111      	bne.n	8001a74 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f043 0201 	orr.w	r2, r3, #1
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7fe fc69 	bl	800034c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a7a:	e004      	b.n	8001a86 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	4798      	blx	r3
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f7ff f947 	bl	8000d30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac8:	f043 0204 	orr.w	r2, r3, #4
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f7ff f937 	bl	8000d44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d108      	bne.n	8001b0c <ADC_Enable+0x2c>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <ADC_Enable+0x2c>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <ADC_Enable+0x2e>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d13c      	bne.n	8001b8c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <ADC_Enable+0xb8>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00d      	beq.n	8001b3c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	f043 0210 	orr.w	r2, r3, #16
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b30:	f043 0201 	orr.w	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e028      	b.n	8001b8e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001b4c:	f7ff f8e4 	bl	8000d18 <HAL_GetTick>
 8001b50:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b52:	e014      	b.n	8001b7e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b54:	f7ff f8e0 	bl	8000d18 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d90d      	bls.n	8001b7e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f043 0210 	orr.w	r2, r3, #16
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f043 0201 	orr.w	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e007      	b.n	8001b8e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d1e3      	bne.n	8001b54 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	8000003f 	.word	0x8000003f

08001b9c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d108      	bne.n	8001bc8 <ADC_Disable+0x2c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <ADC_Disable+0x2c>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <ADC_Disable+0x2e>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d040      	beq.n	8001c50 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 030d 	and.w	r3, r3, #13
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10f      	bne.n	8001bfc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0202 	orr.w	r2, r2, #2
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001bf4:	f7ff f890 	bl	8000d18 <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bfa:	e022      	b.n	8001c42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f043 0210 	orr.w	r2, r3, #16
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0c:	f043 0201 	orr.w	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e01c      	b.n	8001c52 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c18:	f7ff f87e 	bl	8000d18 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d90d      	bls.n	8001c42 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f043 0210 	orr.w	r2, r3, #16
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f043 0201 	orr.w	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e007      	b.n	8001c52 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d0e3      	beq.n	8001c18 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 8093 	beq.w	8001da8 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c90:	d12a      	bne.n	8001ce8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d126      	bne.n	8001ce8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d122      	bne.n	8001ce8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001ca6:	e014      	b.n	8001cd2 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4a42      	ldr	r2, [pc, #264]	; (8001db4 <ADC_ConversionStop+0x158>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d90d      	bls.n	8001ccc <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f043 0210 	orr.w	r2, r3, #16
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc0:	f043 0201 	orr.w	r2, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e06e      	b.n	8001daa <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cdc:	2b40      	cmp	r3, #64	; 0x40
 8001cde:	d1e3      	bne.n	8001ca8 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2240      	movs	r2, #64	; 0x40
 8001ce6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2b60      	cmp	r3, #96	; 0x60
 8001cec:	d015      	beq.n	8001d1a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d10e      	bne.n	8001d1a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d107      	bne.n	8001d1a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0210 	orr.w	r2, r2, #16
 8001d18:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d015      	beq.n	8001d4c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d10e      	bne.n	8001d4c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d107      	bne.n	8001d4c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2b60      	cmp	r3, #96	; 0x60
 8001d50:	d004      	beq.n	8001d5c <ADC_ConversionStop+0x100>
 8001d52:	2b6c      	cmp	r3, #108	; 0x6c
 8001d54:	d105      	bne.n	8001d62 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001d56:	230c      	movs	r3, #12
 8001d58:	617b      	str	r3, [r7, #20]
        break;
 8001d5a:	e005      	b.n	8001d68 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	617b      	str	r3, [r7, #20]
        break;
 8001d60:	e002      	b.n	8001d68 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001d62:	2304      	movs	r3, #4
 8001d64:	617b      	str	r3, [r7, #20]
        break;
 8001d66:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001d68:	f7fe ffd6 	bl	8000d18 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001d6e:	e014      	b.n	8001d9a <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d70:	f7fe ffd2 	bl	8000d18 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b0b      	cmp	r3, #11
 8001d7c:	d90d      	bls.n	8001d9a <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f043 0210 	orr.w	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f043 0201 	orr.w	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e007      	b.n	8001daa <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1e3      	bne.n	8001d70 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	000993ff 	.word	0x000993ff

08001db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dea:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	60d3      	str	r3, [r2, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <__NVIC_GetPriorityGrouping+0x18>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	f003 0307 	and.w	r3, r3, #7
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	db0b      	blt.n	8001e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	f003 021f 	and.w	r2, r3, #31
 8001e34:	4907      	ldr	r1, [pc, #28]	; (8001e54 <__NVIC_EnableIRQ+0x38>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000e100 	.word	0xe000e100

08001e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db0a      	blt.n	8001e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	490c      	ldr	r1, [pc, #48]	; (8001ea4 <__NVIC_SetPriority+0x4c>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	0112      	lsls	r2, r2, #4
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e80:	e00a      	b.n	8001e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4908      	ldr	r1, [pc, #32]	; (8001ea8 <__NVIC_SetPriority+0x50>)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	3b04      	subs	r3, #4
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	440b      	add	r3, r1
 8001e96:	761a      	strb	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000e100 	.word	0xe000e100
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	; 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f1c3 0307 	rsb	r3, r3, #7
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	bf28      	it	cs
 8001eca:	2304      	movcs	r3, #4
 8001ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d902      	bls.n	8001edc <NVIC_EncodePriority+0x30>
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3b03      	subs	r3, #3
 8001eda:	e000      	b.n	8001ede <NVIC_EncodePriority+0x32>
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	401a      	ands	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	43d9      	mvns	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	4313      	orrs	r3, r2
         );
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3724      	adds	r7, #36	; 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f24:	d301      	bcc.n	8001f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00f      	b.n	8001f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <SysTick_Config+0x40>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f32:	210f      	movs	r1, #15
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f38:	f7ff ff8e 	bl	8001e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <SysTick_Config+0x40>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f42:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <SysTick_Config+0x40>)
 8001f44:	2207      	movs	r2, #7
 8001f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	e000e010 	.word	0xe000e010

08001f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ff29 	bl	8001db8 <__NVIC_SetPriorityGrouping>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f80:	f7ff ff3e 	bl	8001e00 <__NVIC_GetPriorityGrouping>
 8001f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	6978      	ldr	r0, [r7, #20]
 8001f8c:	f7ff ff8e 	bl	8001eac <NVIC_EncodePriority>
 8001f90:	4602      	mov	r2, r0
 8001f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff5d 	bl	8001e58 <__NVIC_SetPriority>
}
 8001f9e:	bf00      	nop
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff31 	bl	8001e1c <__NVIC_EnableIRQ>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ffa2 	bl	8001f14 <SysTick_Config>
 8001fd0:	4603      	mov	r3, r0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e037      	b.n	8002060 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002006:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800200a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f9bc 	bl	80023c0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}  
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_DMA_Start+0x20>
 8002084:	2302      	movs	r3, #2
 8002086:	e02d      	b.n	80020e4 <HAL_DMA_Start+0x7c>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002096:	2b01      	cmp	r3, #1
 8002098:	d11d      	bne.n	80020d6 <HAL_DMA_Start+0x6e>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2202      	movs	r2, #2
 800209e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0201 	bic.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f94f 	bl	8002362 <DMA_SetConfig>
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;  
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e005      	b.n	80020e2 <HAL_DMA_Start+0x7a>
  }
  else
  {
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	/* Remain BUSY */
  	status = HAL_BUSY;
 80020de:	2302      	movs	r3, #2
 80020e0:	75fb      	strb	r3, [r7, #23]
  }  

  return status; 
 80020e2:	7dfb      	ldrb	r3, [r7, #23]
} 
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_DMA_Start_IT+0x20>
 8002108:	2302      	movs	r3, #2
 800210a:	e04a      	b.n	80021a2 <HAL_DMA_Start_IT+0xb6>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800211a:	2b01      	cmp	r3, #1
 800211c:	d13a      	bne.n	8002194 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2202      	movs	r2, #2
 8002122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0201 	bic.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f90d 	bl	8002362 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 020e 	orr.w	r2, r2, #14
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	e00f      	b.n	8002182 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 020a 	orr.w	r2, r2, #10
 8002170:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0204 	bic.w	r2, r2, #4
 8002180:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0201 	orr.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e005      	b.n	80021a0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800219c:	2302      	movs	r3, #2
 800219e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
} 
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d008      	beq.n	80021ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2204      	movs	r2, #4
 80021c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e020      	b.n	8002210 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 020e 	bic.w	r2, r2, #14
 80021dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0201 	bic.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	2204      	movs	r2, #4
 800223a:	409a      	lsls	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d024      	beq.n	800228e <HAL_DMA_IRQHandler+0x72>
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d01f      	beq.n	800228e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d107      	bne.n	800226c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0204 	bic.w	r2, r2, #4
 800226a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002274:	2104      	movs	r1, #4
 8002276:	fa01 f202 	lsl.w	r2, r1, r2
 800227a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d06a      	beq.n	800235a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800228c:	e065      	b.n	800235a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	2202      	movs	r2, #2
 8002294:	409a      	lsls	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d02c      	beq.n	80022f8 <HAL_DMA_IRQHandler+0xdc>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d027      	beq.n	80022f8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10b      	bne.n	80022ce <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 020a 	bic.w	r2, r2, #10
 80022c4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d6:	2102      	movs	r1, #2
 80022d8:	fa01 f202 	lsl.w	r2, r1, r2
 80022dc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d035      	beq.n	800235a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80022f6:	e030      	b.n	800235a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	2208      	movs	r2, #8
 80022fe:	409a      	lsls	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d028      	beq.n	800235a <HAL_DMA_IRQHandler+0x13e>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d023      	beq.n	800235a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 020e 	bic.w	r2, r2, #14
 8002320:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232a:	2101      	movs	r1, #1
 800232c:	fa01 f202 	lsl.w	r2, r1, r2
 8002330:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
    }
  }
}  
 8002358:	e7ff      	b.n	800235a <HAL_DMA_IRQHandler+0x13e>
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	2101      	movs	r1, #1
 800237a:	fa01 f202 	lsl.w	r2, r1, r2
 800237e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b10      	cmp	r3, #16
 800238e:	d108      	bne.n	80023a2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023a0:	e007      	b.n	80023b2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	60da      	str	r2, [r3, #12]
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <DMA_CalcBaseAndBitshift+0x60>)
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d80f      	bhi.n	80023f4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <DMA_CalcBaseAndBitshift+0x64>)
 80023dc:	4413      	add	r3, r2
 80023de:	4a12      	ldr	r2, [pc, #72]	; (8002428 <DMA_CalcBaseAndBitshift+0x68>)
 80023e0:	fba2 2303 	umull	r2, r3, r2, r3
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	009a      	lsls	r2, r3, #2
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a0f      	ldr	r2, [pc, #60]	; (800242c <DMA_CalcBaseAndBitshift+0x6c>)
 80023f0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80023f2:	e00e      	b.n	8002412 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <DMA_CalcBaseAndBitshift+0x70>)
 80023fc:	4413      	add	r3, r2
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <DMA_CalcBaseAndBitshift+0x68>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	009a      	lsls	r2, r3, #2
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a09      	ldr	r2, [pc, #36]	; (8002434 <DMA_CalcBaseAndBitshift+0x74>)
 8002410:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40020407 	.word	0x40020407
 8002424:	bffdfff8 	.word	0xbffdfff8
 8002428:	cccccccd 	.word	0xcccccccd
 800242c:	40020000 	.word	0x40020000
 8002430:	bffdfbf8 	.word	0xbffdfbf8
 8002434:	40020400 	.word	0x40020400

08002438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002446:	e160      	b.n	800270a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2101      	movs	r1, #1
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8152 	beq.w	8002704 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x38>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b12      	cmp	r3, #18
 800246e:	d123      	bne.n	80024b8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	08da      	lsrs	r2, r3, #3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3208      	adds	r2, #8
 8002478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	08da      	lsrs	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3208      	adds	r2, #8
 80024b2:	6939      	ldr	r1, [r7, #16]
 80024b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0203 	and.w	r2, r3, #3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d00b      	beq.n	800250c <HAL_GPIO_Init+0xd4>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d007      	beq.n	800250c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002500:	2b11      	cmp	r3, #17
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b12      	cmp	r3, #18
 800250a:	d130      	bne.n	800256e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002542:	2201      	movs	r2, #1
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	f003 0201 	and.w	r2, r3, #1
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	2203      	movs	r2, #3
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4013      	ands	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 80ac 	beq.w	8002704 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ac:	4b5e      	ldr	r3, [pc, #376]	; (8002728 <HAL_GPIO_Init+0x2f0>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	4a5d      	ldr	r2, [pc, #372]	; (8002728 <HAL_GPIO_Init+0x2f0>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6193      	str	r3, [r2, #24]
 80025b8:	4b5b      	ldr	r3, [pc, #364]	; (8002728 <HAL_GPIO_Init+0x2f0>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025c4:	4a59      	ldr	r2, [pc, #356]	; (800272c <HAL_GPIO_Init+0x2f4>)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	089b      	lsrs	r3, r3, #2
 80025ca:	3302      	adds	r3, #2
 80025cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025ee:	d025      	beq.n	800263c <HAL_GPIO_Init+0x204>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a4f      	ldr	r2, [pc, #316]	; (8002730 <HAL_GPIO_Init+0x2f8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d01f      	beq.n	8002638 <HAL_GPIO_Init+0x200>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a4e      	ldr	r2, [pc, #312]	; (8002734 <HAL_GPIO_Init+0x2fc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d019      	beq.n	8002634 <HAL_GPIO_Init+0x1fc>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a4d      	ldr	r2, [pc, #308]	; (8002738 <HAL_GPIO_Init+0x300>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d013      	beq.n	8002630 <HAL_GPIO_Init+0x1f8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a4c      	ldr	r2, [pc, #304]	; (800273c <HAL_GPIO_Init+0x304>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00d      	beq.n	800262c <HAL_GPIO_Init+0x1f4>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a4b      	ldr	r2, [pc, #300]	; (8002740 <HAL_GPIO_Init+0x308>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d007      	beq.n	8002628 <HAL_GPIO_Init+0x1f0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a4a      	ldr	r2, [pc, #296]	; (8002744 <HAL_GPIO_Init+0x30c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d101      	bne.n	8002624 <HAL_GPIO_Init+0x1ec>
 8002620:	2306      	movs	r3, #6
 8002622:	e00c      	b.n	800263e <HAL_GPIO_Init+0x206>
 8002624:	2307      	movs	r3, #7
 8002626:	e00a      	b.n	800263e <HAL_GPIO_Init+0x206>
 8002628:	2305      	movs	r3, #5
 800262a:	e008      	b.n	800263e <HAL_GPIO_Init+0x206>
 800262c:	2304      	movs	r3, #4
 800262e:	e006      	b.n	800263e <HAL_GPIO_Init+0x206>
 8002630:	2303      	movs	r3, #3
 8002632:	e004      	b.n	800263e <HAL_GPIO_Init+0x206>
 8002634:	2302      	movs	r3, #2
 8002636:	e002      	b.n	800263e <HAL_GPIO_Init+0x206>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <HAL_GPIO_Init+0x206>
 800263c:	2300      	movs	r3, #0
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	f002 0203 	and.w	r2, r2, #3
 8002644:	0092      	lsls	r2, r2, #2
 8002646:	4093      	lsls	r3, r2
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800264e:	4937      	ldr	r1, [pc, #220]	; (800272c <HAL_GPIO_Init+0x2f4>)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	3302      	adds	r3, #2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800265c:	4b3a      	ldr	r3, [pc, #232]	; (8002748 <HAL_GPIO_Init+0x310>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	43db      	mvns	r3, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002680:	4a31      	ldr	r2, [pc, #196]	; (8002748 <HAL_GPIO_Init+0x310>)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002686:	4b30      	ldr	r3, [pc, #192]	; (8002748 <HAL_GPIO_Init+0x310>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026aa:	4a27      	ldr	r2, [pc, #156]	; (8002748 <HAL_GPIO_Init+0x310>)
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <HAL_GPIO_Init+0x310>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026d4:	4a1c      	ldr	r2, [pc, #112]	; (8002748 <HAL_GPIO_Init+0x310>)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026da:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <HAL_GPIO_Init+0x310>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026fe:	4a12      	ldr	r2, [pc, #72]	; (8002748 <HAL_GPIO_Init+0x310>)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	3301      	adds	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	f47f ae97 	bne.w	8002448 <HAL_GPIO_Init+0x10>
  }
}
 800271a:	bf00      	nop
 800271c:	371c      	adds	r7, #28
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	40010000 	.word	0x40010000
 8002730:	48000400 	.word	0x48000400
 8002734:	48000800 	.word	0x48000800
 8002738:	48000c00 	.word	0x48000c00
 800273c:	48001000 	.word	0x48001000
 8002740:	48001400 	.word	0x48001400
 8002744:	48001800 	.word	0x48001800
 8002748:	40010400 	.word	0x40010400

0800274c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
 8002758:	4613      	mov	r3, r2
 800275a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800275c:	787b      	ldrb	r3, [r7, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002768:	e002      	b.n	8002770 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002782:	af00      	add	r7, sp, #0
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	f000 bf01 	b.w	8003598 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8160 	beq.w	8002a66 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027a6:	4bae      	ldr	r3, [pc, #696]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d00c      	beq.n	80027cc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027b2:	4bab      	ldr	r3, [pc, #684]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d159      	bne.n	8002872 <HAL_RCC_OscConfig+0xf6>
 80027be:	4ba8      	ldr	r3, [pc, #672]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80027c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ca:	d152      	bne.n	8002872 <HAL_RCC_OscConfig+0xf6>
 80027cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027e0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d102      	bne.n	80027fe <HAL_RCC_OscConfig+0x82>
 80027f8:	4b99      	ldr	r3, [pc, #612]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	e015      	b.n	800282a <HAL_RCC_OscConfig+0xae>
 80027fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002802:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002812:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002816:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800281a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002826:	4b8e      	ldr	r3, [pc, #568]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800282e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002832:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002836:	fa92 f2a2 	rbit	r2, r2
 800283a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800283e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002842:	fab2 f282 	clz	r2, r2
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	f042 0220 	orr.w	r2, r2, #32
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f002 021f 	and.w	r2, r2, #31
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f202 	lsl.w	r2, r1, r2
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8102 	beq.w	8002a64 <HAL_RCC_OscConfig+0x2e8>
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 80fc 	bne.w	8002a64 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	f000 be93 	b.w	8003598 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287c:	d106      	bne.n	800288c <HAL_RCC_OscConfig+0x110>
 800287e:	4b78      	ldr	r3, [pc, #480]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a77      	ldr	r2, [pc, #476]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e030      	b.n	80028ee <HAL_RCC_OscConfig+0x172>
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x134>
 8002896:	4b72      	ldr	r3, [pc, #456]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a71      	ldr	r2, [pc, #452]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 800289c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b6f      	ldr	r3, [pc, #444]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6e      	ldr	r2, [pc, #440]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 80028a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e01e      	b.n	80028ee <HAL_RCC_OscConfig+0x172>
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ba:	d10c      	bne.n	80028d6 <HAL_RCC_OscConfig+0x15a>
 80028bc:	4b68      	ldr	r3, [pc, #416]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a67      	ldr	r2, [pc, #412]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 80028c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4b65      	ldr	r3, [pc, #404]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a64      	ldr	r2, [pc, #400]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 80028ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	e00b      	b.n	80028ee <HAL_RCC_OscConfig+0x172>
 80028d6:	4b62      	ldr	r3, [pc, #392]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a61      	ldr	r2, [pc, #388]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 80028dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b5f      	ldr	r3, [pc, #380]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a5e      	ldr	r2, [pc, #376]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 80028e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ec:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d059      	beq.n	80029ac <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fe fa0e 	bl	8000d18 <HAL_GetTick>
 80028fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002902:	f7fe fa09 	bl	8000d18 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d902      	bls.n	8002918 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	f000 be40 	b.w	8003598 <HAL_RCC_OscConfig+0xe1c>
 8002918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800291c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800292c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d102      	bne.n	800294a <HAL_RCC_OscConfig+0x1ce>
 8002944:	4b46      	ldr	r3, [pc, #280]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	e015      	b.n	8002976 <HAL_RCC_OscConfig+0x1fa>
 800294a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800294e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800295e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002962:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002966:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002972:	4b3b      	ldr	r3, [pc, #236]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800297a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800297e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002982:	fa92 f2a2 	rbit	r2, r2
 8002986:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800298a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800298e:	fab2 f282 	clz	r2, r2
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	f042 0220 	orr.w	r2, r2, #32
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	f002 021f 	and.w	r2, r2, #31
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f202 	lsl.w	r2, r1, r2
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0ab      	beq.n	8002902 <HAL_RCC_OscConfig+0x186>
 80029aa:	e05c      	b.n	8002a66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe f9b4 	bl	8000d18 <HAL_GetTick>
 80029b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b4:	e00a      	b.n	80029cc <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b6:	f7fe f9af 	bl	8000d18 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b64      	cmp	r3, #100	; 0x64
 80029c4:	d902      	bls.n	80029cc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	f000 bde6 	b.w	8003598 <HAL_RCC_OscConfig+0xe1c>
 80029cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80029e0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d102      	bne.n	80029fe <HAL_RCC_OscConfig+0x282>
 80029f8:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	e015      	b.n	8002a2a <HAL_RCC_OscConfig+0x2ae>
 80029fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a02:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002a12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a16:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a1a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a26:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <HAL_RCC_OscConfig+0x2e4>)
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a2e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002a32:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002a36:	fa92 f2a2 	rbit	r2, r2
 8002a3a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002a3e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a42:	fab2 f282 	clz	r2, r2
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	f042 0220 	orr.w	r2, r2, #32
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	f002 021f 	and.w	r2, r2, #31
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f202 	lsl.w	r2, r1, r2
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1ab      	bne.n	80029b6 <HAL_RCC_OscConfig+0x23a>
 8002a5e:	e002      	b.n	8002a66 <HAL_RCC_OscConfig+0x2ea>
 8002a60:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 8170 	beq.w	8002d56 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a76:	4bd0      	ldr	r3, [pc, #832]	; (8002db8 <HAL_RCC_OscConfig+0x63c>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00c      	beq.n	8002a9c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a82:	4bcd      	ldr	r3, [pc, #820]	; (8002db8 <HAL_RCC_OscConfig+0x63c>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d16d      	bne.n	8002b6a <HAL_RCC_OscConfig+0x3ee>
 8002a8e:	4bca      	ldr	r3, [pc, #808]	; (8002db8 <HAL_RCC_OscConfig+0x63c>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a9a:	d166      	bne.n	8002b6a <HAL_RCC_OscConfig+0x3ee>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002aae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d102      	bne.n	8002acc <HAL_RCC_OscConfig+0x350>
 8002ac6:	4bbc      	ldr	r3, [pc, #752]	; (8002db8 <HAL_RCC_OscConfig+0x63c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	e013      	b.n	8002af4 <HAL_RCC_OscConfig+0x378>
 8002acc:	2302      	movs	r3, #2
 8002ace:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002ade:	2302      	movs	r3, #2
 8002ae0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ae4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002af0:	4bb1      	ldr	r3, [pc, #708]	; (8002db8 <HAL_RCC_OscConfig+0x63c>)
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	2202      	movs	r2, #2
 8002af6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002afa:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002afe:	fa92 f2a2 	rbit	r2, r2
 8002b02:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002b06:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b0a:	fab2 f282 	clz	r2, r2
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	f042 0220 	orr.w	r2, r2, #32
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	f002 021f 	and.w	r2, r2, #31
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <HAL_RCC_OscConfig+0x3ba>
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d002      	beq.n	8002b36 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	f000 bd31 	b.w	8003598 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b36:	4ba0      	ldr	r3, [pc, #640]	; (8002db8 <HAL_RCC_OscConfig+0x63c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	21f8      	movs	r1, #248	; 0xf8
 8002b46:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002b4e:	fa91 f1a1 	rbit	r1, r1
 8002b52:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002b56:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b5a:	fab1 f181 	clz	r1, r1
 8002b5e:	b2c9      	uxtb	r1, r1
 8002b60:	408b      	lsls	r3, r1
 8002b62:	4995      	ldr	r1, [pc, #596]	; (8002db8 <HAL_RCC_OscConfig+0x63c>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b68:	e0f5      	b.n	8002d56 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 8085 	beq.w	8002c80 <HAL_RCC_OscConfig+0x504>
 8002b76:	2301      	movs	r3, #1
 8002b78:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002b88:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7fe f8b9 	bl	8000d18 <HAL_GetTick>
 8002ba6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bac:	f7fe f8b4 	bl	8000d18 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d902      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	f000 bceb 	b.w	8003598 <HAL_RCC_OscConfig+0xe1c>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002bd4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d102      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x476>
 8002bec:	4b72      	ldr	r3, [pc, #456]	; (8002db8 <HAL_RCC_OscConfig+0x63c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	e013      	b.n	8002c1a <HAL_RCC_OscConfig+0x49e>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002c04:	2302      	movs	r3, #2
 8002c06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c0a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c16:	4b68      	ldr	r3, [pc, #416]	; (8002db8 <HAL_RCC_OscConfig+0x63c>)
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002c20:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002c24:	fa92 f2a2 	rbit	r2, r2
 8002c28:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002c2c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c30:	fab2 f282 	clz	r2, r2
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f042 0220 	orr.w	r2, r2, #32
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	f002 021f 	and.w	r2, r2, #31
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f202 	lsl.w	r2, r1, r2
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0af      	beq.n	8002bac <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4c:	4b5a      	ldr	r3, [pc, #360]	; (8002db8 <HAL_RCC_OscConfig+0x63c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	21f8      	movs	r1, #248	; 0xf8
 8002c5c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002c64:	fa91 f1a1 	rbit	r1, r1
 8002c68:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002c6c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c70:	fab1 f181 	clz	r1, r1
 8002c74:	b2c9      	uxtb	r1, r1
 8002c76:	408b      	lsls	r3, r1
 8002c78:	494f      	ldr	r1, [pc, #316]	; (8002db8 <HAL_RCC_OscConfig+0x63c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]
 8002c7e:	e06a      	b.n	8002d56 <HAL_RCC_OscConfig+0x5da>
 8002c80:	2301      	movs	r3, #1
 8002c82:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002c92:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ca0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2300      	movs	r3, #0
 8002caa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7fe f834 	bl	8000d18 <HAL_GetTick>
 8002cb0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb6:	f7fe f82f 	bl	8000d18 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d902      	bls.n	8002ccc <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	f000 bc66 	b.w	8003598 <HAL_RCC_OscConfig+0xe1c>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002cde:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	095b      	lsrs	r3, r3, #5
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d102      	bne.n	8002cfc <HAL_RCC_OscConfig+0x580>
 8002cf6:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_RCC_OscConfig+0x63c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	e013      	b.n	8002d24 <HAL_RCC_OscConfig+0x5a8>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002d0e:	2302      	movs	r3, #2
 8002d10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d20:	4b25      	ldr	r3, [pc, #148]	; (8002db8 <HAL_RCC_OscConfig+0x63c>)
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	2202      	movs	r2, #2
 8002d26:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002d2a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002d2e:	fa92 f2a2 	rbit	r2, r2
 8002d32:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002d36:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d3a:	fab2 f282 	clz	r2, r2
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	f042 0220 	orr.w	r2, r2, #32
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f002 021f 	and.w	r2, r2, #31
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1af      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80da 	beq.w	8002f1a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d069      	beq.n	8002e44 <HAL_RCC_OscConfig+0x6c8>
 8002d70:	2301      	movs	r3, #1
 8002d72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002d82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCC_OscConfig+0x640>)
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	461a      	mov	r2, r3
 8002d96:	2301      	movs	r3, #1
 8002d98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7fd ffbd 	bl	8000d18 <HAL_GetTick>
 8002d9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da2:	e00d      	b.n	8002dc0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da4:	f7fd ffb8 	bl	8000d18 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d905      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e3ef      	b.n	8003598 <HAL_RCC_OscConfig+0xe1c>
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	10908120 	.word	0x10908120
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dca:	fa93 f2a3 	rbit	r2, r3
 8002dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002dd8:	2202      	movs	r2, #2
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	fa93 f2a3 	rbit	r2, r3
 8002de6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002df0:	2202      	movs	r2, #2
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	fa93 f2a3 	rbit	r2, r3
 8002dfe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002e02:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e04:	4ba4      	ldr	r3, [pc, #656]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8002e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e08:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	6019      	str	r1, [r3, #0]
 8002e10:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	fa93 f1a3 	rbit	r1, r3
 8002e1a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e1e:	6019      	str	r1, [r3, #0]
  return result;
 8002e20:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f003 031f 	and.w	r3, r3, #31
 8002e36:	2101      	movs	r1, #1
 8002e38:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0b0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x628>
 8002e42:	e06a      	b.n	8002f1a <HAL_RCC_OscConfig+0x79e>
 8002e44:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	fa93 f2a3 	rbit	r2, r3
 8002e56:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e5a:	601a      	str	r2, [r3, #0]
  return result;
 8002e5c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e60:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4b8c      	ldr	r3, [pc, #560]	; (800309c <HAL_RCC_OscConfig+0x920>)
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	461a      	mov	r2, r3
 8002e72:	2300      	movs	r3, #0
 8002e74:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e76:	f7fd ff4f 	bl	8000d18 <HAL_GetTick>
 8002e7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e7e:	e009      	b.n	8002e94 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e80:	f7fd ff4a 	bl	8000d18 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e381      	b.n	8003598 <HAL_RCC_OscConfig+0xe1c>
 8002e94:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e98:	2202      	movs	r2, #2
 8002e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	fa93 f2a3 	rbit	r2, r3
 8002ea6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	fa93 f2a3 	rbit	r2, r3
 8002ebe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ec8:	2202      	movs	r2, #2
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	fa93 f2a3 	rbit	r2, r3
 8002ed6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002eda:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002edc:	4b6e      	ldr	r3, [pc, #440]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8002ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ee0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	6019      	str	r1, [r3, #0]
 8002ee8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	fa93 f1a3 	rbit	r1, r3
 8002ef2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ef6:	6019      	str	r1, [r3, #0]
  return result;
 8002ef8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	2101      	movs	r1, #1
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1b2      	bne.n	8002e80 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8157 	beq.w	80031d8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f30:	4b59      	ldr	r3, [pc, #356]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d112      	bne.n	8002f62 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f3c:	4b56      	ldr	r3, [pc, #344]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	4a55      	ldr	r2, [pc, #340]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8002f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f46:	61d3      	str	r3, [r2, #28]
 8002f48:	4b53      	ldr	r3, [pc, #332]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f50:	f107 030c 	add.w	r3, r7, #12
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f107 030c 	add.w	r3, r7, #12
 8002f5a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f62:	4b4f      	ldr	r3, [pc, #316]	; (80030a0 <HAL_RCC_OscConfig+0x924>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11a      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f6e:	4b4c      	ldr	r3, [pc, #304]	; (80030a0 <HAL_RCC_OscConfig+0x924>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a4b      	ldr	r2, [pc, #300]	; (80030a0 <HAL_RCC_OscConfig+0x924>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7a:	f7fd fecd 	bl	8000d18 <HAL_GetTick>
 8002f7e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f82:	e009      	b.n	8002f98 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f84:	f7fd fec8 	bl	8000d18 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b64      	cmp	r3, #100	; 0x64
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e2ff      	b.n	8003598 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_RCC_OscConfig+0x924>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0ef      	beq.n	8002f84 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa4:	1d3b      	adds	r3, r7, #4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d106      	bne.n	8002fbc <HAL_RCC_OscConfig+0x840>
 8002fae:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	4a39      	ldr	r2, [pc, #228]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6213      	str	r3, [r2, #32]
 8002fba:	e02f      	b.n	800301c <HAL_RCC_OscConfig+0x8a0>
 8002fbc:	1d3b      	adds	r3, r7, #4
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x864>
 8002fc6:	4b34      	ldr	r3, [pc, #208]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4a33      	ldr	r2, [pc, #204]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	6213      	str	r3, [r2, #32]
 8002fd2:	4b31      	ldr	r3, [pc, #196]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	4a30      	ldr	r2, [pc, #192]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8002fd8:	f023 0304 	bic.w	r3, r3, #4
 8002fdc:	6213      	str	r3, [r2, #32]
 8002fde:	e01d      	b.n	800301c <HAL_RCC_OscConfig+0x8a0>
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b05      	cmp	r3, #5
 8002fe8:	d10c      	bne.n	8003004 <HAL_RCC_OscConfig+0x888>
 8002fea:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	4a2a      	ldr	r2, [pc, #168]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8002ff0:	f043 0304 	orr.w	r3, r3, #4
 8002ff4:	6213      	str	r3, [r2, #32]
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	4a27      	ldr	r2, [pc, #156]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6213      	str	r3, [r2, #32]
 8003002:	e00b      	b.n	800301c <HAL_RCC_OscConfig+0x8a0>
 8003004:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4a23      	ldr	r2, [pc, #140]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 800300a:	f023 0301 	bic.w	r3, r3, #1
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	4b21      	ldr	r3, [pc, #132]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a20      	ldr	r2, [pc, #128]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8003016:	f023 0304 	bic.w	r3, r3, #4
 800301a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800301c:	1d3b      	adds	r3, r7, #4
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d06a      	beq.n	80030fc <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003026:	f7fd fe77 	bl	8000d18 <HAL_GetTick>
 800302a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302e:	e00b      	b.n	8003048 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fd fe72 	bl	8000d18 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003040:	4293      	cmp	r3, r2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e2a7      	b.n	8003598 <HAL_RCC_OscConfig+0xe1c>
 8003048:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800304c:	2202      	movs	r2, #2
 800304e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	fa93 f2a3 	rbit	r2, r3
 800305a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003064:	2202      	movs	r2, #2
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	fa93 f2a3 	rbit	r2, r3
 8003072:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003076:	601a      	str	r2, [r3, #0]
  return result;
 8003078:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800307c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d108      	bne.n	80030a4 <HAL_RCC_OscConfig+0x928>
 8003092:	4b01      	ldr	r3, [pc, #4]	; (8003098 <HAL_RCC_OscConfig+0x91c>)
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	e013      	b.n	80030c0 <HAL_RCC_OscConfig+0x944>
 8003098:	40021000 	.word	0x40021000
 800309c:	10908120 	.word	0x10908120
 80030a0:	40007000 	.word	0x40007000
 80030a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030a8:	2202      	movs	r2, #2
 80030aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	fa93 f2a3 	rbit	r2, r3
 80030b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	4bc0      	ldr	r3, [pc, #768]	; (80033c0 <HAL_RCC_OscConfig+0xc44>)
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80030c4:	2102      	movs	r1, #2
 80030c6:	6011      	str	r1, [r2, #0]
 80030c8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	fa92 f1a2 	rbit	r1, r2
 80030d2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80030d6:	6011      	str	r1, [r2, #0]
  return result;
 80030d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	fab2 f282 	clz	r2, r2
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	f002 021f 	and.w	r2, r2, #31
 80030ee:	2101      	movs	r1, #1
 80030f0:	fa01 f202 	lsl.w	r2, r1, r2
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d09a      	beq.n	8003030 <HAL_RCC_OscConfig+0x8b4>
 80030fa:	e063      	b.n	80031c4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fc:	f7fd fe0c 	bl	8000d18 <HAL_GetTick>
 8003100:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003104:	e00b      	b.n	800311e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7fd fe07 	bl	8000d18 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	; 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e23c      	b.n	8003598 <HAL_RCC_OscConfig+0xe1c>
 800311e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003122:	2202      	movs	r2, #2
 8003124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	fa93 f2a3 	rbit	r2, r3
 8003130:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800313a:	2202      	movs	r2, #2
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	fa93 f2a3 	rbit	r2, r3
 8003148:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800314c:	601a      	str	r2, [r3, #0]
  return result;
 800314e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003152:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003154:	fab3 f383 	clz	r3, r3
 8003158:	b2db      	uxtb	r3, r3
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	b2db      	uxtb	r3, r3
 800315e:	f043 0302 	orr.w	r3, r3, #2
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d102      	bne.n	800316e <HAL_RCC_OscConfig+0x9f2>
 8003168:	4b95      	ldr	r3, [pc, #596]	; (80033c0 <HAL_RCC_OscConfig+0xc44>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	e00d      	b.n	800318a <HAL_RCC_OscConfig+0xa0e>
 800316e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003172:	2202      	movs	r2, #2
 8003174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	fa93 f2a3 	rbit	r2, r3
 8003180:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	4b8e      	ldr	r3, [pc, #568]	; (80033c0 <HAL_RCC_OscConfig+0xc44>)
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800318e:	2102      	movs	r1, #2
 8003190:	6011      	str	r1, [r2, #0]
 8003192:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	fa92 f1a2 	rbit	r1, r2
 800319c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80031a0:	6011      	str	r1, [r2, #0]
  return result;
 80031a2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	fab2 f282 	clz	r2, r2
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	f002 021f 	and.w	r2, r2, #31
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f202 	lsl.w	r2, r1, r2
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1a0      	bne.n	8003106 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031c4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d105      	bne.n	80031d8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031cc:	4b7c      	ldr	r3, [pc, #496]	; (80033c0 <HAL_RCC_OscConfig+0xc44>)
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	4a7b      	ldr	r2, [pc, #492]	; (80033c0 <HAL_RCC_OscConfig+0xc44>)
 80031d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d8:	1d3b      	adds	r3, r7, #4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 81d9 	beq.w	8003596 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e4:	4b76      	ldr	r3, [pc, #472]	; (80033c0 <HAL_RCC_OscConfig+0xc44>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	f000 81a6 	beq.w	800353e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	f040 811e 	bne.w	800343a <HAL_RCC_OscConfig+0xcbe>
 80031fe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003202:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003206:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	fa93 f2a3 	rbit	r2, r3
 8003212:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003216:	601a      	str	r2, [r3, #0]
  return result;
 8003218:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800321c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003228:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	461a      	mov	r2, r3
 8003230:	2300      	movs	r3, #0
 8003232:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fd fd70 	bl	8000d18 <HAL_GetTick>
 8003238:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800323c:	e009      	b.n	8003252 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323e:	f7fd fd6b 	bl	8000d18 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e1a2      	b.n	8003598 <HAL_RCC_OscConfig+0xe1c>
 8003252:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003256:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800325a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	fa93 f2a3 	rbit	r2, r3
 8003266:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800326a:	601a      	str	r2, [r3, #0]
  return result;
 800326c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003270:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	095b      	lsrs	r3, r3, #5
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b01      	cmp	r3, #1
 8003284:	d102      	bne.n	800328c <HAL_RCC_OscConfig+0xb10>
 8003286:	4b4e      	ldr	r3, [pc, #312]	; (80033c0 <HAL_RCC_OscConfig+0xc44>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	e01b      	b.n	80032c4 <HAL_RCC_OscConfig+0xb48>
 800328c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003290:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003294:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	fa93 f2a3 	rbit	r2, r3
 80032a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	fa93 f2a3 	rbit	r2, r3
 80032ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	4b3f      	ldr	r3, [pc, #252]	; (80033c0 <HAL_RCC_OscConfig+0xc44>)
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80032c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032cc:	6011      	str	r1, [r2, #0]
 80032ce:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	fa92 f1a2 	rbit	r1, r2
 80032d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032dc:	6011      	str	r1, [r2, #0]
  return result;
 80032de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	fab2 f282 	clz	r2, r2
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	f042 0220 	orr.w	r2, r2, #32
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	f002 021f 	and.w	r2, r2, #31
 80032f4:	2101      	movs	r1, #1
 80032f6:	fa01 f202 	lsl.w	r2, r1, r2
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d19e      	bne.n	800323e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003300:	4b2f      	ldr	r3, [pc, #188]	; (80033c0 <HAL_RCC_OscConfig+0xc44>)
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	f023 020f 	bic.w	r2, r3, #15
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	492c      	ldr	r1, [pc, #176]	; (80033c0 <HAL_RCC_OscConfig+0xc44>)
 8003310:	4313      	orrs	r3, r2
 8003312:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003314:	4b2a      	ldr	r3, [pc, #168]	; (80033c0 <HAL_RCC_OscConfig+0xc44>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800331c:	1d3b      	adds	r3, r7, #4
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6a19      	ldr	r1, [r3, #32]
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	430b      	orrs	r3, r1
 800332a:	4925      	ldr	r1, [pc, #148]	; (80033c0 <HAL_RCC_OscConfig+0xc44>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
 8003330:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003334:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003338:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	fa93 f2a3 	rbit	r2, r3
 8003344:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003348:	601a      	str	r2, [r3, #0]
  return result;
 800334a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800334e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003350:	fab3 f383 	clz	r3, r3
 8003354:	b2db      	uxtb	r3, r3
 8003356:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800335a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	461a      	mov	r2, r3
 8003362:	2301      	movs	r3, #1
 8003364:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fd fcd7 	bl	8000d18 <HAL_GetTick>
 800336a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800336e:	e009      	b.n	8003384 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003370:	f7fd fcd2 	bl	8000d18 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e109      	b.n	8003598 <HAL_RCC_OscConfig+0xe1c>
 8003384:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003388:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800338c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	fa93 f2a3 	rbit	r2, r3
 8003398:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800339c:	601a      	str	r2, [r3, #0]
  return result;
 800339e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033a4:	fab3 f383 	clz	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d105      	bne.n	80033c4 <HAL_RCC_OscConfig+0xc48>
 80033b8:	4b01      	ldr	r3, [pc, #4]	; (80033c0 <HAL_RCC_OscConfig+0xc44>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	e01e      	b.n	80033fc <HAL_RCC_OscConfig+0xc80>
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000
 80033c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	fa93 f2a3 	rbit	r2, r3
 80033d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	fa93 f2a3 	rbit	r2, r3
 80033f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	4b6a      	ldr	r3, [pc, #424]	; (80035a4 <HAL_RCC_OscConfig+0xe28>)
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003400:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003404:	6011      	str	r1, [r2, #0]
 8003406:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	fa92 f1a2 	rbit	r1, r2
 8003410:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003414:	6011      	str	r1, [r2, #0]
  return result;
 8003416:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	fab2 f282 	clz	r2, r2
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	f042 0220 	orr.w	r2, r2, #32
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	f002 021f 	and.w	r2, r2, #31
 800342c:	2101      	movs	r1, #1
 800342e:	fa01 f202 	lsl.w	r2, r1, r2
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d09b      	beq.n	8003370 <HAL_RCC_OscConfig+0xbf4>
 8003438:	e0ad      	b.n	8003596 <HAL_RCC_OscConfig+0xe1a>
 800343a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800343e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003442:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	fa93 f2a3 	rbit	r2, r3
 800344e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003452:	601a      	str	r2, [r3, #0]
  return result;
 8003454:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003458:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003464:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	461a      	mov	r2, r3
 800346c:	2300      	movs	r3, #0
 800346e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fd fc52 	bl	8000d18 <HAL_GetTick>
 8003474:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003478:	e009      	b.n	800348e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347a:	f7fd fc4d 	bl	8000d18 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e084      	b.n	8003598 <HAL_RCC_OscConfig+0xe1c>
 800348e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003492:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	fa93 f2a3 	rbit	r2, r3
 80034a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034a6:	601a      	str	r2, [r3, #0]
  return result;
 80034a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d102      	bne.n	80034c8 <HAL_RCC_OscConfig+0xd4c>
 80034c2:	4b38      	ldr	r3, [pc, #224]	; (80035a4 <HAL_RCC_OscConfig+0xe28>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	e01b      	b.n	8003500 <HAL_RCC_OscConfig+0xd84>
 80034c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	fa93 f2a3 	rbit	r2, r3
 80034dc:	f107 0320 	add.w	r3, r7, #32
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	f107 031c 	add.w	r3, r7, #28
 80034e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	f107 031c 	add.w	r3, r7, #28
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	fa93 f2a3 	rbit	r2, r3
 80034f6:	f107 0318 	add.w	r3, r7, #24
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	4b29      	ldr	r3, [pc, #164]	; (80035a4 <HAL_RCC_OscConfig+0xe28>)
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	f107 0214 	add.w	r2, r7, #20
 8003504:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003508:	6011      	str	r1, [r2, #0]
 800350a:	f107 0214 	add.w	r2, r7, #20
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	fa92 f1a2 	rbit	r1, r2
 8003514:	f107 0210 	add.w	r2, r7, #16
 8003518:	6011      	str	r1, [r2, #0]
  return result;
 800351a:	f107 0210 	add.w	r2, r7, #16
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	fab2 f282 	clz	r2, r2
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	f042 0220 	orr.w	r2, r2, #32
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	f002 021f 	and.w	r2, r2, #31
 8003530:	2101      	movs	r1, #1
 8003532:	fa01 f202 	lsl.w	r2, r1, r2
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d19e      	bne.n	800347a <HAL_RCC_OscConfig+0xcfe>
 800353c:	e02b      	b.n	8003596 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800353e:	1d3b      	adds	r3, r7, #4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e025      	b.n	8003598 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800354c:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <HAL_RCC_OscConfig+0xe28>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003554:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <HAL_RCC_OscConfig+0xe28>)
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800355c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003560:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003564:	1d3b      	adds	r3, r7, #4
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	429a      	cmp	r2, r3
 800356c:	d111      	bne.n	8003592 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800356e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003572:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800357c:	429a      	cmp	r2, r3
 800357e:	d108      	bne.n	8003592 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003580:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003584:	f003 020f 	and.w	r2, r3, #15
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800358e:	429a      	cmp	r2, r3
 8003590:	d001      	beq.n	8003596 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000

080035a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b09e      	sub	sp, #120	; 0x78
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e162      	b.n	8003886 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c0:	4b90      	ldr	r3, [pc, #576]	; (8003804 <HAL_RCC_ClockConfig+0x25c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d910      	bls.n	80035f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b8d      	ldr	r3, [pc, #564]	; (8003804 <HAL_RCC_ClockConfig+0x25c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 0207 	bic.w	r2, r3, #7
 80035d6:	498b      	ldr	r1, [pc, #556]	; (8003804 <HAL_RCC_ClockConfig+0x25c>)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b89      	ldr	r3, [pc, #548]	; (8003804 <HAL_RCC_ClockConfig+0x25c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e14a      	b.n	8003886 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035fc:	4b82      	ldr	r3, [pc, #520]	; (8003808 <HAL_RCC_ClockConfig+0x260>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	497f      	ldr	r1, [pc, #508]	; (8003808 <HAL_RCC_ClockConfig+0x260>)
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 80dc 	beq.w	80037d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d13c      	bne.n	800369e <HAL_RCC_ClockConfig+0xf6>
 8003624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003628:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003634:	fab3 f383 	clz	r3, r3
 8003638:	b2db      	uxtb	r3, r3
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d102      	bne.n	800364e <HAL_RCC_ClockConfig+0xa6>
 8003648:	4b6f      	ldr	r3, [pc, #444]	; (8003808 <HAL_RCC_ClockConfig+0x260>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	e00f      	b.n	800366e <HAL_RCC_ClockConfig+0xc6>
 800364e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003652:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	667b      	str	r3, [r7, #100]	; 0x64
 800365c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003660:	663b      	str	r3, [r7, #96]	; 0x60
 8003662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003664:	fa93 f3a3 	rbit	r3, r3
 8003668:	65fb      	str	r3, [r7, #92]	; 0x5c
 800366a:	4b67      	ldr	r3, [pc, #412]	; (8003808 <HAL_RCC_ClockConfig+0x260>)
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003672:	65ba      	str	r2, [r7, #88]	; 0x58
 8003674:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003676:	fa92 f2a2 	rbit	r2, r2
 800367a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800367c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800367e:	fab2 f282 	clz	r2, r2
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	f042 0220 	orr.w	r2, r2, #32
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	f002 021f 	and.w	r2, r2, #31
 800368e:	2101      	movs	r1, #1
 8003690:	fa01 f202 	lsl.w	r2, r1, r2
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d17b      	bne.n	8003792 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0f3      	b.n	8003886 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d13c      	bne.n	8003720 <HAL_RCC_ClockConfig+0x178>
 80036a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d102      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x128>
 80036ca:	4b4f      	ldr	r3, [pc, #316]	; (8003808 <HAL_RCC_ClockConfig+0x260>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	e00f      	b.n	80036f0 <HAL_RCC_ClockConfig+0x148>
 80036d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	647b      	str	r3, [r7, #68]	; 0x44
 80036de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036e2:	643b      	str	r3, [r7, #64]	; 0x40
 80036e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e6:	fa93 f3a3 	rbit	r3, r3
 80036ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ec:	4b46      	ldr	r3, [pc, #280]	; (8003808 <HAL_RCC_ClockConfig+0x260>)
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80036f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036f8:	fa92 f2a2 	rbit	r2, r2
 80036fc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80036fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003700:	fab2 f282 	clz	r2, r2
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	f042 0220 	orr.w	r2, r2, #32
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	f002 021f 	and.w	r2, r2, #31
 8003710:	2101      	movs	r1, #1
 8003712:	fa01 f202 	lsl.w	r2, r1, r2
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d13a      	bne.n	8003792 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0b2      	b.n	8003886 <HAL_RCC_ClockConfig+0x2de>
 8003720:	2302      	movs	r3, #2
 8003722:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	b2db      	uxtb	r3, r3
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d102      	bne.n	8003748 <HAL_RCC_ClockConfig+0x1a0>
 8003742:	4b31      	ldr	r3, [pc, #196]	; (8003808 <HAL_RCC_ClockConfig+0x260>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	e00d      	b.n	8003764 <HAL_RCC_ClockConfig+0x1bc>
 8003748:	2302      	movs	r3, #2
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
 8003754:	2302      	movs	r3, #2
 8003756:	623b      	str	r3, [r7, #32]
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	4b29      	ldr	r3, [pc, #164]	; (8003808 <HAL_RCC_ClockConfig+0x260>)
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	2202      	movs	r2, #2
 8003766:	61ba      	str	r2, [r7, #24]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	fa92 f2a2 	rbit	r2, r2
 800376e:	617a      	str	r2, [r7, #20]
  return result;
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	fab2 f282 	clz	r2, r2
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	f042 0220 	orr.w	r2, r2, #32
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	f002 021f 	and.w	r2, r2, #31
 8003782:	2101      	movs	r1, #1
 8003784:	fa01 f202 	lsl.w	r2, r1, r2
 8003788:	4013      	ands	r3, r2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e079      	b.n	8003886 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003792:	4b1d      	ldr	r3, [pc, #116]	; (8003808 <HAL_RCC_ClockConfig+0x260>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f023 0203 	bic.w	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	491a      	ldr	r1, [pc, #104]	; (8003808 <HAL_RCC_ClockConfig+0x260>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a4:	f7fd fab8 	bl	8000d18 <HAL_GetTick>
 80037a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	e00a      	b.n	80037c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ac:	f7fd fab4 	bl	8000d18 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e061      	b.n	8003886 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c2:	4b11      	ldr	r3, [pc, #68]	; (8003808 <HAL_RCC_ClockConfig+0x260>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f003 020c 	and.w	r2, r3, #12
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d1eb      	bne.n	80037ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_ClockConfig+0x25c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d214      	bcs.n	800380c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e2:	4b08      	ldr	r3, [pc, #32]	; (8003804 <HAL_RCC_ClockConfig+0x25c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f023 0207 	bic.w	r2, r3, #7
 80037ea:	4906      	ldr	r1, [pc, #24]	; (8003804 <HAL_RCC_ClockConfig+0x25c>)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f2:	4b04      	ldr	r3, [pc, #16]	; (8003804 <HAL_RCC_ClockConfig+0x25c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e040      	b.n	8003886 <HAL_RCC_ClockConfig+0x2de>
 8003804:	40022000 	.word	0x40022000
 8003808:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003818:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_RCC_ClockConfig+0x2e8>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	491a      	ldr	r1, [pc, #104]	; (8003890 <HAL_RCC_ClockConfig+0x2e8>)
 8003826:	4313      	orrs	r3, r2
 8003828:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d009      	beq.n	800384a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003836:	4b16      	ldr	r3, [pc, #88]	; (8003890 <HAL_RCC_ClockConfig+0x2e8>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4912      	ldr	r1, [pc, #72]	; (8003890 <HAL_RCC_ClockConfig+0x2e8>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800384a:	f000 f829 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 800384e:	4601      	mov	r1, r0
 8003850:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <HAL_RCC_ClockConfig+0x2e8>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003858:	22f0      	movs	r2, #240	; 0xf0
 800385a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	fa92 f2a2 	rbit	r2, r2
 8003862:	60fa      	str	r2, [r7, #12]
  return result;
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	fab2 f282 	clz	r2, r2
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	40d3      	lsrs	r3, r2
 800386e:	4a09      	ldr	r2, [pc, #36]	; (8003894 <HAL_RCC_ClockConfig+0x2ec>)
 8003870:	5cd3      	ldrb	r3, [r2, r3]
 8003872:	fa21 f303 	lsr.w	r3, r1, r3
 8003876:	4a08      	ldr	r2, [pc, #32]	; (8003898 <HAL_RCC_ClockConfig+0x2f0>)
 8003878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800387a:	4b08      	ldr	r3, [pc, #32]	; (800389c <HAL_RCC_ClockConfig+0x2f4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fd fa06 	bl	8000c90 <HAL_InitTick>
  
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3778      	adds	r7, #120	; 0x78
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	08005b94 	.word	0x08005b94
 8003898:	20000000 	.word	0x20000000
 800389c:	20000004 	.word	0x20000004

080038a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b08b      	sub	sp, #44	; 0x2c
 80038a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	2300      	movs	r3, #0
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80038ba:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d002      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x30>
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d003      	beq.n	80038d6 <HAL_RCC_GetSysClockFreq+0x36>
 80038ce:	e03f      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038d2:	623b      	str	r3, [r7, #32]
      break;
 80038d4:	e03f      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80038dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80038e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	fa92 f2a2 	rbit	r2, r2
 80038e8:	607a      	str	r2, [r7, #4]
  return result;
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	fab2 f282 	clz	r2, r2
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	40d3      	lsrs	r3, r2
 80038f4:	4a1d      	ldr	r2, [pc, #116]	; (800396c <HAL_RCC_GetSysClockFreq+0xcc>)
 80038f6:	5cd3      	ldrb	r3, [r2, r3]
 80038f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80038fa:	4b1a      	ldr	r3, [pc, #104]	; (8003964 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	220f      	movs	r2, #15
 8003904:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	fa92 f2a2 	rbit	r2, r2
 800390c:	60fa      	str	r2, [r7, #12]
  return result;
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	fab2 f282 	clz	r2, r2
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	40d3      	lsrs	r3, r2
 8003918:	4a15      	ldr	r2, [pc, #84]	; (8003970 <HAL_RCC_GetSysClockFreq+0xd0>)
 800391a:	5cd3      	ldrb	r3, [r2, r3]
 800391c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003928:	4a0f      	ldr	r2, [pc, #60]	; (8003968 <HAL_RCC_GetSysClockFreq+0xc8>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
 8003938:	e007      	b.n	800394a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800393a:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <HAL_RCC_GetSysClockFreq+0xc8>)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	fb02 f303 	mul.w	r3, r2, r3
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	623b      	str	r3, [r7, #32]
      break;
 800394e:	e002      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003952:	623b      	str	r3, [r7, #32]
      break;
 8003954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003956:	6a3b      	ldr	r3, [r7, #32]
}
 8003958:	4618      	mov	r0, r3
 800395a:	372c      	adds	r7, #44	; 0x2c
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	40021000 	.word	0x40021000
 8003968:	007a1200 	.word	0x007a1200
 800396c:	08005bac 	.word	0x08005bac
 8003970:	08005bbc 	.word	0x08005bbc

08003974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <HAL_RCC_GetHCLKFreq+0x14>)
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20000000 	.word	0x20000000

0800398c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003992:	f7ff ffef 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 8003996:	4601      	mov	r1, r0
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80039a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	fa92 f2a2 	rbit	r2, r2
 80039ac:	603a      	str	r2, [r7, #0]
  return result;
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	fab2 f282 	clz	r2, r2
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	40d3      	lsrs	r3, r2
 80039b8:	4a04      	ldr	r2, [pc, #16]	; (80039cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80039ba:	5cd3      	ldrb	r3, [r2, r3]
 80039bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40021000 	.word	0x40021000
 80039cc:	08005ba4 	.word	0x08005ba4

080039d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039d6:	f7ff ffcd 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 80039da:	4601      	mov	r1, r0
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80039e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80039e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	fa92 f2a2 	rbit	r2, r2
 80039f0:	603a      	str	r2, [r7, #0]
  return result;
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	fab2 f282 	clz	r2, r2
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	40d3      	lsrs	r3, r2
 80039fc:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <HAL_RCC_GetPCLK2Freq+0x40>)
 80039fe:	5cd3      	ldrb	r3, [r2, r3]
 8003a00:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	08005ba4 	.word	0x08005ba4

08003a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b092      	sub	sp, #72	; 0x48
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80d7 	beq.w	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003a32:	2300      	movs	r3, #0
 8003a34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a38:	4b4e      	ldr	r3, [pc, #312]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10e      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a44:	4b4b      	ldr	r3, [pc, #300]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	4a4a      	ldr	r2, [pc, #296]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	61d3      	str	r3, [r2, #28]
 8003a50:	4b48      	ldr	r3, [pc, #288]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a62:	4b45      	ldr	r3, [pc, #276]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d118      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a6e:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a41      	ldr	r2, [pc, #260]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a7a:	f7fd f94d 	bl	8000d18 <HAL_GetTick>
 8003a7e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a80:	e008      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a82:	f7fd f949 	bl	8000d18 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b64      	cmp	r3, #100	; 0x64
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e1d6      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a94:	4b38      	ldr	r3, [pc, #224]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aa0:	4b34      	ldr	r3, [pc, #208]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 8084 	beq.w	8003bba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d07c      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ac0:	4b2c      	ldr	r3, [pc, #176]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ace:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ada:	fab3 f383 	clz	r3, r3
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4b26      	ldr	r3, [pc, #152]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2301      	movs	r3, #1
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003af2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003afe:	fab3 f383 	clz	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	4b1d      	ldr	r3, [pc, #116]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	2300      	movs	r3, #0
 8003b10:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b12:	4a18      	ldr	r2, [pc, #96]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b16:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d04b      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b22:	f7fd f8f9 	bl	8000d18 <HAL_GetTick>
 8003b26:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b28:	e00a      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2a:	f7fd f8f5 	bl	8000d18 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e180      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003b40:	2302      	movs	r3, #2
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	fa93 f3a3 	rbit	r3, r3
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	623b      	str	r3, [r7, #32]
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	fa93 f3a3 	rbit	r3, r3
 8003b56:	61fb      	str	r3, [r7, #28]
  return result;
 8003b58:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5a:	fab3 f383 	clz	r3, r3
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	095b      	lsrs	r3, r3, #5
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f043 0302 	orr.w	r3, r3, #2
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d108      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b6e:	4b01      	ldr	r3, [pc, #4]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	e00d      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	10908100 	.word	0x10908100
 8003b80:	2302      	movs	r3, #2
 8003b82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	fa93 f3a3 	rbit	r3, r3
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	4ba0      	ldr	r3, [pc, #640]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	2202      	movs	r2, #2
 8003b92:	613a      	str	r2, [r7, #16]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	fa92 f2a2 	rbit	r2, r2
 8003b9a:	60fa      	str	r2, [r7, #12]
  return result;
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	fab2 f282 	clz	r2, r2
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	f002 021f 	and.w	r2, r2, #31
 8003bae:	2101      	movs	r1, #1
 8003bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0b7      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bba:	4b95      	ldr	r3, [pc, #596]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4992      	ldr	r1, [pc, #584]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d105      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd4:	4b8e      	ldr	r3, [pc, #568]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	4a8d      	ldr	r2, [pc, #564]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bec:	4b88      	ldr	r3, [pc, #544]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	f023 0203 	bic.w	r2, r3, #3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4985      	ldr	r1, [pc, #532]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c0a:	4b81      	ldr	r3, [pc, #516]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	497e      	ldr	r1, [pc, #504]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c28:	4b79      	ldr	r3, [pc, #484]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	4976      	ldr	r1, [pc, #472]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c46:	4b72      	ldr	r3, [pc, #456]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	f023 0210 	bic.w	r2, r3, #16
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	496f      	ldr	r1, [pc, #444]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c64:	4b6a      	ldr	r3, [pc, #424]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	4967      	ldr	r1, [pc, #412]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c82:	4b63      	ldr	r3, [pc, #396]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f023 0220 	bic.w	r2, r3, #32
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	4960      	ldr	r1, [pc, #384]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ca0:	4b5b      	ldr	r3, [pc, #364]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	4958      	ldr	r1, [pc, #352]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cbe:	4b54      	ldr	r3, [pc, #336]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	4951      	ldr	r1, [pc, #324]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cdc:	4b4c      	ldr	r3, [pc, #304]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	4949      	ldr	r1, [pc, #292]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cfa:	4b45      	ldr	r3, [pc, #276]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	4942      	ldr	r1, [pc, #264]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d18:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	493a      	ldr	r1, [pc, #232]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003d36:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	4933      	ldr	r1, [pc, #204]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d54:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d60:	492b      	ldr	r1, [pc, #172]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d72:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4924      	ldr	r1, [pc, #144]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003d90:	4b1f      	ldr	r3, [pc, #124]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	491c      	ldr	r1, [pc, #112]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003dae:	4b18      	ldr	r3, [pc, #96]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	4915      	ldr	r1, [pc, #84]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003dcc:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd8:	490d      	ldr	r1, [pc, #52]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003dea:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df6:	4906      	ldr	r1, [pc, #24]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00c      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003e08:	4b01      	ldr	r3, [pc, #4]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	e002      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1c:	490b      	ldr	r1, [pc, #44]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3a:	4904      	ldr	r1, [pc, #16]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3748      	adds	r7, #72	; 0x48
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000

08003e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e01d      	b.n	8003e9e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fc fd2e 	bl	80008d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f000 f8ee 	bl	8004070 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <HAL_TIM_Base_Start+0x50>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b06      	cmp	r3, #6
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_TIM_Base_Start+0x3a>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed0:	d007      	beq.n	8003ee2 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0201 	orr.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	00010007 	.word	0x00010007

08003efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_TIM_ConfigClockSource+0x18>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e0a8      	b.n	8004066 <HAL_TIM_ConfigClockSource+0x16a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d067      	beq.n	8004020 <HAL_TIM_ConfigClockSource+0x124>
 8003f50:	2b40      	cmp	r3, #64	; 0x40
 8003f52:	d80b      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x70>
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d073      	beq.n	8004040 <HAL_TIM_ConfigClockSource+0x144>
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d802      	bhi.n	8003f62 <HAL_TIM_ConfigClockSource+0x66>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d06f      	beq.n	8004040 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003f60:	e078      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d06c      	beq.n	8004040 <HAL_TIM_ConfigClockSource+0x144>
 8003f66:	2b30      	cmp	r3, #48	; 0x30
 8003f68:	d06a      	beq.n	8004040 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003f6a:	e073      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003f6c:	2b70      	cmp	r3, #112	; 0x70
 8003f6e:	d00d      	beq.n	8003f8c <HAL_TIM_ConfigClockSource+0x90>
 8003f70:	2b70      	cmp	r3, #112	; 0x70
 8003f72:	d804      	bhi.n	8003f7e <HAL_TIM_ConfigClockSource+0x82>
 8003f74:	2b50      	cmp	r3, #80	; 0x50
 8003f76:	d033      	beq.n	8003fe0 <HAL_TIM_ConfigClockSource+0xe4>
 8003f78:	2b60      	cmp	r3, #96	; 0x60
 8003f7a:	d041      	beq.n	8004000 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003f7c:	e06a      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f82:	d066      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x156>
 8003f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f88:	d017      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003f8a:	e063      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6818      	ldr	r0, [r3, #0]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	6899      	ldr	r1, [r3, #8]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f000 f980 	bl	80042a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	609a      	str	r2, [r3, #8]
      break;
 8003fb8:	e04c      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6899      	ldr	r1, [r3, #8]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f000 f969 	bl	80042a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fdc:	609a      	str	r2, [r3, #8]
      break;
 8003fde:	e039      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	6859      	ldr	r1, [r3, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	461a      	mov	r2, r3
 8003fee:	f000 f8dd 	bl	80041ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2150      	movs	r1, #80	; 0x50
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 f936 	bl	800426a <TIM_ITRx_SetConfig>
      break;
 8003ffe:	e029      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	6859      	ldr	r1, [r3, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	461a      	mov	r2, r3
 800400e:	f000 f8fc 	bl	800420a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2160      	movs	r1, #96	; 0x60
 8004018:	4618      	mov	r0, r3
 800401a:	f000 f926 	bl	800426a <TIM_ITRx_SetConfig>
      break;
 800401e:	e019      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	6859      	ldr	r1, [r3, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	461a      	mov	r2, r3
 800402e:	f000 f8bd 	bl	80041ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2140      	movs	r1, #64	; 0x40
 8004038:	4618      	mov	r0, r3
 800403a:	f000 f916 	bl	800426a <TIM_ITRx_SetConfig>
      break;
 800403e:	e009      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4619      	mov	r1, r3
 800404a:	4610      	mov	r0, r2
 800404c:	f000 f90d 	bl	800426a <TIM_ITRx_SetConfig>
      break;
 8004050:	e000      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004052:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a42      	ldr	r2, [pc, #264]	; (800418c <TIM_Base_SetConfig+0x11c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408e:	d00f      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a3f      	ldr	r2, [pc, #252]	; (8004190 <TIM_Base_SetConfig+0x120>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00b      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a3e      	ldr	r2, [pc, #248]	; (8004194 <TIM_Base_SetConfig+0x124>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d007      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a3d      	ldr	r2, [pc, #244]	; (8004198 <TIM_Base_SetConfig+0x128>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a3c      	ldr	r2, [pc, #240]	; (800419c <TIM_Base_SetConfig+0x12c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d108      	bne.n	80040c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a31      	ldr	r2, [pc, #196]	; (800418c <TIM_Base_SetConfig+0x11c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01f      	beq.n	800410a <TIM_Base_SetConfig+0x9a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d0:	d01b      	beq.n	800410a <TIM_Base_SetConfig+0x9a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a2e      	ldr	r2, [pc, #184]	; (8004190 <TIM_Base_SetConfig+0x120>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d017      	beq.n	800410a <TIM_Base_SetConfig+0x9a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a2d      	ldr	r2, [pc, #180]	; (8004194 <TIM_Base_SetConfig+0x124>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d013      	beq.n	800410a <TIM_Base_SetConfig+0x9a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a2c      	ldr	r2, [pc, #176]	; (8004198 <TIM_Base_SetConfig+0x128>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00f      	beq.n	800410a <TIM_Base_SetConfig+0x9a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a2c      	ldr	r2, [pc, #176]	; (80041a0 <TIM_Base_SetConfig+0x130>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00b      	beq.n	800410a <TIM_Base_SetConfig+0x9a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a2b      	ldr	r2, [pc, #172]	; (80041a4 <TIM_Base_SetConfig+0x134>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d007      	beq.n	800410a <TIM_Base_SetConfig+0x9a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a2a      	ldr	r2, [pc, #168]	; (80041a8 <TIM_Base_SetConfig+0x138>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d003      	beq.n	800410a <TIM_Base_SetConfig+0x9a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a25      	ldr	r2, [pc, #148]	; (800419c <TIM_Base_SetConfig+0x12c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d108      	bne.n	800411c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a12      	ldr	r2, [pc, #72]	; (800418c <TIM_Base_SetConfig+0x11c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d013      	beq.n	8004170 <TIM_Base_SetConfig+0x100>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a13      	ldr	r2, [pc, #76]	; (8004198 <TIM_Base_SetConfig+0x128>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00f      	beq.n	8004170 <TIM_Base_SetConfig+0x100>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a13      	ldr	r2, [pc, #76]	; (80041a0 <TIM_Base_SetConfig+0x130>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00b      	beq.n	8004170 <TIM_Base_SetConfig+0x100>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a12      	ldr	r2, [pc, #72]	; (80041a4 <TIM_Base_SetConfig+0x134>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d007      	beq.n	8004170 <TIM_Base_SetConfig+0x100>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a11      	ldr	r2, [pc, #68]	; (80041a8 <TIM_Base_SetConfig+0x138>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d003      	beq.n	8004170 <TIM_Base_SetConfig+0x100>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a0c      	ldr	r2, [pc, #48]	; (800419c <TIM_Base_SetConfig+0x12c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d103      	bne.n	8004178 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	615a      	str	r2, [r3, #20]
}
 800417e:	bf00      	nop
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40012c00 	.word	0x40012c00
 8004190:	40000400 	.word	0x40000400
 8004194:	40000800 	.word	0x40000800
 8004198:	40013400 	.word	0x40013400
 800419c:	40015000 	.word	0x40015000
 80041a0:	40014000 	.word	0x40014000
 80041a4:	40014400 	.word	0x40014400
 80041a8:	40014800 	.word	0x40014800

080041ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f023 0201 	bic.w	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f023 030a 	bic.w	r3, r3, #10
 80041e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	621a      	str	r2, [r3, #32]
}
 80041fe:	bf00      	nop
 8004200:	371c      	adds	r7, #28
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800420a:	b480      	push	{r7}
 800420c:	b087      	sub	sp, #28
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f023 0210 	bic.w	r2, r3, #16
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	031b      	lsls	r3, r3, #12
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004246:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800426a:	b480      	push	{r7}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	f043 0307 	orr.w	r3, r3, #7
 800428c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	609a      	str	r2, [r3, #8]
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	021a      	lsls	r2, r3, #8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	609a      	str	r2, [r3, #8]
}
 80042d4:	bf00      	nop
 80042d6:	371c      	adds	r7, #28
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e06d      	b.n	80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a30      	ldr	r2, [pc, #192]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d009      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2f      	ldr	r2, [pc, #188]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a2d      	ldr	r2, [pc, #180]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d108      	bne.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800433c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d01d      	beq.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d018      	beq.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1c      	ldr	r2, [pc, #112]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d013      	beq.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1a      	ldr	r2, [pc, #104]	; (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00e      	beq.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a16      	ldr	r2, [pc, #88]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a11      	ldr	r2, [pc, #68]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d10c      	bne.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	40012c00 	.word	0x40012c00
 80043e4:	40013400 	.word	0x40013400
 80043e8:	40015000 	.word	0x40015000
 80043ec:	40000400 	.word	0x40000400
 80043f0:	40000800 	.word	0x40000800
 80043f4:	40014000 	.word	0x40014000

080043f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e040      	b.n	800448c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fc fac2 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2224      	movs	r2, #36	; 0x24
 8004424:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f8c0 	bl	80045bc <UART_SetConfig>
 800443c:	4603      	mov	r3, r0
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e022      	b.n	800448c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 face 	bl	80049f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fb55 	bl	8004b34 <UART_CheckIdleState>
 800448a:	4603      	mov	r3, r0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08a      	sub	sp, #40	; 0x28
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	4613      	mov	r3, r2
 80044a2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	f040 8081 	bne.w	80045b0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <HAL_UART_Transmit+0x26>
 80044b4:	88fb      	ldrh	r3, [r7, #6]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e079      	b.n	80045b2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_UART_Transmit+0x38>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e072      	b.n	80045b2 <HAL_UART_Transmit+0x11e>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2221      	movs	r2, #33	; 0x21
 80044de:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80044e0:	f7fc fc1a 	bl	8000d18 <HAL_GetTick>
 80044e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	88fa      	ldrh	r2, [r7, #6]
 80044ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	88fa      	ldrh	r2, [r7, #6]
 80044f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044fe:	d108      	bne.n	8004512 <HAL_UART_Transmit+0x7e>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d104      	bne.n	8004512 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	e003      	b.n	800451a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004516:	2300      	movs	r3, #0
 8004518:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800451a:	e02d      	b.n	8004578 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	2180      	movs	r1, #128	; 0x80
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fb49 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e03d      	b.n	80045b2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10b      	bne.n	8004554 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	881a      	ldrh	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004548:	b292      	uxth	r2, r2
 800454a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	3302      	adds	r3, #2
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	e008      	b.n	8004566 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	781a      	ldrb	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	b292      	uxth	r2, r2
 800455e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	3301      	adds	r3, #1
 8004564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1cb      	bne.n	800451c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2200      	movs	r2, #0
 800458c:	2140      	movs	r1, #64	; 0x40
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 fb15 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e009      	b.n	80045b2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e000      	b.n	80045b2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80045b0:	2302      	movs	r3, #2
  }
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	4bac      	ldr	r3, [pc, #688]	; (800489c <UART_SetConfig+0x2e0>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	6939      	ldr	r1, [r7, #16]
 80045f4:	430b      	orrs	r3, r1
 80045f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	430a      	orrs	r2, r1
 8004630:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a9a      	ldr	r2, [pc, #616]	; (80048a0 <UART_SetConfig+0x2e4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d121      	bne.n	8004680 <UART_SetConfig+0xc4>
 800463c:	4b99      	ldr	r3, [pc, #612]	; (80048a4 <UART_SetConfig+0x2e8>)
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	2b03      	cmp	r3, #3
 8004646:	d817      	bhi.n	8004678 <UART_SetConfig+0xbc>
 8004648:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <UART_SetConfig+0x94>)
 800464a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464e:	bf00      	nop
 8004650:	08004661 	.word	0x08004661
 8004654:	0800466d 	.word	0x0800466d
 8004658:	08004673 	.word	0x08004673
 800465c:	08004667 	.word	0x08004667
 8004660:	2301      	movs	r3, #1
 8004662:	77fb      	strb	r3, [r7, #31]
 8004664:	e0b2      	b.n	80047cc <UART_SetConfig+0x210>
 8004666:	2302      	movs	r3, #2
 8004668:	77fb      	strb	r3, [r7, #31]
 800466a:	e0af      	b.n	80047cc <UART_SetConfig+0x210>
 800466c:	2304      	movs	r3, #4
 800466e:	77fb      	strb	r3, [r7, #31]
 8004670:	e0ac      	b.n	80047cc <UART_SetConfig+0x210>
 8004672:	2308      	movs	r3, #8
 8004674:	77fb      	strb	r3, [r7, #31]
 8004676:	e0a9      	b.n	80047cc <UART_SetConfig+0x210>
 8004678:	2310      	movs	r3, #16
 800467a:	77fb      	strb	r3, [r7, #31]
 800467c:	bf00      	nop
 800467e:	e0a5      	b.n	80047cc <UART_SetConfig+0x210>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a88      	ldr	r2, [pc, #544]	; (80048a8 <UART_SetConfig+0x2ec>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d123      	bne.n	80046d2 <UART_SetConfig+0x116>
 800468a:	4b86      	ldr	r3, [pc, #536]	; (80048a4 <UART_SetConfig+0x2e8>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004696:	d012      	beq.n	80046be <UART_SetConfig+0x102>
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469c:	d802      	bhi.n	80046a4 <UART_SetConfig+0xe8>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d007      	beq.n	80046b2 <UART_SetConfig+0xf6>
 80046a2:	e012      	b.n	80046ca <UART_SetConfig+0x10e>
 80046a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046a8:	d00c      	beq.n	80046c4 <UART_SetConfig+0x108>
 80046aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046ae:	d003      	beq.n	80046b8 <UART_SetConfig+0xfc>
 80046b0:	e00b      	b.n	80046ca <UART_SetConfig+0x10e>
 80046b2:	2300      	movs	r3, #0
 80046b4:	77fb      	strb	r3, [r7, #31]
 80046b6:	e089      	b.n	80047cc <UART_SetConfig+0x210>
 80046b8:	2302      	movs	r3, #2
 80046ba:	77fb      	strb	r3, [r7, #31]
 80046bc:	e086      	b.n	80047cc <UART_SetConfig+0x210>
 80046be:	2304      	movs	r3, #4
 80046c0:	77fb      	strb	r3, [r7, #31]
 80046c2:	e083      	b.n	80047cc <UART_SetConfig+0x210>
 80046c4:	2308      	movs	r3, #8
 80046c6:	77fb      	strb	r3, [r7, #31]
 80046c8:	e080      	b.n	80047cc <UART_SetConfig+0x210>
 80046ca:	2310      	movs	r3, #16
 80046cc:	77fb      	strb	r3, [r7, #31]
 80046ce:	bf00      	nop
 80046d0:	e07c      	b.n	80047cc <UART_SetConfig+0x210>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a75      	ldr	r2, [pc, #468]	; (80048ac <UART_SetConfig+0x2f0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d123      	bne.n	8004724 <UART_SetConfig+0x168>
 80046dc:	4b71      	ldr	r3, [pc, #452]	; (80048a4 <UART_SetConfig+0x2e8>)
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80046e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046e8:	d012      	beq.n	8004710 <UART_SetConfig+0x154>
 80046ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046ee:	d802      	bhi.n	80046f6 <UART_SetConfig+0x13a>
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d007      	beq.n	8004704 <UART_SetConfig+0x148>
 80046f4:	e012      	b.n	800471c <UART_SetConfig+0x160>
 80046f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046fa:	d00c      	beq.n	8004716 <UART_SetConfig+0x15a>
 80046fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004700:	d003      	beq.n	800470a <UART_SetConfig+0x14e>
 8004702:	e00b      	b.n	800471c <UART_SetConfig+0x160>
 8004704:	2300      	movs	r3, #0
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e060      	b.n	80047cc <UART_SetConfig+0x210>
 800470a:	2302      	movs	r3, #2
 800470c:	77fb      	strb	r3, [r7, #31]
 800470e:	e05d      	b.n	80047cc <UART_SetConfig+0x210>
 8004710:	2304      	movs	r3, #4
 8004712:	77fb      	strb	r3, [r7, #31]
 8004714:	e05a      	b.n	80047cc <UART_SetConfig+0x210>
 8004716:	2308      	movs	r3, #8
 8004718:	77fb      	strb	r3, [r7, #31]
 800471a:	e057      	b.n	80047cc <UART_SetConfig+0x210>
 800471c:	2310      	movs	r3, #16
 800471e:	77fb      	strb	r3, [r7, #31]
 8004720:	bf00      	nop
 8004722:	e053      	b.n	80047cc <UART_SetConfig+0x210>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a61      	ldr	r2, [pc, #388]	; (80048b0 <UART_SetConfig+0x2f4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d123      	bne.n	8004776 <UART_SetConfig+0x1ba>
 800472e:	4b5d      	ldr	r3, [pc, #372]	; (80048a4 <UART_SetConfig+0x2e8>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800473a:	d012      	beq.n	8004762 <UART_SetConfig+0x1a6>
 800473c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004740:	d802      	bhi.n	8004748 <UART_SetConfig+0x18c>
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <UART_SetConfig+0x19a>
 8004746:	e012      	b.n	800476e <UART_SetConfig+0x1b2>
 8004748:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800474c:	d00c      	beq.n	8004768 <UART_SetConfig+0x1ac>
 800474e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004752:	d003      	beq.n	800475c <UART_SetConfig+0x1a0>
 8004754:	e00b      	b.n	800476e <UART_SetConfig+0x1b2>
 8004756:	2300      	movs	r3, #0
 8004758:	77fb      	strb	r3, [r7, #31]
 800475a:	e037      	b.n	80047cc <UART_SetConfig+0x210>
 800475c:	2302      	movs	r3, #2
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e034      	b.n	80047cc <UART_SetConfig+0x210>
 8004762:	2304      	movs	r3, #4
 8004764:	77fb      	strb	r3, [r7, #31]
 8004766:	e031      	b.n	80047cc <UART_SetConfig+0x210>
 8004768:	2308      	movs	r3, #8
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e02e      	b.n	80047cc <UART_SetConfig+0x210>
 800476e:	2310      	movs	r3, #16
 8004770:	77fb      	strb	r3, [r7, #31]
 8004772:	bf00      	nop
 8004774:	e02a      	b.n	80047cc <UART_SetConfig+0x210>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a4e      	ldr	r2, [pc, #312]	; (80048b4 <UART_SetConfig+0x2f8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d123      	bne.n	80047c8 <UART_SetConfig+0x20c>
 8004780:	4b48      	ldr	r3, [pc, #288]	; (80048a4 <UART_SetConfig+0x2e8>)
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478c:	d012      	beq.n	80047b4 <UART_SetConfig+0x1f8>
 800478e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004792:	d802      	bhi.n	800479a <UART_SetConfig+0x1de>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <UART_SetConfig+0x1ec>
 8004798:	e012      	b.n	80047c0 <UART_SetConfig+0x204>
 800479a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800479e:	d00c      	beq.n	80047ba <UART_SetConfig+0x1fe>
 80047a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047a4:	d003      	beq.n	80047ae <UART_SetConfig+0x1f2>
 80047a6:	e00b      	b.n	80047c0 <UART_SetConfig+0x204>
 80047a8:	2300      	movs	r3, #0
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e00e      	b.n	80047cc <UART_SetConfig+0x210>
 80047ae:	2302      	movs	r3, #2
 80047b0:	77fb      	strb	r3, [r7, #31]
 80047b2:	e00b      	b.n	80047cc <UART_SetConfig+0x210>
 80047b4:	2304      	movs	r3, #4
 80047b6:	77fb      	strb	r3, [r7, #31]
 80047b8:	e008      	b.n	80047cc <UART_SetConfig+0x210>
 80047ba:	2308      	movs	r3, #8
 80047bc:	77fb      	strb	r3, [r7, #31]
 80047be:	e005      	b.n	80047cc <UART_SetConfig+0x210>
 80047c0:	2310      	movs	r3, #16
 80047c2:	77fb      	strb	r3, [r7, #31]
 80047c4:	bf00      	nop
 80047c6:	e001      	b.n	80047cc <UART_SetConfig+0x210>
 80047c8:	2310      	movs	r3, #16
 80047ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d4:	f040 8090 	bne.w	80048f8 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80047d8:	7ffb      	ldrb	r3, [r7, #31]
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d86c      	bhi.n	80048b8 <UART_SetConfig+0x2fc>
 80047de:	a201      	add	r2, pc, #4	; (adr r2, 80047e4 <UART_SetConfig+0x228>)
 80047e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e4:	08004809 	.word	0x08004809
 80047e8:	08004829 	.word	0x08004829
 80047ec:	08004849 	.word	0x08004849
 80047f0:	080048b9 	.word	0x080048b9
 80047f4:	08004865 	.word	0x08004865
 80047f8:	080048b9 	.word	0x080048b9
 80047fc:	080048b9 	.word	0x080048b9
 8004800:	080048b9 	.word	0x080048b9
 8004804:	08004885 	.word	0x08004885
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004808:	f7ff f8c0 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 800480c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	005a      	lsls	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	441a      	add	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004822:	b29b      	uxth	r3, r3
 8004824:	61bb      	str	r3, [r7, #24]
        break;
 8004826:	e04a      	b.n	80048be <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004828:	f7ff f8d2 	bl	80039d0 <HAL_RCC_GetPCLK2Freq>
 800482c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	005a      	lsls	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	085b      	lsrs	r3, r3, #1
 8004838:	441a      	add	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004842:	b29b      	uxth	r3, r3
 8004844:	61bb      	str	r3, [r7, #24]
        break;
 8004846:	e03a      	b.n	80048be <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	085b      	lsrs	r3, r3, #1
 800484e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004852:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6852      	ldr	r2, [r2, #4]
 800485a:	fbb3 f3f2 	udiv	r3, r3, r2
 800485e:	b29b      	uxth	r3, r3
 8004860:	61bb      	str	r3, [r7, #24]
        break;
 8004862:	e02c      	b.n	80048be <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004864:	f7ff f81c 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 8004868:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	005a      	lsls	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	441a      	add	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	fbb2 f3f3 	udiv	r3, r2, r3
 800487e:	b29b      	uxth	r3, r3
 8004880:	61bb      	str	r3, [r7, #24]
        break;
 8004882:	e01c      	b.n	80048be <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	fbb2 f3f3 	udiv	r3, r2, r3
 8004896:	b29b      	uxth	r3, r3
 8004898:	61bb      	str	r3, [r7, #24]
        break;
 800489a:	e010      	b.n	80048be <UART_SetConfig+0x302>
 800489c:	efff69f3 	.word	0xefff69f3
 80048a0:	40013800 	.word	0x40013800
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40004400 	.word	0x40004400
 80048ac:	40004800 	.word	0x40004800
 80048b0:	40004c00 	.word	0x40004c00
 80048b4:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	75fb      	strb	r3, [r7, #23]
        break;
 80048bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2b0f      	cmp	r3, #15
 80048c2:	d916      	bls.n	80048f2 <UART_SetConfig+0x336>
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ca:	d212      	bcs.n	80048f2 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f023 030f 	bic.w	r3, r3, #15
 80048d4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	897b      	ldrh	r3, [r7, #10]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	897a      	ldrh	r2, [r7, #10]
 80048ee:	60da      	str	r2, [r3, #12]
 80048f0:	e072      	b.n	80049d8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	75fb      	strb	r3, [r7, #23]
 80048f6:	e06f      	b.n	80049d8 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 80048f8:	7ffb      	ldrb	r3, [r7, #31]
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d85b      	bhi.n	80049b6 <UART_SetConfig+0x3fa>
 80048fe:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <UART_SetConfig+0x348>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004929 	.word	0x08004929
 8004908:	08004947 	.word	0x08004947
 800490c:	08004965 	.word	0x08004965
 8004910:	080049b7 	.word	0x080049b7
 8004914:	08004981 	.word	0x08004981
 8004918:	080049b7 	.word	0x080049b7
 800491c:	080049b7 	.word	0x080049b7
 8004920:	080049b7 	.word	0x080049b7
 8004924:	0800499f 	.word	0x0800499f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004928:	f7ff f830 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 800492c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	085a      	lsrs	r2, r3, #1
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	441a      	add	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	b29b      	uxth	r3, r3
 8004942:	61bb      	str	r3, [r7, #24]
        break;
 8004944:	e03a      	b.n	80049bc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004946:	f7ff f843 	bl	80039d0 <HAL_RCC_GetPCLK2Freq>
 800494a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	085a      	lsrs	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	441a      	add	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	fbb2 f3f3 	udiv	r3, r2, r3
 800495e:	b29b      	uxth	r3, r3
 8004960:	61bb      	str	r3, [r7, #24]
        break;
 8004962:	e02b      	b.n	80049bc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	085b      	lsrs	r3, r3, #1
 800496a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800496e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6852      	ldr	r2, [r2, #4]
 8004976:	fbb3 f3f2 	udiv	r3, r3, r2
 800497a:	b29b      	uxth	r3, r3
 800497c:	61bb      	str	r3, [r7, #24]
        break;
 800497e:	e01d      	b.n	80049bc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004980:	f7fe ff8e 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 8004984:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	085a      	lsrs	r2, r3, #1
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	441a      	add	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	b29b      	uxth	r3, r3
 800499a:	61bb      	str	r3, [r7, #24]
        break;
 800499c:	e00e      	b.n	80049bc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	085b      	lsrs	r3, r3, #1
 80049a4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	61bb      	str	r3, [r7, #24]
        break;
 80049b4:	e002      	b.n	80049bc <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	75fb      	strb	r3, [r7, #23]
        break;
 80049ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b0f      	cmp	r3, #15
 80049c0:	d908      	bls.n	80049d4 <UART_SetConfig+0x418>
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c8:	d204      	bcs.n	80049d4 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	60da      	str	r2, [r3, #12]
 80049d2:	e001      	b.n	80049d8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop

080049f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01a      	beq.n	8004b06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aee:	d10a      	bne.n	8004b06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	605a      	str	r2, [r3, #4]
  }
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004b42:	f7fc f8e9 	bl	8000d18 <HAL_GetTick>
 8004b46:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d10e      	bne.n	8004b74 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f82a 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e020      	b.n	8004bb6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d10e      	bne.n	8004ba0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f814 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e00a      	b.n	8004bb6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	603b      	str	r3, [r7, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bce:	e05d      	b.n	8004c8c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bd6:	d059      	beq.n	8004c8c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd8:	f7fc f89e 	bl	8000d18 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d302      	bcc.n	8004bee <UART_WaitOnFlagUntilTimeout+0x30>
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d11b      	bne.n	8004c26 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bfc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e042      	b.n	8004cac <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d02b      	beq.n	8004c8c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c42:	d123      	bne.n	8004c8c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c4c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c5c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0201 	bic.w	r2, r2, #1
 8004c6c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2220      	movs	r2, #32
 8004c72:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e00f      	b.n	8004cac <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69da      	ldr	r2, [r3, #28]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4013      	ands	r3, r2
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	bf0c      	ite	eq
 8004c9c:	2301      	moveq	r3, #1
 8004c9e:	2300      	movne	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d092      	beq.n	8004bd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <__errno>:
 8004cb4:	4b01      	ldr	r3, [pc, #4]	; (8004cbc <__errno+0x8>)
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	2000000c 	.word	0x2000000c

08004cc0 <__libc_init_array>:
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	4e0d      	ldr	r6, [pc, #52]	; (8004cf8 <__libc_init_array+0x38>)
 8004cc4:	4c0d      	ldr	r4, [pc, #52]	; (8004cfc <__libc_init_array+0x3c>)
 8004cc6:	1ba4      	subs	r4, r4, r6
 8004cc8:	10a4      	asrs	r4, r4, #2
 8004cca:	2500      	movs	r5, #0
 8004ccc:	42a5      	cmp	r5, r4
 8004cce:	d109      	bne.n	8004ce4 <__libc_init_array+0x24>
 8004cd0:	4e0b      	ldr	r6, [pc, #44]	; (8004d00 <__libc_init_array+0x40>)
 8004cd2:	4c0c      	ldr	r4, [pc, #48]	; (8004d04 <__libc_init_array+0x44>)
 8004cd4:	f000 ff10 	bl	8005af8 <_init>
 8004cd8:	1ba4      	subs	r4, r4, r6
 8004cda:	10a4      	asrs	r4, r4, #2
 8004cdc:	2500      	movs	r5, #0
 8004cde:	42a5      	cmp	r5, r4
 8004ce0:	d105      	bne.n	8004cee <__libc_init_array+0x2e>
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}
 8004ce4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ce8:	4798      	blx	r3
 8004cea:	3501      	adds	r5, #1
 8004cec:	e7ee      	b.n	8004ccc <__libc_init_array+0xc>
 8004cee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cf2:	4798      	blx	r3
 8004cf4:	3501      	adds	r5, #1
 8004cf6:	e7f2      	b.n	8004cde <__libc_init_array+0x1e>
 8004cf8:	08005c64 	.word	0x08005c64
 8004cfc:	08005c64 	.word	0x08005c64
 8004d00:	08005c64 	.word	0x08005c64
 8004d04:	08005c68 	.word	0x08005c68

08004d08 <memcpy>:
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	1e43      	subs	r3, r0, #1
 8004d0c:	440a      	add	r2, r1
 8004d0e:	4291      	cmp	r1, r2
 8004d10:	d100      	bne.n	8004d14 <memcpy+0xc>
 8004d12:	bd10      	pop	{r4, pc}
 8004d14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d1c:	e7f7      	b.n	8004d0e <memcpy+0x6>

08004d1e <memset>:
 8004d1e:	4402      	add	r2, r0
 8004d20:	4603      	mov	r3, r0
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d100      	bne.n	8004d28 <memset+0xa>
 8004d26:	4770      	bx	lr
 8004d28:	f803 1b01 	strb.w	r1, [r3], #1
 8004d2c:	e7f9      	b.n	8004d22 <memset+0x4>
	...

08004d30 <iprintf>:
 8004d30:	b40f      	push	{r0, r1, r2, r3}
 8004d32:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <iprintf+0x2c>)
 8004d34:	b513      	push	{r0, r1, r4, lr}
 8004d36:	681c      	ldr	r4, [r3, #0]
 8004d38:	b124      	cbz	r4, 8004d44 <iprintf+0x14>
 8004d3a:	69a3      	ldr	r3, [r4, #24]
 8004d3c:	b913      	cbnz	r3, 8004d44 <iprintf+0x14>
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f000 f84e 	bl	8004de0 <__sinit>
 8004d44:	ab05      	add	r3, sp, #20
 8004d46:	9a04      	ldr	r2, [sp, #16]
 8004d48:	68a1      	ldr	r1, [r4, #8]
 8004d4a:	9301      	str	r3, [sp, #4]
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f000 f955 	bl	8004ffc <_vfiprintf_r>
 8004d52:	b002      	add	sp, #8
 8004d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d58:	b004      	add	sp, #16
 8004d5a:	4770      	bx	lr
 8004d5c:	2000000c 	.word	0x2000000c

08004d60 <std>:
 8004d60:	2300      	movs	r3, #0
 8004d62:	b510      	push	{r4, lr}
 8004d64:	4604      	mov	r4, r0
 8004d66:	e9c0 3300 	strd	r3, r3, [r0]
 8004d6a:	6083      	str	r3, [r0, #8]
 8004d6c:	8181      	strh	r1, [r0, #12]
 8004d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8004d70:	81c2      	strh	r2, [r0, #14]
 8004d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d76:	6183      	str	r3, [r0, #24]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	2208      	movs	r2, #8
 8004d7c:	305c      	adds	r0, #92	; 0x5c
 8004d7e:	f7ff ffce 	bl	8004d1e <memset>
 8004d82:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <std+0x38>)
 8004d84:	6263      	str	r3, [r4, #36]	; 0x24
 8004d86:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <std+0x3c>)
 8004d88:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d8a:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <std+0x40>)
 8004d8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d8e:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <std+0x44>)
 8004d90:	6224      	str	r4, [r4, #32]
 8004d92:	6323      	str	r3, [r4, #48]	; 0x30
 8004d94:	bd10      	pop	{r4, pc}
 8004d96:	bf00      	nop
 8004d98:	08005559 	.word	0x08005559
 8004d9c:	0800557b 	.word	0x0800557b
 8004da0:	080055b3 	.word	0x080055b3
 8004da4:	080055d7 	.word	0x080055d7

08004da8 <_cleanup_r>:
 8004da8:	4901      	ldr	r1, [pc, #4]	; (8004db0 <_cleanup_r+0x8>)
 8004daa:	f000 b885 	b.w	8004eb8 <_fwalk_reent>
 8004dae:	bf00      	nop
 8004db0:	080058b1 	.word	0x080058b1

08004db4 <__sfmoreglue>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	1e4a      	subs	r2, r1, #1
 8004db8:	2568      	movs	r5, #104	; 0x68
 8004dba:	4355      	muls	r5, r2
 8004dbc:	460e      	mov	r6, r1
 8004dbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004dc2:	f000 f897 	bl	8004ef4 <_malloc_r>
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	b140      	cbz	r0, 8004ddc <__sfmoreglue+0x28>
 8004dca:	2100      	movs	r1, #0
 8004dcc:	e9c0 1600 	strd	r1, r6, [r0]
 8004dd0:	300c      	adds	r0, #12
 8004dd2:	60a0      	str	r0, [r4, #8]
 8004dd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004dd8:	f7ff ffa1 	bl	8004d1e <memset>
 8004ddc:	4620      	mov	r0, r4
 8004dde:	bd70      	pop	{r4, r5, r6, pc}

08004de0 <__sinit>:
 8004de0:	6983      	ldr	r3, [r0, #24]
 8004de2:	b510      	push	{r4, lr}
 8004de4:	4604      	mov	r4, r0
 8004de6:	bb33      	cbnz	r3, 8004e36 <__sinit+0x56>
 8004de8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004dec:	6503      	str	r3, [r0, #80]	; 0x50
 8004dee:	4b12      	ldr	r3, [pc, #72]	; (8004e38 <__sinit+0x58>)
 8004df0:	4a12      	ldr	r2, [pc, #72]	; (8004e3c <__sinit+0x5c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6282      	str	r2, [r0, #40]	; 0x28
 8004df6:	4298      	cmp	r0, r3
 8004df8:	bf04      	itt	eq
 8004dfa:	2301      	moveq	r3, #1
 8004dfc:	6183      	streq	r3, [r0, #24]
 8004dfe:	f000 f81f 	bl	8004e40 <__sfp>
 8004e02:	6060      	str	r0, [r4, #4]
 8004e04:	4620      	mov	r0, r4
 8004e06:	f000 f81b 	bl	8004e40 <__sfp>
 8004e0a:	60a0      	str	r0, [r4, #8]
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f000 f817 	bl	8004e40 <__sfp>
 8004e12:	2200      	movs	r2, #0
 8004e14:	60e0      	str	r0, [r4, #12]
 8004e16:	2104      	movs	r1, #4
 8004e18:	6860      	ldr	r0, [r4, #4]
 8004e1a:	f7ff ffa1 	bl	8004d60 <std>
 8004e1e:	2201      	movs	r2, #1
 8004e20:	2109      	movs	r1, #9
 8004e22:	68a0      	ldr	r0, [r4, #8]
 8004e24:	f7ff ff9c 	bl	8004d60 <std>
 8004e28:	2202      	movs	r2, #2
 8004e2a:	2112      	movs	r1, #18
 8004e2c:	68e0      	ldr	r0, [r4, #12]
 8004e2e:	f7ff ff97 	bl	8004d60 <std>
 8004e32:	2301      	movs	r3, #1
 8004e34:	61a3      	str	r3, [r4, #24]
 8004e36:	bd10      	pop	{r4, pc}
 8004e38:	08005bcc 	.word	0x08005bcc
 8004e3c:	08004da9 	.word	0x08004da9

08004e40 <__sfp>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	4b1b      	ldr	r3, [pc, #108]	; (8004eb0 <__sfp+0x70>)
 8004e44:	681e      	ldr	r6, [r3, #0]
 8004e46:	69b3      	ldr	r3, [r6, #24]
 8004e48:	4607      	mov	r7, r0
 8004e4a:	b913      	cbnz	r3, 8004e52 <__sfp+0x12>
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	f7ff ffc7 	bl	8004de0 <__sinit>
 8004e52:	3648      	adds	r6, #72	; 0x48
 8004e54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	d503      	bpl.n	8004e64 <__sfp+0x24>
 8004e5c:	6833      	ldr	r3, [r6, #0]
 8004e5e:	b133      	cbz	r3, 8004e6e <__sfp+0x2e>
 8004e60:	6836      	ldr	r6, [r6, #0]
 8004e62:	e7f7      	b.n	8004e54 <__sfp+0x14>
 8004e64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e68:	b16d      	cbz	r5, 8004e86 <__sfp+0x46>
 8004e6a:	3468      	adds	r4, #104	; 0x68
 8004e6c:	e7f4      	b.n	8004e58 <__sfp+0x18>
 8004e6e:	2104      	movs	r1, #4
 8004e70:	4638      	mov	r0, r7
 8004e72:	f7ff ff9f 	bl	8004db4 <__sfmoreglue>
 8004e76:	6030      	str	r0, [r6, #0]
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d1f1      	bne.n	8004e60 <__sfp+0x20>
 8004e7c:	230c      	movs	r3, #12
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	4604      	mov	r4, r0
 8004e82:	4620      	mov	r0, r4
 8004e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <__sfp+0x74>)
 8004e88:	6665      	str	r5, [r4, #100]	; 0x64
 8004e8a:	e9c4 5500 	strd	r5, r5, [r4]
 8004e8e:	60a5      	str	r5, [r4, #8]
 8004e90:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004e94:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004e98:	2208      	movs	r2, #8
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ea0:	f7ff ff3d 	bl	8004d1e <memset>
 8004ea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004eac:	e7e9      	b.n	8004e82 <__sfp+0x42>
 8004eae:	bf00      	nop
 8004eb0:	08005bcc 	.word	0x08005bcc
 8004eb4:	ffff0001 	.word	0xffff0001

08004eb8 <_fwalk_reent>:
 8004eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	4689      	mov	r9, r1
 8004ec0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ec4:	2600      	movs	r6, #0
 8004ec6:	b914      	cbnz	r4, 8004ece <_fwalk_reent+0x16>
 8004ec8:	4630      	mov	r0, r6
 8004eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ece:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004ed2:	3f01      	subs	r7, #1
 8004ed4:	d501      	bpl.n	8004eda <_fwalk_reent+0x22>
 8004ed6:	6824      	ldr	r4, [r4, #0]
 8004ed8:	e7f5      	b.n	8004ec6 <_fwalk_reent+0xe>
 8004eda:	89ab      	ldrh	r3, [r5, #12]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d907      	bls.n	8004ef0 <_fwalk_reent+0x38>
 8004ee0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	d003      	beq.n	8004ef0 <_fwalk_reent+0x38>
 8004ee8:	4629      	mov	r1, r5
 8004eea:	4640      	mov	r0, r8
 8004eec:	47c8      	blx	r9
 8004eee:	4306      	orrs	r6, r0
 8004ef0:	3568      	adds	r5, #104	; 0x68
 8004ef2:	e7ee      	b.n	8004ed2 <_fwalk_reent+0x1a>

08004ef4 <_malloc_r>:
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	1ccd      	adds	r5, r1, #3
 8004ef8:	f025 0503 	bic.w	r5, r5, #3
 8004efc:	3508      	adds	r5, #8
 8004efe:	2d0c      	cmp	r5, #12
 8004f00:	bf38      	it	cc
 8004f02:	250c      	movcc	r5, #12
 8004f04:	2d00      	cmp	r5, #0
 8004f06:	4606      	mov	r6, r0
 8004f08:	db01      	blt.n	8004f0e <_malloc_r+0x1a>
 8004f0a:	42a9      	cmp	r1, r5
 8004f0c:	d903      	bls.n	8004f16 <_malloc_r+0x22>
 8004f0e:	230c      	movs	r3, #12
 8004f10:	6033      	str	r3, [r6, #0]
 8004f12:	2000      	movs	r0, #0
 8004f14:	bd70      	pop	{r4, r5, r6, pc}
 8004f16:	f000 fd6b 	bl	80059f0 <__malloc_lock>
 8004f1a:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <_malloc_r+0xac>)
 8004f1c:	6814      	ldr	r4, [r2, #0]
 8004f1e:	4621      	mov	r1, r4
 8004f20:	b991      	cbnz	r1, 8004f48 <_malloc_r+0x54>
 8004f22:	4c20      	ldr	r4, [pc, #128]	; (8004fa4 <_malloc_r+0xb0>)
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	b91b      	cbnz	r3, 8004f30 <_malloc_r+0x3c>
 8004f28:	4630      	mov	r0, r6
 8004f2a:	f000 fb05 	bl	8005538 <_sbrk_r>
 8004f2e:	6020      	str	r0, [r4, #0]
 8004f30:	4629      	mov	r1, r5
 8004f32:	4630      	mov	r0, r6
 8004f34:	f000 fb00 	bl	8005538 <_sbrk_r>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d124      	bne.n	8004f86 <_malloc_r+0x92>
 8004f3c:	230c      	movs	r3, #12
 8004f3e:	6033      	str	r3, [r6, #0]
 8004f40:	4630      	mov	r0, r6
 8004f42:	f000 fd56 	bl	80059f2 <__malloc_unlock>
 8004f46:	e7e4      	b.n	8004f12 <_malloc_r+0x1e>
 8004f48:	680b      	ldr	r3, [r1, #0]
 8004f4a:	1b5b      	subs	r3, r3, r5
 8004f4c:	d418      	bmi.n	8004f80 <_malloc_r+0x8c>
 8004f4e:	2b0b      	cmp	r3, #11
 8004f50:	d90f      	bls.n	8004f72 <_malloc_r+0x7e>
 8004f52:	600b      	str	r3, [r1, #0]
 8004f54:	50cd      	str	r5, [r1, r3]
 8004f56:	18cc      	adds	r4, r1, r3
 8004f58:	4630      	mov	r0, r6
 8004f5a:	f000 fd4a 	bl	80059f2 <__malloc_unlock>
 8004f5e:	f104 000b 	add.w	r0, r4, #11
 8004f62:	1d23      	adds	r3, r4, #4
 8004f64:	f020 0007 	bic.w	r0, r0, #7
 8004f68:	1ac3      	subs	r3, r0, r3
 8004f6a:	d0d3      	beq.n	8004f14 <_malloc_r+0x20>
 8004f6c:	425a      	negs	r2, r3
 8004f6e:	50e2      	str	r2, [r4, r3]
 8004f70:	e7d0      	b.n	8004f14 <_malloc_r+0x20>
 8004f72:	428c      	cmp	r4, r1
 8004f74:	684b      	ldr	r3, [r1, #4]
 8004f76:	bf16      	itet	ne
 8004f78:	6063      	strne	r3, [r4, #4]
 8004f7a:	6013      	streq	r3, [r2, #0]
 8004f7c:	460c      	movne	r4, r1
 8004f7e:	e7eb      	b.n	8004f58 <_malloc_r+0x64>
 8004f80:	460c      	mov	r4, r1
 8004f82:	6849      	ldr	r1, [r1, #4]
 8004f84:	e7cc      	b.n	8004f20 <_malloc_r+0x2c>
 8004f86:	1cc4      	adds	r4, r0, #3
 8004f88:	f024 0403 	bic.w	r4, r4, #3
 8004f8c:	42a0      	cmp	r0, r4
 8004f8e:	d005      	beq.n	8004f9c <_malloc_r+0xa8>
 8004f90:	1a21      	subs	r1, r4, r0
 8004f92:	4630      	mov	r0, r6
 8004f94:	f000 fad0 	bl	8005538 <_sbrk_r>
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d0cf      	beq.n	8004f3c <_malloc_r+0x48>
 8004f9c:	6025      	str	r5, [r4, #0]
 8004f9e:	e7db      	b.n	8004f58 <_malloc_r+0x64>
 8004fa0:	20000090 	.word	0x20000090
 8004fa4:	20000094 	.word	0x20000094

08004fa8 <__sfputc_r>:
 8004fa8:	6893      	ldr	r3, [r2, #8]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	b410      	push	{r4}
 8004fb0:	6093      	str	r3, [r2, #8]
 8004fb2:	da08      	bge.n	8004fc6 <__sfputc_r+0x1e>
 8004fb4:	6994      	ldr	r4, [r2, #24]
 8004fb6:	42a3      	cmp	r3, r4
 8004fb8:	db01      	blt.n	8004fbe <__sfputc_r+0x16>
 8004fba:	290a      	cmp	r1, #10
 8004fbc:	d103      	bne.n	8004fc6 <__sfputc_r+0x1e>
 8004fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fc2:	f000 bb0d 	b.w	80055e0 <__swbuf_r>
 8004fc6:	6813      	ldr	r3, [r2, #0]
 8004fc8:	1c58      	adds	r0, r3, #1
 8004fca:	6010      	str	r0, [r2, #0]
 8004fcc:	7019      	strb	r1, [r3, #0]
 8004fce:	4608      	mov	r0, r1
 8004fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <__sfputs_r>:
 8004fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd8:	4606      	mov	r6, r0
 8004fda:	460f      	mov	r7, r1
 8004fdc:	4614      	mov	r4, r2
 8004fde:	18d5      	adds	r5, r2, r3
 8004fe0:	42ac      	cmp	r4, r5
 8004fe2:	d101      	bne.n	8004fe8 <__sfputs_r+0x12>
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	e007      	b.n	8004ff8 <__sfputs_r+0x22>
 8004fe8:	463a      	mov	r2, r7
 8004fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fee:	4630      	mov	r0, r6
 8004ff0:	f7ff ffda 	bl	8004fa8 <__sfputc_r>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d1f3      	bne.n	8004fe0 <__sfputs_r+0xa>
 8004ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ffc <_vfiprintf_r>:
 8004ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005000:	460c      	mov	r4, r1
 8005002:	b09d      	sub	sp, #116	; 0x74
 8005004:	4617      	mov	r7, r2
 8005006:	461d      	mov	r5, r3
 8005008:	4606      	mov	r6, r0
 800500a:	b118      	cbz	r0, 8005014 <_vfiprintf_r+0x18>
 800500c:	6983      	ldr	r3, [r0, #24]
 800500e:	b90b      	cbnz	r3, 8005014 <_vfiprintf_r+0x18>
 8005010:	f7ff fee6 	bl	8004de0 <__sinit>
 8005014:	4b7c      	ldr	r3, [pc, #496]	; (8005208 <_vfiprintf_r+0x20c>)
 8005016:	429c      	cmp	r4, r3
 8005018:	d158      	bne.n	80050cc <_vfiprintf_r+0xd0>
 800501a:	6874      	ldr	r4, [r6, #4]
 800501c:	89a3      	ldrh	r3, [r4, #12]
 800501e:	0718      	lsls	r0, r3, #28
 8005020:	d55e      	bpl.n	80050e0 <_vfiprintf_r+0xe4>
 8005022:	6923      	ldr	r3, [r4, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d05b      	beq.n	80050e0 <_vfiprintf_r+0xe4>
 8005028:	2300      	movs	r3, #0
 800502a:	9309      	str	r3, [sp, #36]	; 0x24
 800502c:	2320      	movs	r3, #32
 800502e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005032:	2330      	movs	r3, #48	; 0x30
 8005034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005038:	9503      	str	r5, [sp, #12]
 800503a:	f04f 0b01 	mov.w	fp, #1
 800503e:	46b8      	mov	r8, r7
 8005040:	4645      	mov	r5, r8
 8005042:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005046:	b10b      	cbz	r3, 800504c <_vfiprintf_r+0x50>
 8005048:	2b25      	cmp	r3, #37	; 0x25
 800504a:	d154      	bne.n	80050f6 <_vfiprintf_r+0xfa>
 800504c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005050:	d00b      	beq.n	800506a <_vfiprintf_r+0x6e>
 8005052:	4653      	mov	r3, sl
 8005054:	463a      	mov	r2, r7
 8005056:	4621      	mov	r1, r4
 8005058:	4630      	mov	r0, r6
 800505a:	f7ff ffbc 	bl	8004fd6 <__sfputs_r>
 800505e:	3001      	adds	r0, #1
 8005060:	f000 80c2 	beq.w	80051e8 <_vfiprintf_r+0x1ec>
 8005064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005066:	4453      	add	r3, sl
 8005068:	9309      	str	r3, [sp, #36]	; 0x24
 800506a:	f898 3000 	ldrb.w	r3, [r8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 80ba 	beq.w	80051e8 <_vfiprintf_r+0x1ec>
 8005074:	2300      	movs	r3, #0
 8005076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800507a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800507e:	9304      	str	r3, [sp, #16]
 8005080:	9307      	str	r3, [sp, #28]
 8005082:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005086:	931a      	str	r3, [sp, #104]	; 0x68
 8005088:	46a8      	mov	r8, r5
 800508a:	2205      	movs	r2, #5
 800508c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005090:	485e      	ldr	r0, [pc, #376]	; (800520c <_vfiprintf_r+0x210>)
 8005092:	f7fb f8a5 	bl	80001e0 <memchr>
 8005096:	9b04      	ldr	r3, [sp, #16]
 8005098:	bb78      	cbnz	r0, 80050fa <_vfiprintf_r+0xfe>
 800509a:	06d9      	lsls	r1, r3, #27
 800509c:	bf44      	itt	mi
 800509e:	2220      	movmi	r2, #32
 80050a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050a4:	071a      	lsls	r2, r3, #28
 80050a6:	bf44      	itt	mi
 80050a8:	222b      	movmi	r2, #43	; 0x2b
 80050aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050ae:	782a      	ldrb	r2, [r5, #0]
 80050b0:	2a2a      	cmp	r2, #42	; 0x2a
 80050b2:	d02a      	beq.n	800510a <_vfiprintf_r+0x10e>
 80050b4:	9a07      	ldr	r2, [sp, #28]
 80050b6:	46a8      	mov	r8, r5
 80050b8:	2000      	movs	r0, #0
 80050ba:	250a      	movs	r5, #10
 80050bc:	4641      	mov	r1, r8
 80050be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050c2:	3b30      	subs	r3, #48	; 0x30
 80050c4:	2b09      	cmp	r3, #9
 80050c6:	d969      	bls.n	800519c <_vfiprintf_r+0x1a0>
 80050c8:	b360      	cbz	r0, 8005124 <_vfiprintf_r+0x128>
 80050ca:	e024      	b.n	8005116 <_vfiprintf_r+0x11a>
 80050cc:	4b50      	ldr	r3, [pc, #320]	; (8005210 <_vfiprintf_r+0x214>)
 80050ce:	429c      	cmp	r4, r3
 80050d0:	d101      	bne.n	80050d6 <_vfiprintf_r+0xda>
 80050d2:	68b4      	ldr	r4, [r6, #8]
 80050d4:	e7a2      	b.n	800501c <_vfiprintf_r+0x20>
 80050d6:	4b4f      	ldr	r3, [pc, #316]	; (8005214 <_vfiprintf_r+0x218>)
 80050d8:	429c      	cmp	r4, r3
 80050da:	bf08      	it	eq
 80050dc:	68f4      	ldreq	r4, [r6, #12]
 80050de:	e79d      	b.n	800501c <_vfiprintf_r+0x20>
 80050e0:	4621      	mov	r1, r4
 80050e2:	4630      	mov	r0, r6
 80050e4:	f000 fae0 	bl	80056a8 <__swsetup_r>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d09d      	beq.n	8005028 <_vfiprintf_r+0x2c>
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050f0:	b01d      	add	sp, #116	; 0x74
 80050f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f6:	46a8      	mov	r8, r5
 80050f8:	e7a2      	b.n	8005040 <_vfiprintf_r+0x44>
 80050fa:	4a44      	ldr	r2, [pc, #272]	; (800520c <_vfiprintf_r+0x210>)
 80050fc:	1a80      	subs	r0, r0, r2
 80050fe:	fa0b f000 	lsl.w	r0, fp, r0
 8005102:	4318      	orrs	r0, r3
 8005104:	9004      	str	r0, [sp, #16]
 8005106:	4645      	mov	r5, r8
 8005108:	e7be      	b.n	8005088 <_vfiprintf_r+0x8c>
 800510a:	9a03      	ldr	r2, [sp, #12]
 800510c:	1d11      	adds	r1, r2, #4
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	9103      	str	r1, [sp, #12]
 8005112:	2a00      	cmp	r2, #0
 8005114:	db01      	blt.n	800511a <_vfiprintf_r+0x11e>
 8005116:	9207      	str	r2, [sp, #28]
 8005118:	e004      	b.n	8005124 <_vfiprintf_r+0x128>
 800511a:	4252      	negs	r2, r2
 800511c:	f043 0302 	orr.w	r3, r3, #2
 8005120:	9207      	str	r2, [sp, #28]
 8005122:	9304      	str	r3, [sp, #16]
 8005124:	f898 3000 	ldrb.w	r3, [r8]
 8005128:	2b2e      	cmp	r3, #46	; 0x2e
 800512a:	d10e      	bne.n	800514a <_vfiprintf_r+0x14e>
 800512c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005130:	2b2a      	cmp	r3, #42	; 0x2a
 8005132:	d138      	bne.n	80051a6 <_vfiprintf_r+0x1aa>
 8005134:	9b03      	ldr	r3, [sp, #12]
 8005136:	1d1a      	adds	r2, r3, #4
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	9203      	str	r2, [sp, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	bfb8      	it	lt
 8005140:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005144:	f108 0802 	add.w	r8, r8, #2
 8005148:	9305      	str	r3, [sp, #20]
 800514a:	4d33      	ldr	r5, [pc, #204]	; (8005218 <_vfiprintf_r+0x21c>)
 800514c:	f898 1000 	ldrb.w	r1, [r8]
 8005150:	2203      	movs	r2, #3
 8005152:	4628      	mov	r0, r5
 8005154:	f7fb f844 	bl	80001e0 <memchr>
 8005158:	b140      	cbz	r0, 800516c <_vfiprintf_r+0x170>
 800515a:	2340      	movs	r3, #64	; 0x40
 800515c:	1b40      	subs	r0, r0, r5
 800515e:	fa03 f000 	lsl.w	r0, r3, r0
 8005162:	9b04      	ldr	r3, [sp, #16]
 8005164:	4303      	orrs	r3, r0
 8005166:	f108 0801 	add.w	r8, r8, #1
 800516a:	9304      	str	r3, [sp, #16]
 800516c:	f898 1000 	ldrb.w	r1, [r8]
 8005170:	482a      	ldr	r0, [pc, #168]	; (800521c <_vfiprintf_r+0x220>)
 8005172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005176:	2206      	movs	r2, #6
 8005178:	f108 0701 	add.w	r7, r8, #1
 800517c:	f7fb f830 	bl	80001e0 <memchr>
 8005180:	2800      	cmp	r0, #0
 8005182:	d037      	beq.n	80051f4 <_vfiprintf_r+0x1f8>
 8005184:	4b26      	ldr	r3, [pc, #152]	; (8005220 <_vfiprintf_r+0x224>)
 8005186:	bb1b      	cbnz	r3, 80051d0 <_vfiprintf_r+0x1d4>
 8005188:	9b03      	ldr	r3, [sp, #12]
 800518a:	3307      	adds	r3, #7
 800518c:	f023 0307 	bic.w	r3, r3, #7
 8005190:	3308      	adds	r3, #8
 8005192:	9303      	str	r3, [sp, #12]
 8005194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005196:	444b      	add	r3, r9
 8005198:	9309      	str	r3, [sp, #36]	; 0x24
 800519a:	e750      	b.n	800503e <_vfiprintf_r+0x42>
 800519c:	fb05 3202 	mla	r2, r5, r2, r3
 80051a0:	2001      	movs	r0, #1
 80051a2:	4688      	mov	r8, r1
 80051a4:	e78a      	b.n	80050bc <_vfiprintf_r+0xc0>
 80051a6:	2300      	movs	r3, #0
 80051a8:	f108 0801 	add.w	r8, r8, #1
 80051ac:	9305      	str	r3, [sp, #20]
 80051ae:	4619      	mov	r1, r3
 80051b0:	250a      	movs	r5, #10
 80051b2:	4640      	mov	r0, r8
 80051b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051b8:	3a30      	subs	r2, #48	; 0x30
 80051ba:	2a09      	cmp	r2, #9
 80051bc:	d903      	bls.n	80051c6 <_vfiprintf_r+0x1ca>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0c3      	beq.n	800514a <_vfiprintf_r+0x14e>
 80051c2:	9105      	str	r1, [sp, #20]
 80051c4:	e7c1      	b.n	800514a <_vfiprintf_r+0x14e>
 80051c6:	fb05 2101 	mla	r1, r5, r1, r2
 80051ca:	2301      	movs	r3, #1
 80051cc:	4680      	mov	r8, r0
 80051ce:	e7f0      	b.n	80051b2 <_vfiprintf_r+0x1b6>
 80051d0:	ab03      	add	r3, sp, #12
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	4622      	mov	r2, r4
 80051d6:	4b13      	ldr	r3, [pc, #76]	; (8005224 <_vfiprintf_r+0x228>)
 80051d8:	a904      	add	r1, sp, #16
 80051da:	4630      	mov	r0, r6
 80051dc:	f3af 8000 	nop.w
 80051e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80051e4:	4681      	mov	r9, r0
 80051e6:	d1d5      	bne.n	8005194 <_vfiprintf_r+0x198>
 80051e8:	89a3      	ldrh	r3, [r4, #12]
 80051ea:	065b      	lsls	r3, r3, #25
 80051ec:	f53f af7e 	bmi.w	80050ec <_vfiprintf_r+0xf0>
 80051f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051f2:	e77d      	b.n	80050f0 <_vfiprintf_r+0xf4>
 80051f4:	ab03      	add	r3, sp, #12
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	4622      	mov	r2, r4
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <_vfiprintf_r+0x228>)
 80051fc:	a904      	add	r1, sp, #16
 80051fe:	4630      	mov	r0, r6
 8005200:	f000 f888 	bl	8005314 <_printf_i>
 8005204:	e7ec      	b.n	80051e0 <_vfiprintf_r+0x1e4>
 8005206:	bf00      	nop
 8005208:	08005bf0 	.word	0x08005bf0
 800520c:	08005c30 	.word	0x08005c30
 8005210:	08005c10 	.word	0x08005c10
 8005214:	08005bd0 	.word	0x08005bd0
 8005218:	08005c36 	.word	0x08005c36
 800521c:	08005c3a 	.word	0x08005c3a
 8005220:	00000000 	.word	0x00000000
 8005224:	08004fd7 	.word	0x08004fd7

08005228 <_printf_common>:
 8005228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800522c:	4691      	mov	r9, r2
 800522e:	461f      	mov	r7, r3
 8005230:	688a      	ldr	r2, [r1, #8]
 8005232:	690b      	ldr	r3, [r1, #16]
 8005234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005238:	4293      	cmp	r3, r2
 800523a:	bfb8      	it	lt
 800523c:	4613      	movlt	r3, r2
 800523e:	f8c9 3000 	str.w	r3, [r9]
 8005242:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005246:	4606      	mov	r6, r0
 8005248:	460c      	mov	r4, r1
 800524a:	b112      	cbz	r2, 8005252 <_printf_common+0x2a>
 800524c:	3301      	adds	r3, #1
 800524e:	f8c9 3000 	str.w	r3, [r9]
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	0699      	lsls	r1, r3, #26
 8005256:	bf42      	ittt	mi
 8005258:	f8d9 3000 	ldrmi.w	r3, [r9]
 800525c:	3302      	addmi	r3, #2
 800525e:	f8c9 3000 	strmi.w	r3, [r9]
 8005262:	6825      	ldr	r5, [r4, #0]
 8005264:	f015 0506 	ands.w	r5, r5, #6
 8005268:	d107      	bne.n	800527a <_printf_common+0x52>
 800526a:	f104 0a19 	add.w	sl, r4, #25
 800526e:	68e3      	ldr	r3, [r4, #12]
 8005270:	f8d9 2000 	ldr.w	r2, [r9]
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	42ab      	cmp	r3, r5
 8005278:	dc28      	bgt.n	80052cc <_printf_common+0xa4>
 800527a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800527e:	6822      	ldr	r2, [r4, #0]
 8005280:	3300      	adds	r3, #0
 8005282:	bf18      	it	ne
 8005284:	2301      	movne	r3, #1
 8005286:	0692      	lsls	r2, r2, #26
 8005288:	d42d      	bmi.n	80052e6 <_printf_common+0xbe>
 800528a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800528e:	4639      	mov	r1, r7
 8005290:	4630      	mov	r0, r6
 8005292:	47c0      	blx	r8
 8005294:	3001      	adds	r0, #1
 8005296:	d020      	beq.n	80052da <_printf_common+0xb2>
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	68e5      	ldr	r5, [r4, #12]
 800529c:	f8d9 2000 	ldr.w	r2, [r9]
 80052a0:	f003 0306 	and.w	r3, r3, #6
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	bf08      	it	eq
 80052a8:	1aad      	subeq	r5, r5, r2
 80052aa:	68a3      	ldr	r3, [r4, #8]
 80052ac:	6922      	ldr	r2, [r4, #16]
 80052ae:	bf0c      	ite	eq
 80052b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052b4:	2500      	movne	r5, #0
 80052b6:	4293      	cmp	r3, r2
 80052b8:	bfc4      	itt	gt
 80052ba:	1a9b      	subgt	r3, r3, r2
 80052bc:	18ed      	addgt	r5, r5, r3
 80052be:	f04f 0900 	mov.w	r9, #0
 80052c2:	341a      	adds	r4, #26
 80052c4:	454d      	cmp	r5, r9
 80052c6:	d11a      	bne.n	80052fe <_printf_common+0xd6>
 80052c8:	2000      	movs	r0, #0
 80052ca:	e008      	b.n	80052de <_printf_common+0xb6>
 80052cc:	2301      	movs	r3, #1
 80052ce:	4652      	mov	r2, sl
 80052d0:	4639      	mov	r1, r7
 80052d2:	4630      	mov	r0, r6
 80052d4:	47c0      	blx	r8
 80052d6:	3001      	adds	r0, #1
 80052d8:	d103      	bne.n	80052e2 <_printf_common+0xba>
 80052da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e2:	3501      	adds	r5, #1
 80052e4:	e7c3      	b.n	800526e <_printf_common+0x46>
 80052e6:	18e1      	adds	r1, r4, r3
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	2030      	movs	r0, #48	; 0x30
 80052ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052f0:	4422      	add	r2, r4
 80052f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052fa:	3302      	adds	r3, #2
 80052fc:	e7c5      	b.n	800528a <_printf_common+0x62>
 80052fe:	2301      	movs	r3, #1
 8005300:	4622      	mov	r2, r4
 8005302:	4639      	mov	r1, r7
 8005304:	4630      	mov	r0, r6
 8005306:	47c0      	blx	r8
 8005308:	3001      	adds	r0, #1
 800530a:	d0e6      	beq.n	80052da <_printf_common+0xb2>
 800530c:	f109 0901 	add.w	r9, r9, #1
 8005310:	e7d8      	b.n	80052c4 <_printf_common+0x9c>
	...

08005314 <_printf_i>:
 8005314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005318:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800531c:	460c      	mov	r4, r1
 800531e:	7e09      	ldrb	r1, [r1, #24]
 8005320:	b085      	sub	sp, #20
 8005322:	296e      	cmp	r1, #110	; 0x6e
 8005324:	4617      	mov	r7, r2
 8005326:	4606      	mov	r6, r0
 8005328:	4698      	mov	r8, r3
 800532a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800532c:	f000 80b3 	beq.w	8005496 <_printf_i+0x182>
 8005330:	d822      	bhi.n	8005378 <_printf_i+0x64>
 8005332:	2963      	cmp	r1, #99	; 0x63
 8005334:	d036      	beq.n	80053a4 <_printf_i+0x90>
 8005336:	d80a      	bhi.n	800534e <_printf_i+0x3a>
 8005338:	2900      	cmp	r1, #0
 800533a:	f000 80b9 	beq.w	80054b0 <_printf_i+0x19c>
 800533e:	2958      	cmp	r1, #88	; 0x58
 8005340:	f000 8083 	beq.w	800544a <_printf_i+0x136>
 8005344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005348:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800534c:	e032      	b.n	80053b4 <_printf_i+0xa0>
 800534e:	2964      	cmp	r1, #100	; 0x64
 8005350:	d001      	beq.n	8005356 <_printf_i+0x42>
 8005352:	2969      	cmp	r1, #105	; 0x69
 8005354:	d1f6      	bne.n	8005344 <_printf_i+0x30>
 8005356:	6820      	ldr	r0, [r4, #0]
 8005358:	6813      	ldr	r3, [r2, #0]
 800535a:	0605      	lsls	r5, r0, #24
 800535c:	f103 0104 	add.w	r1, r3, #4
 8005360:	d52a      	bpl.n	80053b8 <_printf_i+0xa4>
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6011      	str	r1, [r2, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	da03      	bge.n	8005372 <_printf_i+0x5e>
 800536a:	222d      	movs	r2, #45	; 0x2d
 800536c:	425b      	negs	r3, r3
 800536e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005372:	486f      	ldr	r0, [pc, #444]	; (8005530 <_printf_i+0x21c>)
 8005374:	220a      	movs	r2, #10
 8005376:	e039      	b.n	80053ec <_printf_i+0xd8>
 8005378:	2973      	cmp	r1, #115	; 0x73
 800537a:	f000 809d 	beq.w	80054b8 <_printf_i+0x1a4>
 800537e:	d808      	bhi.n	8005392 <_printf_i+0x7e>
 8005380:	296f      	cmp	r1, #111	; 0x6f
 8005382:	d020      	beq.n	80053c6 <_printf_i+0xb2>
 8005384:	2970      	cmp	r1, #112	; 0x70
 8005386:	d1dd      	bne.n	8005344 <_printf_i+0x30>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	f043 0320 	orr.w	r3, r3, #32
 800538e:	6023      	str	r3, [r4, #0]
 8005390:	e003      	b.n	800539a <_printf_i+0x86>
 8005392:	2975      	cmp	r1, #117	; 0x75
 8005394:	d017      	beq.n	80053c6 <_printf_i+0xb2>
 8005396:	2978      	cmp	r1, #120	; 0x78
 8005398:	d1d4      	bne.n	8005344 <_printf_i+0x30>
 800539a:	2378      	movs	r3, #120	; 0x78
 800539c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053a0:	4864      	ldr	r0, [pc, #400]	; (8005534 <_printf_i+0x220>)
 80053a2:	e055      	b.n	8005450 <_printf_i+0x13c>
 80053a4:	6813      	ldr	r3, [r2, #0]
 80053a6:	1d19      	adds	r1, r3, #4
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6011      	str	r1, [r2, #0]
 80053ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053b4:	2301      	movs	r3, #1
 80053b6:	e08c      	b.n	80054d2 <_printf_i+0x1be>
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6011      	str	r1, [r2, #0]
 80053bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053c0:	bf18      	it	ne
 80053c2:	b21b      	sxthne	r3, r3
 80053c4:	e7cf      	b.n	8005366 <_printf_i+0x52>
 80053c6:	6813      	ldr	r3, [r2, #0]
 80053c8:	6825      	ldr	r5, [r4, #0]
 80053ca:	1d18      	adds	r0, r3, #4
 80053cc:	6010      	str	r0, [r2, #0]
 80053ce:	0628      	lsls	r0, r5, #24
 80053d0:	d501      	bpl.n	80053d6 <_printf_i+0xc2>
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	e002      	b.n	80053dc <_printf_i+0xc8>
 80053d6:	0668      	lsls	r0, r5, #25
 80053d8:	d5fb      	bpl.n	80053d2 <_printf_i+0xbe>
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	4854      	ldr	r0, [pc, #336]	; (8005530 <_printf_i+0x21c>)
 80053de:	296f      	cmp	r1, #111	; 0x6f
 80053e0:	bf14      	ite	ne
 80053e2:	220a      	movne	r2, #10
 80053e4:	2208      	moveq	r2, #8
 80053e6:	2100      	movs	r1, #0
 80053e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053ec:	6865      	ldr	r5, [r4, #4]
 80053ee:	60a5      	str	r5, [r4, #8]
 80053f0:	2d00      	cmp	r5, #0
 80053f2:	f2c0 8095 	blt.w	8005520 <_printf_i+0x20c>
 80053f6:	6821      	ldr	r1, [r4, #0]
 80053f8:	f021 0104 	bic.w	r1, r1, #4
 80053fc:	6021      	str	r1, [r4, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d13d      	bne.n	800547e <_printf_i+0x16a>
 8005402:	2d00      	cmp	r5, #0
 8005404:	f040 808e 	bne.w	8005524 <_printf_i+0x210>
 8005408:	4665      	mov	r5, ip
 800540a:	2a08      	cmp	r2, #8
 800540c:	d10b      	bne.n	8005426 <_printf_i+0x112>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	07db      	lsls	r3, r3, #31
 8005412:	d508      	bpl.n	8005426 <_printf_i+0x112>
 8005414:	6923      	ldr	r3, [r4, #16]
 8005416:	6862      	ldr	r2, [r4, #4]
 8005418:	429a      	cmp	r2, r3
 800541a:	bfde      	ittt	le
 800541c:	2330      	movle	r3, #48	; 0x30
 800541e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005422:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005426:	ebac 0305 	sub.w	r3, ip, r5
 800542a:	6123      	str	r3, [r4, #16]
 800542c:	f8cd 8000 	str.w	r8, [sp]
 8005430:	463b      	mov	r3, r7
 8005432:	aa03      	add	r2, sp, #12
 8005434:	4621      	mov	r1, r4
 8005436:	4630      	mov	r0, r6
 8005438:	f7ff fef6 	bl	8005228 <_printf_common>
 800543c:	3001      	adds	r0, #1
 800543e:	d14d      	bne.n	80054dc <_printf_i+0x1c8>
 8005440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005444:	b005      	add	sp, #20
 8005446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800544a:	4839      	ldr	r0, [pc, #228]	; (8005530 <_printf_i+0x21c>)
 800544c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005450:	6813      	ldr	r3, [r2, #0]
 8005452:	6821      	ldr	r1, [r4, #0]
 8005454:	1d1d      	adds	r5, r3, #4
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6015      	str	r5, [r2, #0]
 800545a:	060a      	lsls	r2, r1, #24
 800545c:	d50b      	bpl.n	8005476 <_printf_i+0x162>
 800545e:	07ca      	lsls	r2, r1, #31
 8005460:	bf44      	itt	mi
 8005462:	f041 0120 	orrmi.w	r1, r1, #32
 8005466:	6021      	strmi	r1, [r4, #0]
 8005468:	b91b      	cbnz	r3, 8005472 <_printf_i+0x15e>
 800546a:	6822      	ldr	r2, [r4, #0]
 800546c:	f022 0220 	bic.w	r2, r2, #32
 8005470:	6022      	str	r2, [r4, #0]
 8005472:	2210      	movs	r2, #16
 8005474:	e7b7      	b.n	80053e6 <_printf_i+0xd2>
 8005476:	064d      	lsls	r5, r1, #25
 8005478:	bf48      	it	mi
 800547a:	b29b      	uxthmi	r3, r3
 800547c:	e7ef      	b.n	800545e <_printf_i+0x14a>
 800547e:	4665      	mov	r5, ip
 8005480:	fbb3 f1f2 	udiv	r1, r3, r2
 8005484:	fb02 3311 	mls	r3, r2, r1, r3
 8005488:	5cc3      	ldrb	r3, [r0, r3]
 800548a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800548e:	460b      	mov	r3, r1
 8005490:	2900      	cmp	r1, #0
 8005492:	d1f5      	bne.n	8005480 <_printf_i+0x16c>
 8005494:	e7b9      	b.n	800540a <_printf_i+0xf6>
 8005496:	6813      	ldr	r3, [r2, #0]
 8005498:	6825      	ldr	r5, [r4, #0]
 800549a:	6961      	ldr	r1, [r4, #20]
 800549c:	1d18      	adds	r0, r3, #4
 800549e:	6010      	str	r0, [r2, #0]
 80054a0:	0628      	lsls	r0, r5, #24
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	d501      	bpl.n	80054aa <_printf_i+0x196>
 80054a6:	6019      	str	r1, [r3, #0]
 80054a8:	e002      	b.n	80054b0 <_printf_i+0x19c>
 80054aa:	066a      	lsls	r2, r5, #25
 80054ac:	d5fb      	bpl.n	80054a6 <_printf_i+0x192>
 80054ae:	8019      	strh	r1, [r3, #0]
 80054b0:	2300      	movs	r3, #0
 80054b2:	6123      	str	r3, [r4, #16]
 80054b4:	4665      	mov	r5, ip
 80054b6:	e7b9      	b.n	800542c <_printf_i+0x118>
 80054b8:	6813      	ldr	r3, [r2, #0]
 80054ba:	1d19      	adds	r1, r3, #4
 80054bc:	6011      	str	r1, [r2, #0]
 80054be:	681d      	ldr	r5, [r3, #0]
 80054c0:	6862      	ldr	r2, [r4, #4]
 80054c2:	2100      	movs	r1, #0
 80054c4:	4628      	mov	r0, r5
 80054c6:	f7fa fe8b 	bl	80001e0 <memchr>
 80054ca:	b108      	cbz	r0, 80054d0 <_printf_i+0x1bc>
 80054cc:	1b40      	subs	r0, r0, r5
 80054ce:	6060      	str	r0, [r4, #4]
 80054d0:	6863      	ldr	r3, [r4, #4]
 80054d2:	6123      	str	r3, [r4, #16]
 80054d4:	2300      	movs	r3, #0
 80054d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054da:	e7a7      	b.n	800542c <_printf_i+0x118>
 80054dc:	6923      	ldr	r3, [r4, #16]
 80054de:	462a      	mov	r2, r5
 80054e0:	4639      	mov	r1, r7
 80054e2:	4630      	mov	r0, r6
 80054e4:	47c0      	blx	r8
 80054e6:	3001      	adds	r0, #1
 80054e8:	d0aa      	beq.n	8005440 <_printf_i+0x12c>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	079b      	lsls	r3, r3, #30
 80054ee:	d413      	bmi.n	8005518 <_printf_i+0x204>
 80054f0:	68e0      	ldr	r0, [r4, #12]
 80054f2:	9b03      	ldr	r3, [sp, #12]
 80054f4:	4298      	cmp	r0, r3
 80054f6:	bfb8      	it	lt
 80054f8:	4618      	movlt	r0, r3
 80054fa:	e7a3      	b.n	8005444 <_printf_i+0x130>
 80054fc:	2301      	movs	r3, #1
 80054fe:	464a      	mov	r2, r9
 8005500:	4639      	mov	r1, r7
 8005502:	4630      	mov	r0, r6
 8005504:	47c0      	blx	r8
 8005506:	3001      	adds	r0, #1
 8005508:	d09a      	beq.n	8005440 <_printf_i+0x12c>
 800550a:	3501      	adds	r5, #1
 800550c:	68e3      	ldr	r3, [r4, #12]
 800550e:	9a03      	ldr	r2, [sp, #12]
 8005510:	1a9b      	subs	r3, r3, r2
 8005512:	42ab      	cmp	r3, r5
 8005514:	dcf2      	bgt.n	80054fc <_printf_i+0x1e8>
 8005516:	e7eb      	b.n	80054f0 <_printf_i+0x1dc>
 8005518:	2500      	movs	r5, #0
 800551a:	f104 0919 	add.w	r9, r4, #25
 800551e:	e7f5      	b.n	800550c <_printf_i+0x1f8>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1ac      	bne.n	800547e <_printf_i+0x16a>
 8005524:	7803      	ldrb	r3, [r0, #0]
 8005526:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800552a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800552e:	e76c      	b.n	800540a <_printf_i+0xf6>
 8005530:	08005c41 	.word	0x08005c41
 8005534:	08005c52 	.word	0x08005c52

08005538 <_sbrk_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4c06      	ldr	r4, [pc, #24]	; (8005554 <_sbrk_r+0x1c>)
 800553c:	2300      	movs	r3, #0
 800553e:	4605      	mov	r5, r0
 8005540:	4608      	mov	r0, r1
 8005542:	6023      	str	r3, [r4, #0]
 8005544:	f7fb fb22 	bl	8000b8c <_sbrk>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_sbrk_r+0x1a>
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	b103      	cbz	r3, 8005552 <_sbrk_r+0x1a>
 8005550:	602b      	str	r3, [r5, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	200004f4 	.word	0x200004f4

08005558 <__sread>:
 8005558:	b510      	push	{r4, lr}
 800555a:	460c      	mov	r4, r1
 800555c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005560:	f000 fa96 	bl	8005a90 <_read_r>
 8005564:	2800      	cmp	r0, #0
 8005566:	bfab      	itete	ge
 8005568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800556a:	89a3      	ldrhlt	r3, [r4, #12]
 800556c:	181b      	addge	r3, r3, r0
 800556e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005572:	bfac      	ite	ge
 8005574:	6563      	strge	r3, [r4, #84]	; 0x54
 8005576:	81a3      	strhlt	r3, [r4, #12]
 8005578:	bd10      	pop	{r4, pc}

0800557a <__swrite>:
 800557a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800557e:	461f      	mov	r7, r3
 8005580:	898b      	ldrh	r3, [r1, #12]
 8005582:	05db      	lsls	r3, r3, #23
 8005584:	4605      	mov	r5, r0
 8005586:	460c      	mov	r4, r1
 8005588:	4616      	mov	r6, r2
 800558a:	d505      	bpl.n	8005598 <__swrite+0x1e>
 800558c:	2302      	movs	r3, #2
 800558e:	2200      	movs	r2, #0
 8005590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005594:	f000 f9b6 	bl	8005904 <_lseek_r>
 8005598:	89a3      	ldrh	r3, [r4, #12]
 800559a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800559e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055a2:	81a3      	strh	r3, [r4, #12]
 80055a4:	4632      	mov	r2, r6
 80055a6:	463b      	mov	r3, r7
 80055a8:	4628      	mov	r0, r5
 80055aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055ae:	f000 b869 	b.w	8005684 <_write_r>

080055b2 <__sseek>:
 80055b2:	b510      	push	{r4, lr}
 80055b4:	460c      	mov	r4, r1
 80055b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ba:	f000 f9a3 	bl	8005904 <_lseek_r>
 80055be:	1c43      	adds	r3, r0, #1
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	bf15      	itete	ne
 80055c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80055c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055ce:	81a3      	strheq	r3, [r4, #12]
 80055d0:	bf18      	it	ne
 80055d2:	81a3      	strhne	r3, [r4, #12]
 80055d4:	bd10      	pop	{r4, pc}

080055d6 <__sclose>:
 80055d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055da:	f000 b8d3 	b.w	8005784 <_close_r>
	...

080055e0 <__swbuf_r>:
 80055e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e2:	460e      	mov	r6, r1
 80055e4:	4614      	mov	r4, r2
 80055e6:	4605      	mov	r5, r0
 80055e8:	b118      	cbz	r0, 80055f2 <__swbuf_r+0x12>
 80055ea:	6983      	ldr	r3, [r0, #24]
 80055ec:	b90b      	cbnz	r3, 80055f2 <__swbuf_r+0x12>
 80055ee:	f7ff fbf7 	bl	8004de0 <__sinit>
 80055f2:	4b21      	ldr	r3, [pc, #132]	; (8005678 <__swbuf_r+0x98>)
 80055f4:	429c      	cmp	r4, r3
 80055f6:	d12a      	bne.n	800564e <__swbuf_r+0x6e>
 80055f8:	686c      	ldr	r4, [r5, #4]
 80055fa:	69a3      	ldr	r3, [r4, #24]
 80055fc:	60a3      	str	r3, [r4, #8]
 80055fe:	89a3      	ldrh	r3, [r4, #12]
 8005600:	071a      	lsls	r2, r3, #28
 8005602:	d52e      	bpl.n	8005662 <__swbuf_r+0x82>
 8005604:	6923      	ldr	r3, [r4, #16]
 8005606:	b363      	cbz	r3, 8005662 <__swbuf_r+0x82>
 8005608:	6923      	ldr	r3, [r4, #16]
 800560a:	6820      	ldr	r0, [r4, #0]
 800560c:	1ac0      	subs	r0, r0, r3
 800560e:	6963      	ldr	r3, [r4, #20]
 8005610:	b2f6      	uxtb	r6, r6
 8005612:	4283      	cmp	r3, r0
 8005614:	4637      	mov	r7, r6
 8005616:	dc04      	bgt.n	8005622 <__swbuf_r+0x42>
 8005618:	4621      	mov	r1, r4
 800561a:	4628      	mov	r0, r5
 800561c:	f000 f948 	bl	80058b0 <_fflush_r>
 8005620:	bb28      	cbnz	r0, 800566e <__swbuf_r+0x8e>
 8005622:	68a3      	ldr	r3, [r4, #8]
 8005624:	3b01      	subs	r3, #1
 8005626:	60a3      	str	r3, [r4, #8]
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	6022      	str	r2, [r4, #0]
 800562e:	701e      	strb	r6, [r3, #0]
 8005630:	6963      	ldr	r3, [r4, #20]
 8005632:	3001      	adds	r0, #1
 8005634:	4283      	cmp	r3, r0
 8005636:	d004      	beq.n	8005642 <__swbuf_r+0x62>
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	07db      	lsls	r3, r3, #31
 800563c:	d519      	bpl.n	8005672 <__swbuf_r+0x92>
 800563e:	2e0a      	cmp	r6, #10
 8005640:	d117      	bne.n	8005672 <__swbuf_r+0x92>
 8005642:	4621      	mov	r1, r4
 8005644:	4628      	mov	r0, r5
 8005646:	f000 f933 	bl	80058b0 <_fflush_r>
 800564a:	b190      	cbz	r0, 8005672 <__swbuf_r+0x92>
 800564c:	e00f      	b.n	800566e <__swbuf_r+0x8e>
 800564e:	4b0b      	ldr	r3, [pc, #44]	; (800567c <__swbuf_r+0x9c>)
 8005650:	429c      	cmp	r4, r3
 8005652:	d101      	bne.n	8005658 <__swbuf_r+0x78>
 8005654:	68ac      	ldr	r4, [r5, #8]
 8005656:	e7d0      	b.n	80055fa <__swbuf_r+0x1a>
 8005658:	4b09      	ldr	r3, [pc, #36]	; (8005680 <__swbuf_r+0xa0>)
 800565a:	429c      	cmp	r4, r3
 800565c:	bf08      	it	eq
 800565e:	68ec      	ldreq	r4, [r5, #12]
 8005660:	e7cb      	b.n	80055fa <__swbuf_r+0x1a>
 8005662:	4621      	mov	r1, r4
 8005664:	4628      	mov	r0, r5
 8005666:	f000 f81f 	bl	80056a8 <__swsetup_r>
 800566a:	2800      	cmp	r0, #0
 800566c:	d0cc      	beq.n	8005608 <__swbuf_r+0x28>
 800566e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005672:	4638      	mov	r0, r7
 8005674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005676:	bf00      	nop
 8005678:	08005bf0 	.word	0x08005bf0
 800567c:	08005c10 	.word	0x08005c10
 8005680:	08005bd0 	.word	0x08005bd0

08005684 <_write_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	4c07      	ldr	r4, [pc, #28]	; (80056a4 <_write_r+0x20>)
 8005688:	4605      	mov	r5, r0
 800568a:	4608      	mov	r0, r1
 800568c:	4611      	mov	r1, r2
 800568e:	2200      	movs	r2, #0
 8005690:	6022      	str	r2, [r4, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	f7fb fa29 	bl	8000aea <_write>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d102      	bne.n	80056a2 <_write_r+0x1e>
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	b103      	cbz	r3, 80056a2 <_write_r+0x1e>
 80056a0:	602b      	str	r3, [r5, #0]
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	200004f4 	.word	0x200004f4

080056a8 <__swsetup_r>:
 80056a8:	4b32      	ldr	r3, [pc, #200]	; (8005774 <__swsetup_r+0xcc>)
 80056aa:	b570      	push	{r4, r5, r6, lr}
 80056ac:	681d      	ldr	r5, [r3, #0]
 80056ae:	4606      	mov	r6, r0
 80056b0:	460c      	mov	r4, r1
 80056b2:	b125      	cbz	r5, 80056be <__swsetup_r+0x16>
 80056b4:	69ab      	ldr	r3, [r5, #24]
 80056b6:	b913      	cbnz	r3, 80056be <__swsetup_r+0x16>
 80056b8:	4628      	mov	r0, r5
 80056ba:	f7ff fb91 	bl	8004de0 <__sinit>
 80056be:	4b2e      	ldr	r3, [pc, #184]	; (8005778 <__swsetup_r+0xd0>)
 80056c0:	429c      	cmp	r4, r3
 80056c2:	d10f      	bne.n	80056e4 <__swsetup_r+0x3c>
 80056c4:	686c      	ldr	r4, [r5, #4]
 80056c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	0715      	lsls	r5, r2, #28
 80056ce:	d42c      	bmi.n	800572a <__swsetup_r+0x82>
 80056d0:	06d0      	lsls	r0, r2, #27
 80056d2:	d411      	bmi.n	80056f8 <__swsetup_r+0x50>
 80056d4:	2209      	movs	r2, #9
 80056d6:	6032      	str	r2, [r6, #0]
 80056d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056dc:	81a3      	strh	r3, [r4, #12]
 80056de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056e2:	e03e      	b.n	8005762 <__swsetup_r+0xba>
 80056e4:	4b25      	ldr	r3, [pc, #148]	; (800577c <__swsetup_r+0xd4>)
 80056e6:	429c      	cmp	r4, r3
 80056e8:	d101      	bne.n	80056ee <__swsetup_r+0x46>
 80056ea:	68ac      	ldr	r4, [r5, #8]
 80056ec:	e7eb      	b.n	80056c6 <__swsetup_r+0x1e>
 80056ee:	4b24      	ldr	r3, [pc, #144]	; (8005780 <__swsetup_r+0xd8>)
 80056f0:	429c      	cmp	r4, r3
 80056f2:	bf08      	it	eq
 80056f4:	68ec      	ldreq	r4, [r5, #12]
 80056f6:	e7e6      	b.n	80056c6 <__swsetup_r+0x1e>
 80056f8:	0751      	lsls	r1, r2, #29
 80056fa:	d512      	bpl.n	8005722 <__swsetup_r+0x7a>
 80056fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056fe:	b141      	cbz	r1, 8005712 <__swsetup_r+0x6a>
 8005700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005704:	4299      	cmp	r1, r3
 8005706:	d002      	beq.n	800570e <__swsetup_r+0x66>
 8005708:	4630      	mov	r0, r6
 800570a:	f000 f973 	bl	80059f4 <_free_r>
 800570e:	2300      	movs	r3, #0
 8005710:	6363      	str	r3, [r4, #52]	; 0x34
 8005712:	89a3      	ldrh	r3, [r4, #12]
 8005714:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005718:	81a3      	strh	r3, [r4, #12]
 800571a:	2300      	movs	r3, #0
 800571c:	6063      	str	r3, [r4, #4]
 800571e:	6923      	ldr	r3, [r4, #16]
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	89a3      	ldrh	r3, [r4, #12]
 8005724:	f043 0308 	orr.w	r3, r3, #8
 8005728:	81a3      	strh	r3, [r4, #12]
 800572a:	6923      	ldr	r3, [r4, #16]
 800572c:	b94b      	cbnz	r3, 8005742 <__swsetup_r+0x9a>
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005738:	d003      	beq.n	8005742 <__swsetup_r+0x9a>
 800573a:	4621      	mov	r1, r4
 800573c:	4630      	mov	r0, r6
 800573e:	f000 f917 	bl	8005970 <__smakebuf_r>
 8005742:	89a2      	ldrh	r2, [r4, #12]
 8005744:	f012 0301 	ands.w	r3, r2, #1
 8005748:	d00c      	beq.n	8005764 <__swsetup_r+0xbc>
 800574a:	2300      	movs	r3, #0
 800574c:	60a3      	str	r3, [r4, #8]
 800574e:	6963      	ldr	r3, [r4, #20]
 8005750:	425b      	negs	r3, r3
 8005752:	61a3      	str	r3, [r4, #24]
 8005754:	6923      	ldr	r3, [r4, #16]
 8005756:	b953      	cbnz	r3, 800576e <__swsetup_r+0xc6>
 8005758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800575c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005760:	d1ba      	bne.n	80056d8 <__swsetup_r+0x30>
 8005762:	bd70      	pop	{r4, r5, r6, pc}
 8005764:	0792      	lsls	r2, r2, #30
 8005766:	bf58      	it	pl
 8005768:	6963      	ldrpl	r3, [r4, #20]
 800576a:	60a3      	str	r3, [r4, #8]
 800576c:	e7f2      	b.n	8005754 <__swsetup_r+0xac>
 800576e:	2000      	movs	r0, #0
 8005770:	e7f7      	b.n	8005762 <__swsetup_r+0xba>
 8005772:	bf00      	nop
 8005774:	2000000c 	.word	0x2000000c
 8005778:	08005bf0 	.word	0x08005bf0
 800577c:	08005c10 	.word	0x08005c10
 8005780:	08005bd0 	.word	0x08005bd0

08005784 <_close_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	4c06      	ldr	r4, [pc, #24]	; (80057a0 <_close_r+0x1c>)
 8005788:	2300      	movs	r3, #0
 800578a:	4605      	mov	r5, r0
 800578c:	4608      	mov	r0, r1
 800578e:	6023      	str	r3, [r4, #0]
 8005790:	f7fb f9c7 	bl	8000b22 <_close>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d102      	bne.n	800579e <_close_r+0x1a>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	b103      	cbz	r3, 800579e <_close_r+0x1a>
 800579c:	602b      	str	r3, [r5, #0]
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	200004f4 	.word	0x200004f4

080057a4 <__sflush_r>:
 80057a4:	898a      	ldrh	r2, [r1, #12]
 80057a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057aa:	4605      	mov	r5, r0
 80057ac:	0710      	lsls	r0, r2, #28
 80057ae:	460c      	mov	r4, r1
 80057b0:	d458      	bmi.n	8005864 <__sflush_r+0xc0>
 80057b2:	684b      	ldr	r3, [r1, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	dc05      	bgt.n	80057c4 <__sflush_r+0x20>
 80057b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	dc02      	bgt.n	80057c4 <__sflush_r+0x20>
 80057be:	2000      	movs	r0, #0
 80057c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057c6:	2e00      	cmp	r6, #0
 80057c8:	d0f9      	beq.n	80057be <__sflush_r+0x1a>
 80057ca:	2300      	movs	r3, #0
 80057cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057d0:	682f      	ldr	r7, [r5, #0]
 80057d2:	6a21      	ldr	r1, [r4, #32]
 80057d4:	602b      	str	r3, [r5, #0]
 80057d6:	d032      	beq.n	800583e <__sflush_r+0x9a>
 80057d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057da:	89a3      	ldrh	r3, [r4, #12]
 80057dc:	075a      	lsls	r2, r3, #29
 80057de:	d505      	bpl.n	80057ec <__sflush_r+0x48>
 80057e0:	6863      	ldr	r3, [r4, #4]
 80057e2:	1ac0      	subs	r0, r0, r3
 80057e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057e6:	b10b      	cbz	r3, 80057ec <__sflush_r+0x48>
 80057e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057ea:	1ac0      	subs	r0, r0, r3
 80057ec:	2300      	movs	r3, #0
 80057ee:	4602      	mov	r2, r0
 80057f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057f2:	6a21      	ldr	r1, [r4, #32]
 80057f4:	4628      	mov	r0, r5
 80057f6:	47b0      	blx	r6
 80057f8:	1c43      	adds	r3, r0, #1
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	d106      	bne.n	800580c <__sflush_r+0x68>
 80057fe:	6829      	ldr	r1, [r5, #0]
 8005800:	291d      	cmp	r1, #29
 8005802:	d848      	bhi.n	8005896 <__sflush_r+0xf2>
 8005804:	4a29      	ldr	r2, [pc, #164]	; (80058ac <__sflush_r+0x108>)
 8005806:	40ca      	lsrs	r2, r1
 8005808:	07d6      	lsls	r6, r2, #31
 800580a:	d544      	bpl.n	8005896 <__sflush_r+0xf2>
 800580c:	2200      	movs	r2, #0
 800580e:	6062      	str	r2, [r4, #4]
 8005810:	04d9      	lsls	r1, r3, #19
 8005812:	6922      	ldr	r2, [r4, #16]
 8005814:	6022      	str	r2, [r4, #0]
 8005816:	d504      	bpl.n	8005822 <__sflush_r+0x7e>
 8005818:	1c42      	adds	r2, r0, #1
 800581a:	d101      	bne.n	8005820 <__sflush_r+0x7c>
 800581c:	682b      	ldr	r3, [r5, #0]
 800581e:	b903      	cbnz	r3, 8005822 <__sflush_r+0x7e>
 8005820:	6560      	str	r0, [r4, #84]	; 0x54
 8005822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005824:	602f      	str	r7, [r5, #0]
 8005826:	2900      	cmp	r1, #0
 8005828:	d0c9      	beq.n	80057be <__sflush_r+0x1a>
 800582a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800582e:	4299      	cmp	r1, r3
 8005830:	d002      	beq.n	8005838 <__sflush_r+0x94>
 8005832:	4628      	mov	r0, r5
 8005834:	f000 f8de 	bl	80059f4 <_free_r>
 8005838:	2000      	movs	r0, #0
 800583a:	6360      	str	r0, [r4, #52]	; 0x34
 800583c:	e7c0      	b.n	80057c0 <__sflush_r+0x1c>
 800583e:	2301      	movs	r3, #1
 8005840:	4628      	mov	r0, r5
 8005842:	47b0      	blx	r6
 8005844:	1c41      	adds	r1, r0, #1
 8005846:	d1c8      	bne.n	80057da <__sflush_r+0x36>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0c5      	beq.n	80057da <__sflush_r+0x36>
 800584e:	2b1d      	cmp	r3, #29
 8005850:	d001      	beq.n	8005856 <__sflush_r+0xb2>
 8005852:	2b16      	cmp	r3, #22
 8005854:	d101      	bne.n	800585a <__sflush_r+0xb6>
 8005856:	602f      	str	r7, [r5, #0]
 8005858:	e7b1      	b.n	80057be <__sflush_r+0x1a>
 800585a:	89a3      	ldrh	r3, [r4, #12]
 800585c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005860:	81a3      	strh	r3, [r4, #12]
 8005862:	e7ad      	b.n	80057c0 <__sflush_r+0x1c>
 8005864:	690f      	ldr	r7, [r1, #16]
 8005866:	2f00      	cmp	r7, #0
 8005868:	d0a9      	beq.n	80057be <__sflush_r+0x1a>
 800586a:	0793      	lsls	r3, r2, #30
 800586c:	680e      	ldr	r6, [r1, #0]
 800586e:	bf08      	it	eq
 8005870:	694b      	ldreq	r3, [r1, #20]
 8005872:	600f      	str	r7, [r1, #0]
 8005874:	bf18      	it	ne
 8005876:	2300      	movne	r3, #0
 8005878:	eba6 0807 	sub.w	r8, r6, r7
 800587c:	608b      	str	r3, [r1, #8]
 800587e:	f1b8 0f00 	cmp.w	r8, #0
 8005882:	dd9c      	ble.n	80057be <__sflush_r+0x1a>
 8005884:	4643      	mov	r3, r8
 8005886:	463a      	mov	r2, r7
 8005888:	6a21      	ldr	r1, [r4, #32]
 800588a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800588c:	4628      	mov	r0, r5
 800588e:	47b0      	blx	r6
 8005890:	2800      	cmp	r0, #0
 8005892:	dc06      	bgt.n	80058a2 <__sflush_r+0xfe>
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800589a:	81a3      	strh	r3, [r4, #12]
 800589c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058a0:	e78e      	b.n	80057c0 <__sflush_r+0x1c>
 80058a2:	4407      	add	r7, r0
 80058a4:	eba8 0800 	sub.w	r8, r8, r0
 80058a8:	e7e9      	b.n	800587e <__sflush_r+0xda>
 80058aa:	bf00      	nop
 80058ac:	20400001 	.word	0x20400001

080058b0 <_fflush_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	690b      	ldr	r3, [r1, #16]
 80058b4:	4605      	mov	r5, r0
 80058b6:	460c      	mov	r4, r1
 80058b8:	b1db      	cbz	r3, 80058f2 <_fflush_r+0x42>
 80058ba:	b118      	cbz	r0, 80058c4 <_fflush_r+0x14>
 80058bc:	6983      	ldr	r3, [r0, #24]
 80058be:	b90b      	cbnz	r3, 80058c4 <_fflush_r+0x14>
 80058c0:	f7ff fa8e 	bl	8004de0 <__sinit>
 80058c4:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <_fflush_r+0x48>)
 80058c6:	429c      	cmp	r4, r3
 80058c8:	d109      	bne.n	80058de <_fflush_r+0x2e>
 80058ca:	686c      	ldr	r4, [r5, #4]
 80058cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058d0:	b17b      	cbz	r3, 80058f2 <_fflush_r+0x42>
 80058d2:	4621      	mov	r1, r4
 80058d4:	4628      	mov	r0, r5
 80058d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058da:	f7ff bf63 	b.w	80057a4 <__sflush_r>
 80058de:	4b07      	ldr	r3, [pc, #28]	; (80058fc <_fflush_r+0x4c>)
 80058e0:	429c      	cmp	r4, r3
 80058e2:	d101      	bne.n	80058e8 <_fflush_r+0x38>
 80058e4:	68ac      	ldr	r4, [r5, #8]
 80058e6:	e7f1      	b.n	80058cc <_fflush_r+0x1c>
 80058e8:	4b05      	ldr	r3, [pc, #20]	; (8005900 <_fflush_r+0x50>)
 80058ea:	429c      	cmp	r4, r3
 80058ec:	bf08      	it	eq
 80058ee:	68ec      	ldreq	r4, [r5, #12]
 80058f0:	e7ec      	b.n	80058cc <_fflush_r+0x1c>
 80058f2:	2000      	movs	r0, #0
 80058f4:	bd38      	pop	{r3, r4, r5, pc}
 80058f6:	bf00      	nop
 80058f8:	08005bf0 	.word	0x08005bf0
 80058fc:	08005c10 	.word	0x08005c10
 8005900:	08005bd0 	.word	0x08005bd0

08005904 <_lseek_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4c07      	ldr	r4, [pc, #28]	; (8005924 <_lseek_r+0x20>)
 8005908:	4605      	mov	r5, r0
 800590a:	4608      	mov	r0, r1
 800590c:	4611      	mov	r1, r2
 800590e:	2200      	movs	r2, #0
 8005910:	6022      	str	r2, [r4, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f7fb f92c 	bl	8000b70 <_lseek>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_lseek_r+0x1e>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	b103      	cbz	r3, 8005922 <_lseek_r+0x1e>
 8005920:	602b      	str	r3, [r5, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	200004f4 	.word	0x200004f4

08005928 <__swhatbuf_r>:
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	460e      	mov	r6, r1
 800592c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005930:	2900      	cmp	r1, #0
 8005932:	b096      	sub	sp, #88	; 0x58
 8005934:	4614      	mov	r4, r2
 8005936:	461d      	mov	r5, r3
 8005938:	da07      	bge.n	800594a <__swhatbuf_r+0x22>
 800593a:	2300      	movs	r3, #0
 800593c:	602b      	str	r3, [r5, #0]
 800593e:	89b3      	ldrh	r3, [r6, #12]
 8005940:	061a      	lsls	r2, r3, #24
 8005942:	d410      	bmi.n	8005966 <__swhatbuf_r+0x3e>
 8005944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005948:	e00e      	b.n	8005968 <__swhatbuf_r+0x40>
 800594a:	466a      	mov	r2, sp
 800594c:	f000 f8b2 	bl	8005ab4 <_fstat_r>
 8005950:	2800      	cmp	r0, #0
 8005952:	dbf2      	blt.n	800593a <__swhatbuf_r+0x12>
 8005954:	9a01      	ldr	r2, [sp, #4]
 8005956:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800595a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800595e:	425a      	negs	r2, r3
 8005960:	415a      	adcs	r2, r3
 8005962:	602a      	str	r2, [r5, #0]
 8005964:	e7ee      	b.n	8005944 <__swhatbuf_r+0x1c>
 8005966:	2340      	movs	r3, #64	; 0x40
 8005968:	2000      	movs	r0, #0
 800596a:	6023      	str	r3, [r4, #0]
 800596c:	b016      	add	sp, #88	; 0x58
 800596e:	bd70      	pop	{r4, r5, r6, pc}

08005970 <__smakebuf_r>:
 8005970:	898b      	ldrh	r3, [r1, #12]
 8005972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005974:	079d      	lsls	r5, r3, #30
 8005976:	4606      	mov	r6, r0
 8005978:	460c      	mov	r4, r1
 800597a:	d507      	bpl.n	800598c <__smakebuf_r+0x1c>
 800597c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	6123      	str	r3, [r4, #16]
 8005984:	2301      	movs	r3, #1
 8005986:	6163      	str	r3, [r4, #20]
 8005988:	b002      	add	sp, #8
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	ab01      	add	r3, sp, #4
 800598e:	466a      	mov	r2, sp
 8005990:	f7ff ffca 	bl	8005928 <__swhatbuf_r>
 8005994:	9900      	ldr	r1, [sp, #0]
 8005996:	4605      	mov	r5, r0
 8005998:	4630      	mov	r0, r6
 800599a:	f7ff faab 	bl	8004ef4 <_malloc_r>
 800599e:	b948      	cbnz	r0, 80059b4 <__smakebuf_r+0x44>
 80059a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059a4:	059a      	lsls	r2, r3, #22
 80059a6:	d4ef      	bmi.n	8005988 <__smakebuf_r+0x18>
 80059a8:	f023 0303 	bic.w	r3, r3, #3
 80059ac:	f043 0302 	orr.w	r3, r3, #2
 80059b0:	81a3      	strh	r3, [r4, #12]
 80059b2:	e7e3      	b.n	800597c <__smakebuf_r+0xc>
 80059b4:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <__smakebuf_r+0x7c>)
 80059b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80059b8:	89a3      	ldrh	r3, [r4, #12]
 80059ba:	6020      	str	r0, [r4, #0]
 80059bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c0:	81a3      	strh	r3, [r4, #12]
 80059c2:	9b00      	ldr	r3, [sp, #0]
 80059c4:	6163      	str	r3, [r4, #20]
 80059c6:	9b01      	ldr	r3, [sp, #4]
 80059c8:	6120      	str	r0, [r4, #16]
 80059ca:	b15b      	cbz	r3, 80059e4 <__smakebuf_r+0x74>
 80059cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059d0:	4630      	mov	r0, r6
 80059d2:	f000 f881 	bl	8005ad8 <_isatty_r>
 80059d6:	b128      	cbz	r0, 80059e4 <__smakebuf_r+0x74>
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	f023 0303 	bic.w	r3, r3, #3
 80059de:	f043 0301 	orr.w	r3, r3, #1
 80059e2:	81a3      	strh	r3, [r4, #12]
 80059e4:	89a3      	ldrh	r3, [r4, #12]
 80059e6:	431d      	orrs	r5, r3
 80059e8:	81a5      	strh	r5, [r4, #12]
 80059ea:	e7cd      	b.n	8005988 <__smakebuf_r+0x18>
 80059ec:	08004da9 	.word	0x08004da9

080059f0 <__malloc_lock>:
 80059f0:	4770      	bx	lr

080059f2 <__malloc_unlock>:
 80059f2:	4770      	bx	lr

080059f4 <_free_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4605      	mov	r5, r0
 80059f8:	2900      	cmp	r1, #0
 80059fa:	d045      	beq.n	8005a88 <_free_r+0x94>
 80059fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a00:	1f0c      	subs	r4, r1, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	bfb8      	it	lt
 8005a06:	18e4      	addlt	r4, r4, r3
 8005a08:	f7ff fff2 	bl	80059f0 <__malloc_lock>
 8005a0c:	4a1f      	ldr	r2, [pc, #124]	; (8005a8c <_free_r+0x98>)
 8005a0e:	6813      	ldr	r3, [r2, #0]
 8005a10:	4610      	mov	r0, r2
 8005a12:	b933      	cbnz	r3, 8005a22 <_free_r+0x2e>
 8005a14:	6063      	str	r3, [r4, #4]
 8005a16:	6014      	str	r4, [r2, #0]
 8005a18:	4628      	mov	r0, r5
 8005a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a1e:	f7ff bfe8 	b.w	80059f2 <__malloc_unlock>
 8005a22:	42a3      	cmp	r3, r4
 8005a24:	d90c      	bls.n	8005a40 <_free_r+0x4c>
 8005a26:	6821      	ldr	r1, [r4, #0]
 8005a28:	1862      	adds	r2, r4, r1
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	bf04      	itt	eq
 8005a2e:	681a      	ldreq	r2, [r3, #0]
 8005a30:	685b      	ldreq	r3, [r3, #4]
 8005a32:	6063      	str	r3, [r4, #4]
 8005a34:	bf04      	itt	eq
 8005a36:	1852      	addeq	r2, r2, r1
 8005a38:	6022      	streq	r2, [r4, #0]
 8005a3a:	6004      	str	r4, [r0, #0]
 8005a3c:	e7ec      	b.n	8005a18 <_free_r+0x24>
 8005a3e:	4613      	mov	r3, r2
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	b10a      	cbz	r2, 8005a48 <_free_r+0x54>
 8005a44:	42a2      	cmp	r2, r4
 8005a46:	d9fa      	bls.n	8005a3e <_free_r+0x4a>
 8005a48:	6819      	ldr	r1, [r3, #0]
 8005a4a:	1858      	adds	r0, r3, r1
 8005a4c:	42a0      	cmp	r0, r4
 8005a4e:	d10b      	bne.n	8005a68 <_free_r+0x74>
 8005a50:	6820      	ldr	r0, [r4, #0]
 8005a52:	4401      	add	r1, r0
 8005a54:	1858      	adds	r0, r3, r1
 8005a56:	4282      	cmp	r2, r0
 8005a58:	6019      	str	r1, [r3, #0]
 8005a5a:	d1dd      	bne.n	8005a18 <_free_r+0x24>
 8005a5c:	6810      	ldr	r0, [r2, #0]
 8005a5e:	6852      	ldr	r2, [r2, #4]
 8005a60:	605a      	str	r2, [r3, #4]
 8005a62:	4401      	add	r1, r0
 8005a64:	6019      	str	r1, [r3, #0]
 8005a66:	e7d7      	b.n	8005a18 <_free_r+0x24>
 8005a68:	d902      	bls.n	8005a70 <_free_r+0x7c>
 8005a6a:	230c      	movs	r3, #12
 8005a6c:	602b      	str	r3, [r5, #0]
 8005a6e:	e7d3      	b.n	8005a18 <_free_r+0x24>
 8005a70:	6820      	ldr	r0, [r4, #0]
 8005a72:	1821      	adds	r1, r4, r0
 8005a74:	428a      	cmp	r2, r1
 8005a76:	bf04      	itt	eq
 8005a78:	6811      	ldreq	r1, [r2, #0]
 8005a7a:	6852      	ldreq	r2, [r2, #4]
 8005a7c:	6062      	str	r2, [r4, #4]
 8005a7e:	bf04      	itt	eq
 8005a80:	1809      	addeq	r1, r1, r0
 8005a82:	6021      	streq	r1, [r4, #0]
 8005a84:	605c      	str	r4, [r3, #4]
 8005a86:	e7c7      	b.n	8005a18 <_free_r+0x24>
 8005a88:	bd38      	pop	{r3, r4, r5, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20000090 	.word	0x20000090

08005a90 <_read_r>:
 8005a90:	b538      	push	{r3, r4, r5, lr}
 8005a92:	4c07      	ldr	r4, [pc, #28]	; (8005ab0 <_read_r+0x20>)
 8005a94:	4605      	mov	r5, r0
 8005a96:	4608      	mov	r0, r1
 8005a98:	4611      	mov	r1, r2
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	6022      	str	r2, [r4, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f7fb f806 	bl	8000ab0 <_read>
 8005aa4:	1c43      	adds	r3, r0, #1
 8005aa6:	d102      	bne.n	8005aae <_read_r+0x1e>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	b103      	cbz	r3, 8005aae <_read_r+0x1e>
 8005aac:	602b      	str	r3, [r5, #0]
 8005aae:	bd38      	pop	{r3, r4, r5, pc}
 8005ab0:	200004f4 	.word	0x200004f4

08005ab4 <_fstat_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4c07      	ldr	r4, [pc, #28]	; (8005ad4 <_fstat_r+0x20>)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4605      	mov	r5, r0
 8005abc:	4608      	mov	r0, r1
 8005abe:	4611      	mov	r1, r2
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	f7fb f83a 	bl	8000b3a <_fstat>
 8005ac6:	1c43      	adds	r3, r0, #1
 8005ac8:	d102      	bne.n	8005ad0 <_fstat_r+0x1c>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	b103      	cbz	r3, 8005ad0 <_fstat_r+0x1c>
 8005ace:	602b      	str	r3, [r5, #0]
 8005ad0:	bd38      	pop	{r3, r4, r5, pc}
 8005ad2:	bf00      	nop
 8005ad4:	200004f4 	.word	0x200004f4

08005ad8 <_isatty_r>:
 8005ad8:	b538      	push	{r3, r4, r5, lr}
 8005ada:	4c06      	ldr	r4, [pc, #24]	; (8005af4 <_isatty_r+0x1c>)
 8005adc:	2300      	movs	r3, #0
 8005ade:	4605      	mov	r5, r0
 8005ae0:	4608      	mov	r0, r1
 8005ae2:	6023      	str	r3, [r4, #0]
 8005ae4:	f7fb f839 	bl	8000b5a <_isatty>
 8005ae8:	1c43      	adds	r3, r0, #1
 8005aea:	d102      	bne.n	8005af2 <_isatty_r+0x1a>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	b103      	cbz	r3, 8005af2 <_isatty_r+0x1a>
 8005af0:	602b      	str	r3, [r5, #0]
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	200004f4 	.word	0x200004f4

08005af8 <_init>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr

08005b04 <_fini>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	bf00      	nop
 8005b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0a:	bc08      	pop	{r3}
 8005b0c:	469e      	mov	lr, r3
 8005b0e:	4770      	bx	lr
