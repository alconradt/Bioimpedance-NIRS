
BNIRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006918  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08006ab8  08006ab8  00016ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b94  08006b94  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  08006b94  08006b94  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b94  08006b94  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b94  08006b94  00016b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b98  08006b98  00016b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08006b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000072ec  200000f0  08006c8c  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200073dc  08006c8c  000273dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107bc  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002297  00000000  00000000  000308dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  00032b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e60  00000000  00000000  00033af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f32d  00000000  00000000  00034950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c7d1  00000000  00000000  00053c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9f7b  00000000  00000000  0006044e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011a3c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d8  00000000  00000000  0011a444  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006aa0 	.word	0x08006aa0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	08006aa0 	.word	0x08006aa0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f001 f96a 	bl	800155c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f814 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 fa30 	bl	80006f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000290:	f000 f9fc 	bl	800068c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000294:	f000 f9ca 	bl	800062c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000298:	f000 f992 	bl	80005c0 <MX_TIM6_Init>
  MX_ADC2_Init();
 800029c:	f000 f872 	bl	8000384 <MX_ADC2_Init>
  MX_ADC3_Init();
 80002a0:	f000 f8d0 	bl	8000444 <MX_ADC3_Init>
  MX_TIM3_Init();
 80002a4:	f000 f93e 	bl	8000524 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  NIRS(); //Function responsible for activating the 3 infrared leds and measuring the voltage of the photo diode
 80002a8:	f000 faa2 	bl	80007f0 <NIRS>
  Measurement0(); //Function responsible for injecting the first decade of DIBS
 80002ac:	f000 fb10 	bl	80008d0 <Measurement0>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b0:	e7fe      	b.n	80002b0 <main+0x30>
	...

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b0a6      	sub	sp, #152	; 0x98
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002be:	2228      	movs	r2, #40	; 0x28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f005 fd00 	bl	8005cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2258      	movs	r2, #88	; 0x58
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f005 fcf2 	bl	8005cc8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e4:	2302      	movs	r3, #2
 80002e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	2301      	movs	r3, #1
 80002ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ec:	2310      	movs	r3, #16
 80002ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	2302      	movs	r3, #2
 80002f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000300:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000304:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000312:	4618      	mov	r0, r3
 8000314:	f003 fa12 	bl	800373c <HAL_RCC_OscConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800031e:	f000 fe93 	bl	8001048 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000322:	230f      	movs	r3, #15
 8000324:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000326:	2302      	movs	r3, #2
 8000328:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000332:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000338:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800033c:	2102      	movs	r1, #2
 800033e:	4618      	mov	r0, r3
 8000340:	f004 f912 	bl	8004568 <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800034a:	f000 fe7d 	bl	8001048 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC12
 800034e:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <SystemClock_Config+0xcc>)
 8000350:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC34|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000352:	2300      	movs	r3, #0
 8000354:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800035a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800035c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000360:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000362:	2300      	movs	r3, #0
 8000364:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4618      	mov	r0, r3
 800036a:	f004 fb33 	bl	80049d4 <HAL_RCCEx_PeriphCLKConfig>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000374:	f000 fe68 	bl	8001048 <Error_Handler>
  }
}
 8000378:	bf00      	nop
 800037a:	3798      	adds	r7, #152	; 0x98
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	00200184 	.word	0x00200184

08000384 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800038a:	463b      	mov	r3, r7
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
 8000398:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800039a:	4b28      	ldr	r3, [pc, #160]	; (800043c <MX_ADC2_Init+0xb8>)
 800039c:	4a28      	ldr	r2, [pc, #160]	; (8000440 <MX_ADC2_Init+0xbc>)
 800039e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003a0:	4b26      	ldr	r3, [pc, #152]	; (800043c <MX_ADC2_Init+0xb8>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003a6:	4b25      	ldr	r3, [pc, #148]	; (800043c <MX_ADC2_Init+0xb8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ac:	4b23      	ldr	r3, [pc, #140]	; (800043c <MX_ADC2_Init+0xb8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003b2:	4b22      	ldr	r3, [pc, #136]	; (800043c <MX_ADC2_Init+0xb8>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003b8:	4b20      	ldr	r3, [pc, #128]	; (800043c <MX_ADC2_Init+0xb8>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <MX_ADC2_Init+0xb8>)
 80003c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <MX_ADC2_Init+0xb8>)
 80003ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003d0:	4b1a      	ldr	r3, [pc, #104]	; (800043c <MX_ADC2_Init+0xb8>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80003d6:	4b19      	ldr	r3, [pc, #100]	; (800043c <MX_ADC2_Init+0xb8>)
 80003d8:	2201      	movs	r2, #1
 80003da:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80003dc:	4b17      	ldr	r3, [pc, #92]	; (800043c <MX_ADC2_Init+0xb8>)
 80003de:	2201      	movs	r2, #1
 80003e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003e4:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_ADC2_Init+0xb8>)
 80003e6:	2204      	movs	r2, #4
 80003e8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <MX_ADC2_Init+0xb8>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <MX_ADC2_Init+0xb8>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003f6:	4811      	ldr	r0, [pc, #68]	; (800043c <MX_ADC2_Init+0xb8>)
 80003f8:	f001 f94c 	bl	8001694 <HAL_ADC_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8000402:	f000 fe21 	bl	8001048 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000406:	2303      	movs	r3, #3
 8000408:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800040a:	2301      	movs	r3, #1
 800040c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000412:	2300      	movs	r3, #0
 8000414:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000416:	2300      	movs	r3, #0
 8000418:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800041e:	463b      	mov	r3, r7
 8000420:	4619      	mov	r1, r3
 8000422:	4806      	ldr	r0, [pc, #24]	; (800043c <MX_ADC2_Init+0xb8>)
 8000424:	f001 fefc 	bl	8002220 <HAL_ADC_ConfigChannel>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 800042e:	f000 fe0b 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20001dcc 	.word	0x20001dcc
 8000440:	50000100 	.word	0x50000100

08000444 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800044a:	f107 031c 	add.w	r3, r7, #28
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]
 8000464:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8000466:	4b2d      	ldr	r3, [pc, #180]	; (800051c <MX_ADC3_Init+0xd8>)
 8000468:	4a2d      	ldr	r2, [pc, #180]	; (8000520 <MX_ADC3_Init+0xdc>)
 800046a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800046c:	4b2b      	ldr	r3, [pc, #172]	; (800051c <MX_ADC3_Init+0xd8>)
 800046e:	2200      	movs	r2, #0
 8000470:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000472:	4b2a      	ldr	r3, [pc, #168]	; (800051c <MX_ADC3_Init+0xd8>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000478:	4b28      	ldr	r3, [pc, #160]	; (800051c <MX_ADC3_Init+0xd8>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800047e:	4b27      	ldr	r3, [pc, #156]	; (800051c <MX_ADC3_Init+0xd8>)
 8000480:	2200      	movs	r2, #0
 8000482:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000484:	4b25      	ldr	r3, [pc, #148]	; (800051c <MX_ADC3_Init+0xd8>)
 8000486:	2200      	movs	r2, #0
 8000488:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800048c:	4b23      	ldr	r3, [pc, #140]	; (800051c <MX_ADC3_Init+0xd8>)
 800048e:	2200      	movs	r2, #0
 8000490:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000492:	4b22      	ldr	r3, [pc, #136]	; (800051c <MX_ADC3_Init+0xd8>)
 8000494:	2201      	movs	r2, #1
 8000496:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000498:	4b20      	ldr	r3, [pc, #128]	; (800051c <MX_ADC3_Init+0xd8>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800049e:	4b1f      	ldr	r3, [pc, #124]	; (800051c <MX_ADC3_Init+0xd8>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80004a4:	4b1d      	ldr	r3, [pc, #116]	; (800051c <MX_ADC3_Init+0xd8>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ac:	4b1b      	ldr	r3, [pc, #108]	; (800051c <MX_ADC3_Init+0xd8>)
 80004ae:	2204      	movs	r2, #4
 80004b0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80004b2:	4b1a      	ldr	r3, [pc, #104]	; (800051c <MX_ADC3_Init+0xd8>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004b8:	4b18      	ldr	r3, [pc, #96]	; (800051c <MX_ADC3_Init+0xd8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80004be:	4817      	ldr	r0, [pc, #92]	; (800051c <MX_ADC3_Init+0xd8>)
 80004c0:	f001 f8e8 	bl	8001694 <HAL_ADC_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80004ca:	f000 fdbd 	bl	8001048 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	4619      	mov	r1, r3
 80004d8:	4810      	ldr	r0, [pc, #64]	; (800051c <MX_ADC3_Init+0xd8>)
 80004da:	f002 f98d 	bl	80027f8 <HAL_ADCEx_MultiModeConfigChannel>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80004e4:	f000 fdb0 	bl	8001048 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004e8:	2301      	movs	r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ec:	2301      	movs	r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004f0:	2300      	movs	r3, #0
 80004f2:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	4619      	mov	r1, r3
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <MX_ADC3_Init+0xd8>)
 8000506:	f001 fe8b 	bl	8002220 <HAL_ADC_ConfigChannel>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000510:	f000 fd9a 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000514:	bf00      	nop
 8000516:	3728      	adds	r7, #40	; 0x28
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20003a7c 	.word	0x20003a7c
 8000520:	50000400 	.word	0x50000400

08000524 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000542:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <MX_TIM3_Init+0x94>)
 8000544:	4a1d      	ldr	r2, [pc, #116]	; (80005bc <MX_TIM3_Init+0x98>)
 8000546:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000548:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <MX_TIM3_Init+0x94>)
 800054a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800054e:	605a      	str	r2, [r3, #4]
  /* USER CODE END TIM3_Init 1 */
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <MX_TIM3_Init+0x94>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8000556:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <MX_TIM3_Init+0x94>)
 8000558:	2201      	movs	r2, #1
 800055a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <MX_TIM3_Init+0x94>)
 800055e:	2200      	movs	r2, #0
 8000560:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_TIM3_Init+0x94>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000568:	4813      	ldr	r0, [pc, #76]	; (80005b8 <MX_TIM3_Init+0x94>)
 800056a:	f004 fc51 	bl	8004e10 <HAL_TIM_Base_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000574:	f000 fd68 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800057c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800057e:	f107 0310 	add.w	r3, r7, #16
 8000582:	4619      	mov	r1, r3
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <MX_TIM3_Init+0x94>)
 8000586:	f004 fc99 	bl	8004ebc <HAL_TIM_ConfigClockSource>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000590:	f000 fd5a 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000594:	2320      	movs	r3, #32
 8000596:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	4619      	mov	r1, r3
 80005a0:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_TIM3_Init+0x94>)
 80005a2:	f004 fe7d 	bl	80052a0 <HAL_TIMEx_MasterConfigSynchronization>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80005ac:	f000 fd4c 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005b0:	bf00      	nop
 80005b2:	3720      	adds	r7, #32
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20001e1c 	.word	0x20001e1c
 80005bc:	40000400 	.word	0x40000400

080005c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_TIM6_Init+0x64>)
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <MX_TIM6_Init+0x68>)
 80005d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17999;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_TIM6_Init+0x64>)
 80005d8:	f244 624f 	movw	r2, #17999	; 0x464f
 80005dc:	605a      	str	r2, [r3, #4]
  /* USER CODE END TIM6_Init 1 */
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_TIM6_Init+0x64>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_TIM6_Init+0x64>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_TIM6_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <MX_TIM6_Init+0x64>)
 80005f2:	f004 fc0d 	bl	8004e10 <HAL_TIM_Base_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80005fc:	f000 fd24 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4619      	mov	r1, r3
 800060c:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_TIM6_Init+0x64>)
 800060e:	f004 fe47 	bl	80052a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000618:	f000 fd16 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20004470 	.word	0x20004470
 8000628:	40001000 	.word	0x40001000

0800062c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_USART3_UART_Init+0x58>)
 8000632:	4a15      	ldr	r2, [pc, #84]	; (8000688 <MX_USART3_UART_Init+0x5c>)
 8000634:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_USART3_UART_Init+0x58>)
 8000638:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800063c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_USART3_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_USART3_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_USART3_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_USART3_UART_Init+0x58>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_USART3_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USART3_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_USART3_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USART3_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_USART3_UART_Init+0x58>)
 8000670:	f004 fea2 	bl	80053b8 <HAL_UART_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800067a:	f000 fce5 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20001d4c 	.word	0x20001d4c
 8000688:	40004800 	.word	0x40004800

0800068c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_DMA_Init+0x60>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	4a15      	ldr	r2, [pc, #84]	; (80006ec <MX_DMA_Init+0x60>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6153      	str	r3, [r2, #20]
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_DMA_Init+0x60>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_DMA_Init+0x60>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <MX_DMA_Init+0x60>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_DMA_Init+0x60>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	200d      	movs	r0, #13
 80006c8:	f002 fc35 	bl	8002f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80006cc:	200d      	movs	r0, #13
 80006ce:	f002 fc4e 	bl	8002f6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	2038      	movs	r0, #56	; 0x38
 80006d8:	f002 fc2d 	bl	8002f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80006dc:	2038      	movs	r0, #56	; 0x38
 80006de:	f002 fc46 	bl	8002f6e <HAL_NVIC_EnableIRQ>

}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000706:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a2e      	ldr	r2, [pc, #184]	; (80007c4 <MX_GPIO_Init+0xd4>)
 800070c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a28      	ldr	r2, [pc, #160]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <MX_GPIO_Init+0xd4>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a22      	ldr	r2, [pc, #136]	; (80007c4 <MX_GPIO_Init+0xd4>)
 800073c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a1c      	ldr	r2, [pc, #112]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_GPIO_Init+0xd4>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2111      	movs	r1, #17
 800076a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076e:	f002 ffcd 	bl	800370c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f244 0118 	movw	r1, #16408	; 0x4018
 8000778:	4813      	ldr	r0, [pc, #76]	; (80007c8 <MX_GPIO_Init+0xd8>)
 800077a:	f002 ffc7 	bl	800370c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800077e:	2311      	movs	r3, #17
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000798:	f002 fe2e 	bl	80033f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4;
 800079c:	f244 0318 	movw	r3, #16408	; 0x4018
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_GPIO_Init+0xd8>)
 80007b6:	f002 fe1f 	bl	80033f8 <HAL_GPIO_Init>

}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	; 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	48000400 	.word	0x48000400

080007cc <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80007d4:	1d39      	adds	r1, r7, #4
 80007d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007da:	2201      	movs	r2, #1
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <__io_putchar+0x20>)
 80007de:	f004 fe39 	bl	8005454 <HAL_UART_Transmit>

  return ch;
 80007e2:	687b      	ldr	r3, [r7, #4]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20001d4c 	.word	0x20001d4c

080007f0 <NIRS>:
  this project. The loop routine is maintained by the HAL_ADC_ConvCpltCallback
  function, which is always triggered at the end of an ADC conversion by DMA.
  ******************************************************************************
  */
void NIRS(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2110      	movs	r1, #16
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f002 ff86 	bl	800370c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000800:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000804:	f000 ff10 	bl	8001628 <HAL_Delay>
	  HAL_ADC_Start(&hadc3);
 8000808:	482c      	ldr	r0, [pc, #176]	; (80008bc <NIRS+0xcc>)
 800080a:	f001 f93d 	bl	8001a88 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 800080e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000812:	482a      	ldr	r0, [pc, #168]	; (80008bc <NIRS+0xcc>)
 8000814:	f001 fa84 	bl	8001d20 <HAL_ADC_PollForConversion>
	  Led1 = HAL_ADC_GetValue(&hadc3);
 8000818:	4828      	ldr	r0, [pc, #160]	; (80008bc <NIRS+0xcc>)
 800081a:	f001 fcf3 	bl	8002204 <HAL_ADC_GetValue>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <NIRS+0xd0>)
 8000824:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc3);
 8000826:	4825      	ldr	r0, [pc, #148]	; (80008bc <NIRS+0xcc>)
 8000828:	f001 fa44 	bl	8001cb4 <HAL_ADC_Stop>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2110      	movs	r1, #16
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f002 ff6a 	bl	800370c <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2108      	movs	r1, #8
 800083c:	4821      	ldr	r0, [pc, #132]	; (80008c4 <NIRS+0xd4>)
 800083e:	f002 ff65 	bl	800370c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000842:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000846:	f000 feef 	bl	8001628 <HAL_Delay>
	  HAL_ADC_Start(&hadc3);
 800084a:	481c      	ldr	r0, [pc, #112]	; (80008bc <NIRS+0xcc>)
 800084c:	f001 f91c 	bl	8001a88 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8000850:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000854:	4819      	ldr	r0, [pc, #100]	; (80008bc <NIRS+0xcc>)
 8000856:	f001 fa63 	bl	8001d20 <HAL_ADC_PollForConversion>
	  Led2 = HAL_ADC_GetValue(&hadc3);
 800085a:	4818      	ldr	r0, [pc, #96]	; (80008bc <NIRS+0xcc>)
 800085c:	f001 fcd2 	bl	8002204 <HAL_ADC_GetValue>
 8000860:	4603      	mov	r3, r0
 8000862:	461a      	mov	r2, r3
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <NIRS+0xd8>)
 8000866:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc3);
 8000868:	4814      	ldr	r0, [pc, #80]	; (80008bc <NIRS+0xcc>)
 800086a:	f001 fa23 	bl	8001cb4 <HAL_ADC_Stop>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2108      	movs	r1, #8
 8000872:	4814      	ldr	r0, [pc, #80]	; (80008c4 <NIRS+0xd4>)
 8000874:	f002 ff4a 	bl	800370c <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2110      	movs	r1, #16
 800087c:	4811      	ldr	r0, [pc, #68]	; (80008c4 <NIRS+0xd4>)
 800087e:	f002 ff45 	bl	800370c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000882:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000886:	f000 fecf 	bl	8001628 <HAL_Delay>
	  HAL_ADC_Start(&hadc3);
 800088a:	480c      	ldr	r0, [pc, #48]	; (80008bc <NIRS+0xcc>)
 800088c:	f001 f8fc 	bl	8001a88 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8000890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <NIRS+0xcc>)
 8000896:	f001 fa43 	bl	8001d20 <HAL_ADC_PollForConversion>
	  Led3 = HAL_ADC_GetValue(&hadc3);
 800089a:	4808      	ldr	r0, [pc, #32]	; (80008bc <NIRS+0xcc>)
 800089c:	f001 fcb2 	bl	8002204 <HAL_ADC_GetValue>
 80008a0:	4603      	mov	r3, r0
 80008a2:	461a      	mov	r2, r3
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <NIRS+0xdc>)
 80008a6:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc3);
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <NIRS+0xcc>)
 80008aa:	f001 fa03 	bl	8001cb4 <HAL_ADC_Stop>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2110      	movs	r1, #16
 80008b2:	4804      	ldr	r0, [pc, #16]	; (80008c4 <NIRS+0xd4>)
 80008b4:	f002 ff2a 	bl	800370c <HAL_GPIO_WritePin>
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20003a7c 	.word	0x20003a7c
 80008c0:	20000114 	.word	0x20000114
 80008c4:	48000400 	.word	0x48000400
 80008c8:	20000118 	.word	0x20000118
 80008cc:	2000011c 	.word	0x2000011c

080008d0 <Measurement0>:

void Measurement0(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Init(&htim6);
 80008d4:	482c      	ldr	r0, [pc, #176]	; (8000988 <Measurement0+0xb8>)
 80008d6:	f004 fa9b 	bl	8004e10 <HAL_TIM_Base_Init>
	  HAL_TIM_Base_Start(&htim6);
 80008da:	482b      	ldr	r0, [pc, #172]	; (8000988 <Measurement0+0xb8>)
 80008dc:	f004 fac4 	bl	8004e68 <HAL_TIM_Base_Start>

	  hdma_tim6_up.Instance = DMA1_Channel3;
 80008e0:	4b2a      	ldr	r3, [pc, #168]	; (800098c <Measurement0+0xbc>)
 80008e2:	4a2b      	ldr	r2, [pc, #172]	; (8000990 <Measurement0+0xc0>)
 80008e4:	601a      	str	r2, [r3, #0]
	  hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008e6:	4b29      	ldr	r3, [pc, #164]	; (800098c <Measurement0+0xbc>)
 80008e8:	2210      	movs	r2, #16
 80008ea:	605a      	str	r2, [r3, #4]
	  hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ec:	4b27      	ldr	r3, [pc, #156]	; (800098c <Measurement0+0xbc>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
	  hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 80008f2:	4b26      	ldr	r3, [pc, #152]	; (800098c <Measurement0+0xbc>)
 80008f4:	2280      	movs	r2, #128	; 0x80
 80008f6:	60da      	str	r2, [r3, #12]
	  hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <Measurement0+0xbc>)
 80008fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fe:	611a      	str	r2, [r3, #16]
	  hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <Measurement0+0xbc>)
 8000902:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000906:	615a      	str	r2, [r3, #20]
	  hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 8000908:	4b20      	ldr	r3, [pc, #128]	; (800098c <Measurement0+0xbc>)
 800090a:	2220      	movs	r2, #32
 800090c:	619a      	str	r2, [r3, #24]
	  hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 800090e:	4b1f      	ldr	r3, [pc, #124]	; (800098c <Measurement0+0xbc>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_tim6_up);
 8000914:	481d      	ldr	r0, [pc, #116]	; (800098c <Measurement0+0xbc>)
 8000916:	f002 fb44 	bl	8002fa2 <HAL_DMA_Init>

	  HAL_DMA_Start(&hdma_tim6_up, (uint32_t)DIBS_sequence, (uint32_t)&GPIOA->BSRR, 32); //initialization of data transfer in the DIBS_sequence buffer to the GPIOA periphery
 800091a:	491e      	ldr	r1, [pc, #120]	; (8000994 <Measurement0+0xc4>)
 800091c:	2320      	movs	r3, #32
 800091e:	4a1e      	ldr	r2, [pc, #120]	; (8000998 <Measurement0+0xc8>)
 8000920:	481a      	ldr	r0, [pc, #104]	; (800098c <Measurement0+0xbc>)
 8000922:	f002 fb85 	bl	8003030 <HAL_DMA_Start>
	  __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <Measurement0+0xb8>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <Measurement0+0xb8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000934:	60da      	str	r2, [r3, #12]

	  HAL_TIM_Base_Start(&htim3);
 8000936:	4819      	ldr	r0, [pc, #100]	; (800099c <Measurement0+0xcc>)
 8000938:	f004 fa96 	bl	8004e68 <HAL_TIM_Base_Start>

	  hdma_adc2.Instance = DMA2_Channel1;
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <Measurement0+0xd0>)
 800093e:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <Measurement0+0xd4>)
 8000940:	601a      	str	r2, [r3, #0]
	  hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <Measurement0+0xd0>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
	  hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <Measurement0+0xd0>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
	  hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <Measurement0+0xd0>)
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	60da      	str	r2, [r3, #12]
	  hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <Measurement0+0xd0>)
 8000956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800095a:	611a      	str	r2, [r3, #16]
	  hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <Measurement0+0xd0>)
 800095e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000962:	615a      	str	r2, [r3, #20]
	  hdma_adc2.Init.Mode = DMA_NORMAL;
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <Measurement0+0xd0>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
	  hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <Measurement0+0xd0>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_adc2);
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <Measurement0+0xd0>)
 8000972:	f002 fb16 	bl	8002fa2 <HAL_DMA_Init>

	  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC_BIA0, 1200);
 8000976:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800097a:	490b      	ldr	r1, [pc, #44]	; (80009a8 <Measurement0+0xd8>)
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <Measurement0+0xdc>)
 800097e:	f001 fac9 	bl	8001f14 <HAL_ADC_Start_DMA>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20004470 	.word	0x20004470
 800098c:	20003acc 	.word	0x20003acc
 8000990:	40020030 	.word	0x40020030
 8000994:	20000000 	.word	0x20000000
 8000998:	48000018 	.word	0x48000018
 800099c:	20001e1c 	.word	0x20001e1c
 80009a0:	200060d0 	.word	0x200060d0
 80009a4:	40020408 	.word	0x40020408
 80009a8:	20003b10 	.word	0x20003b10
 80009ac:	20001dcc 	.word	0x20001dcc

080009b0 <Measurement1>:

void Measurement1(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Init(&htim6);
 80009b4:	482c      	ldr	r0, [pc, #176]	; (8000a68 <Measurement1+0xb8>)
 80009b6:	f004 fa2b 	bl	8004e10 <HAL_TIM_Base_Init>
	  HAL_TIM_Base_Start(&htim6);
 80009ba:	482b      	ldr	r0, [pc, #172]	; (8000a68 <Measurement1+0xb8>)
 80009bc:	f004 fa54 	bl	8004e68 <HAL_TIM_Base_Start>

	  hdma_tim6_up.Instance = DMA1_Channel3;
 80009c0:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <Measurement1+0xbc>)
 80009c2:	4a2b      	ldr	r2, [pc, #172]	; (8000a70 <Measurement1+0xc0>)
 80009c4:	601a      	str	r2, [r3, #0]
	  hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009c6:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <Measurement1+0xbc>)
 80009c8:	2210      	movs	r2, #16
 80009ca:	605a      	str	r2, [r3, #4]
	  hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80009cc:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <Measurement1+0xbc>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
	  hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <Measurement1+0xbc>)
 80009d4:	2280      	movs	r2, #128	; 0x80
 80009d6:	60da      	str	r2, [r3, #12]
	  hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009d8:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <Measurement1+0xbc>)
 80009da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009de:	611a      	str	r2, [r3, #16]
	  hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <Measurement1+0xbc>)
 80009e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009e6:	615a      	str	r2, [r3, #20]
	  hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 80009e8:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <Measurement1+0xbc>)
 80009ea:	2220      	movs	r2, #32
 80009ec:	619a      	str	r2, [r3, #24]
	  hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <Measurement1+0xbc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_tim6_up);
 80009f4:	481d      	ldr	r0, [pc, #116]	; (8000a6c <Measurement1+0xbc>)
 80009f6:	f002 fad4 	bl	8002fa2 <HAL_DMA_Init>

	  HAL_DMA_Start(&hdma_tim6_up, (uint32_t)DIBS_sequence, (uint32_t)&GPIOA->BSRR, 32); //initialization of data transfer in the DIBS_sequence buffer to the GPIOA periphery
 80009fa:	491e      	ldr	r1, [pc, #120]	; (8000a74 <Measurement1+0xc4>)
 80009fc:	2320      	movs	r3, #32
 80009fe:	4a1e      	ldr	r2, [pc, #120]	; (8000a78 <Measurement1+0xc8>)
 8000a00:	481a      	ldr	r0, [pc, #104]	; (8000a6c <Measurement1+0xbc>)
 8000a02:	f002 fb15 	bl	8003030 <HAL_DMA_Start>
	  __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <Measurement1+0xb8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	68da      	ldr	r2, [r3, #12]
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <Measurement1+0xb8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a14:	60da      	str	r2, [r3, #12]

	  HAL_TIM_Base_Start(&htim3);
 8000a16:	4819      	ldr	r0, [pc, #100]	; (8000a7c <Measurement1+0xcc>)
 8000a18:	f004 fa26 	bl	8004e68 <HAL_TIM_Base_Start>

	  hdma_adc2.Instance = DMA2_Channel1;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <Measurement1+0xd0>)
 8000a1e:	4a19      	ldr	r2, [pc, #100]	; (8000a84 <Measurement1+0xd4>)
 8000a20:	601a      	str	r2, [r3, #0]
	  hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <Measurement1+0xd0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
	  hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <Measurement1+0xd0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
	  hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <Measurement1+0xd0>)
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	60da      	str	r2, [r3, #12]
	  hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <Measurement1+0xd0>)
 8000a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a3a:	611a      	str	r2, [r3, #16]
	  hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <Measurement1+0xd0>)
 8000a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a42:	615a      	str	r2, [r3, #20]
	  hdma_adc2.Init.Mode = DMA_NORMAL;
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <Measurement1+0xd0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
	  hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <Measurement1+0xd0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_adc2);
 8000a50:	480b      	ldr	r0, [pc, #44]	; (8000a80 <Measurement1+0xd0>)
 8000a52:	f002 faa6 	bl	8002fa2 <HAL_DMA_Init>

	  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC_BIA1, 1200);
 8000a56:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000a5a:	490b      	ldr	r1, [pc, #44]	; (8000a88 <Measurement1+0xd8>)
 8000a5c:	480b      	ldr	r0, [pc, #44]	; (8000a8c <Measurement1+0xdc>)
 8000a5e:	f001 fa59 	bl	8001f14 <HAL_ADC_Start_DMA>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20004470 	.word	0x20004470
 8000a6c:	20003acc 	.word	0x20003acc
 8000a70:	40020030 	.word	0x40020030
 8000a74:	20000000 	.word	0x20000000
 8000a78:	48000018 	.word	0x48000018
 8000a7c:	20001e1c 	.word	0x20001e1c
 8000a80:	200060d0 	.word	0x200060d0
 8000a84:	40020408 	.word	0x40020408
 8000a88:	200044b0 	.word	0x200044b0
 8000a8c:	20001dcc 	.word	0x20001dcc

08000a90 <Measurement2>:

void Measurement2(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Init(&htim6);
 8000a94:	482c      	ldr	r0, [pc, #176]	; (8000b48 <Measurement2+0xb8>)
 8000a96:	f004 f9bb 	bl	8004e10 <HAL_TIM_Base_Init>
	  HAL_TIM_Base_Start(&htim6);
 8000a9a:	482b      	ldr	r0, [pc, #172]	; (8000b48 <Measurement2+0xb8>)
 8000a9c:	f004 f9e4 	bl	8004e68 <HAL_TIM_Base_Start>

	  hdma_tim6_up.Instance = DMA1_Channel3;
 8000aa0:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <Measurement2+0xbc>)
 8000aa2:	4a2b      	ldr	r2, [pc, #172]	; (8000b50 <Measurement2+0xc0>)
 8000aa4:	601a      	str	r2, [r3, #0]
	  hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aa6:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <Measurement2+0xbc>)
 8000aa8:	2210      	movs	r2, #16
 8000aaa:	605a      	str	r2, [r3, #4]
	  hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aac:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <Measurement2+0xbc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
	  hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8000ab2:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <Measurement2+0xbc>)
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	60da      	str	r2, [r3, #12]
	  hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ab8:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <Measurement2+0xbc>)
 8000aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000abe:	611a      	str	r2, [r3, #16]
	  hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ac0:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <Measurement2+0xbc>)
 8000ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ac6:	615a      	str	r2, [r3, #20]
	  hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 8000ac8:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <Measurement2+0xbc>)
 8000aca:	2220      	movs	r2, #32
 8000acc:	619a      	str	r2, [r3, #24]
	  hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <Measurement2+0xbc>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_tim6_up);
 8000ad4:	481d      	ldr	r0, [pc, #116]	; (8000b4c <Measurement2+0xbc>)
 8000ad6:	f002 fa64 	bl	8002fa2 <HAL_DMA_Init>

	  HAL_DMA_Start(&hdma_tim6_up, (uint32_t)DIBS_sequence, (uint32_t)&GPIOA->BSRR, 32); //initialization of data transfer in the DIBS_sequence buffer to the GPIOA periphery
 8000ada:	491e      	ldr	r1, [pc, #120]	; (8000b54 <Measurement2+0xc4>)
 8000adc:	2320      	movs	r3, #32
 8000ade:	4a1e      	ldr	r2, [pc, #120]	; (8000b58 <Measurement2+0xc8>)
 8000ae0:	481a      	ldr	r0, [pc, #104]	; (8000b4c <Measurement2+0xbc>)
 8000ae2:	f002 faa5 	bl	8003030 <HAL_DMA_Start>
	  __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <Measurement2+0xb8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68da      	ldr	r2, [r3, #12]
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <Measurement2+0xb8>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000af4:	60da      	str	r2, [r3, #12]

	  HAL_TIM_Base_Start(&htim3);
 8000af6:	4819      	ldr	r0, [pc, #100]	; (8000b5c <Measurement2+0xcc>)
 8000af8:	f004 f9b6 	bl	8004e68 <HAL_TIM_Base_Start>

	  hdma_adc2.Instance = DMA2_Channel1;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <Measurement2+0xd0>)
 8000afe:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <Measurement2+0xd4>)
 8000b00:	601a      	str	r2, [r3, #0]
	  hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <Measurement2+0xd0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
	  hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <Measurement2+0xd0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
	  hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <Measurement2+0xd0>)
 8000b10:	2280      	movs	r2, #128	; 0x80
 8000b12:	60da      	str	r2, [r3, #12]
	  hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <Measurement2+0xd0>)
 8000b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b1a:	611a      	str	r2, [r3, #16]
	  hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <Measurement2+0xd0>)
 8000b1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b22:	615a      	str	r2, [r3, #20]
	  hdma_adc2.Init.Mode = DMA_NORMAL;
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <Measurement2+0xd0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]
	  hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <Measurement2+0xd0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_adc2);
 8000b30:	480b      	ldr	r0, [pc, #44]	; (8000b60 <Measurement2+0xd0>)
 8000b32:	f002 fa36 	bl	8002fa2 <HAL_DMA_Init>

	  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC_BIA2, 1200);
 8000b36:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000b3a:	490b      	ldr	r1, [pc, #44]	; (8000b68 <Measurement2+0xd8>)
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <Measurement2+0xdc>)
 8000b3e:	f001 f9e9 	bl	8001f14 <HAL_ADC_Start_DMA>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20004470 	.word	0x20004470
 8000b4c:	20003acc 	.word	0x20003acc
 8000b50:	40020030 	.word	0x40020030
 8000b54:	20000000 	.word	0x20000000
 8000b58:	48000018 	.word	0x48000018
 8000b5c:	20001e1c 	.word	0x20001e1c
 8000b60:	200060d0 	.word	0x200060d0
 8000b64:	40020408 	.word	0x40020408
 8000b68:	2000311c 	.word	0x2000311c
 8000b6c:	20001dcc 	.word	0x20001dcc

08000b70 <Measurement3>:

void Measurement3(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Init(&htim6);
 8000b74:	482c      	ldr	r0, [pc, #176]	; (8000c28 <Measurement3+0xb8>)
 8000b76:	f004 f94b 	bl	8004e10 <HAL_TIM_Base_Init>
	  HAL_TIM_Base_Start(&htim6);
 8000b7a:	482b      	ldr	r0, [pc, #172]	; (8000c28 <Measurement3+0xb8>)
 8000b7c:	f004 f974 	bl	8004e68 <HAL_TIM_Base_Start>

	  hdma_tim6_up.Instance = DMA1_Channel3;
 8000b80:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <Measurement3+0xbc>)
 8000b82:	4a2b      	ldr	r2, [pc, #172]	; (8000c30 <Measurement3+0xc0>)
 8000b84:	601a      	str	r2, [r3, #0]
	  hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b86:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <Measurement3+0xbc>)
 8000b88:	2210      	movs	r2, #16
 8000b8a:	605a      	str	r2, [r3, #4]
	  hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8c:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <Measurement3+0xbc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
	  hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8000b92:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <Measurement3+0xbc>)
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	60da      	str	r2, [r3, #12]
	  hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b98:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <Measurement3+0xbc>)
 8000b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9e:	611a      	str	r2, [r3, #16]
	  hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <Measurement3+0xbc>)
 8000ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ba6:	615a      	str	r2, [r3, #20]
	  hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 8000ba8:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <Measurement3+0xbc>)
 8000baa:	2220      	movs	r2, #32
 8000bac:	619a      	str	r2, [r3, #24]
	  hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 8000bae:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <Measurement3+0xbc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_tim6_up);
 8000bb4:	481d      	ldr	r0, [pc, #116]	; (8000c2c <Measurement3+0xbc>)
 8000bb6:	f002 f9f4 	bl	8002fa2 <HAL_DMA_Init>

	  HAL_DMA_Start(&hdma_tim6_up, (uint32_t)DIBS_sequence, (uint32_t)&GPIOA->BSRR, 32); //initialization of data transfer in the DIBS_sequence buffer to the GPIOA periphery
 8000bba:	491e      	ldr	r1, [pc, #120]	; (8000c34 <Measurement3+0xc4>)
 8000bbc:	2320      	movs	r3, #32
 8000bbe:	4a1e      	ldr	r2, [pc, #120]	; (8000c38 <Measurement3+0xc8>)
 8000bc0:	481a      	ldr	r0, [pc, #104]	; (8000c2c <Measurement3+0xbc>)
 8000bc2:	f002 fa35 	bl	8003030 <HAL_DMA_Start>
	  __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <Measurement3+0xb8>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	68da      	ldr	r2, [r3, #12]
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <Measurement3+0xb8>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bd4:	60da      	str	r2, [r3, #12]

	  HAL_TIM_Base_Start(&htim3);
 8000bd6:	4819      	ldr	r0, [pc, #100]	; (8000c3c <Measurement3+0xcc>)
 8000bd8:	f004 f946 	bl	8004e68 <HAL_TIM_Base_Start>

	  hdma_adc2.Instance = DMA2_Channel1;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <Measurement3+0xd0>)
 8000bde:	4a19      	ldr	r2, [pc, #100]	; (8000c44 <Measurement3+0xd4>)
 8000be0:	601a      	str	r2, [r3, #0]
	  hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <Measurement3+0xd0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
	  hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <Measurement3+0xd0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
	  hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <Measurement3+0xd0>)
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	60da      	str	r2, [r3, #12]
	  hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <Measurement3+0xd0>)
 8000bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bfa:	611a      	str	r2, [r3, #16]
	  hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <Measurement3+0xd0>)
 8000bfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c02:	615a      	str	r2, [r3, #20]
	  hdma_adc2.Init.Mode = DMA_NORMAL;
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <Measurement3+0xd0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
	  hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <Measurement3+0xd0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
	  HAL_DMA_Init(&hdma_adc2);
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <Measurement3+0xd0>)
 8000c12:	f002 f9c6 	bl	8002fa2 <HAL_DMA_Init>

	  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC_BIA3, 1200);
 8000c16:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000c1a:	490b      	ldr	r1, [pc, #44]	; (8000c48 <Measurement3+0xd8>)
 8000c1c:	480b      	ldr	r0, [pc, #44]	; (8000c4c <Measurement3+0xdc>)
 8000c1e:	f001 f979 	bl	8001f14 <HAL_ADC_Start_DMA>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20004470 	.word	0x20004470
 8000c2c:	20003acc 	.word	0x20003acc
 8000c30:	40020030 	.word	0x40020030
 8000c34:	20000000 	.word	0x20000000
 8000c38:	48000018 	.word	0x48000018
 8000c3c:	20001e1c 	.word	0x20001e1c
 8000c40:	200060d0 	.word	0x200060d0
 8000c44:	40020408 	.word	0x40020408
 8000c48:	2000012c 	.word	0x2000012c
 8000c4c:	20001dcc 	.word	0x20001dcc

08000c50 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b092      	sub	sp, #72	; 0x48
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc2);
 8000c58:	4898      	ldr	r0, [pc, #608]	; (8000ebc <HAL_ADC_ConvCpltCallback+0x26c>)
 8000c5a:	f001 fa77 	bl	800214c <HAL_ADC_Stop_DMA>
	HAL_DMA_Abort(&hdma_tim6_up);
 8000c5e:	4898      	ldr	r0, [pc, #608]	; (8000ec0 <HAL_ADC_ConvCpltCallback+0x270>)
 8000c60:	f002 fa87 	bl	8003172 <HAL_DMA_Abort>

	if(Decade == 0)
 8000c64:	4b97      	ldr	r3, [pc, #604]	; (8000ec4 <HAL_ADC_ConvCpltCallback+0x274>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d166      	bne.n	8000d3a <HAL_ADC_ConvCpltCallback+0xea>
	{
		htim3.Init.Prescaler = 999;
 8000c6c:	4b96      	ldr	r3, [pc, #600]	; (8000ec8 <HAL_ADC_ConvCpltCallback+0x278>)
 8000c6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c72:	605a      	str	r2, [r3, #4]
		htim6.Init.Prescaler = 17999;
 8000c74:	4b95      	ldr	r3, [pc, #596]	; (8000ecc <HAL_ADC_ConvCpltCallback+0x27c>)
 8000c76:	f244 624f 	movw	r2, #17999	; 0x464f
 8000c7a:	605a      	str	r2, [r3, #4]

		for(int i = 0;i < 1200;i++)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8000c80:	e00f      	b.n	8000ca2 <HAL_ADC_ConvCpltCallback+0x52>
		{
			DECADA0[i] = DECADA0[i] + ADC_BIA0[i];
 8000c82:	4a93      	ldr	r2, [pc, #588]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0x280>)
 8000c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8a:	4992      	ldr	r1, [pc, #584]	; (8000ed4 <HAL_ADC_ConvCpltCallback+0x284>)
 8000c8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c8e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000c92:	441a      	add	r2, r3
 8000c94:	498e      	ldr	r1, [pc, #568]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0x280>)
 8000c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0;i < 1200;i++)
 8000c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8000ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ca4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000ca8:	dbeb      	blt.n	8000c82 <HAL_ADC_ConvCpltCallback+0x32>
		}
		for(int i = 0;i < 1200;i++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	643b      	str	r3, [r7, #64]	; 0x40
 8000cae:	e007      	b.n	8000cc0 <HAL_ADC_ConvCpltCallback+0x70>
		{
			ADC_BIA0[i] = 0;
 8000cb0:	4a88      	ldr	r2, [pc, #544]	; (8000ed4 <HAL_ADC_ConvCpltCallback+0x284>)
 8000cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0;i < 1200;i++)
 8000cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	643b      	str	r3, [r7, #64]	; 0x40
 8000cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cc2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000cc6:	dbf3      	blt.n	8000cb0 <HAL_ADC_ConvCpltCallback+0x60>
		}
		if(Measures < 100)
 8000cc8:	4b83      	ldr	r3, [pc, #524]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x288>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b63      	cmp	r3, #99	; 0x63
 8000cce:	dc07      	bgt.n	8000ce0 <HAL_ADC_ConvCpltCallback+0x90>
		{
			Measures ++;
 8000cd0:	4b81      	ldr	r3, [pc, #516]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x288>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	4a80      	ldr	r2, [pc, #512]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x288>)
 8000cd8:	6013      	str	r3, [r2, #0]
			Measurement0();
 8000cda:	f7ff fdf9 	bl	80008d0 <Measurement0>
 8000cde:	e02c      	b.n	8000d3a <HAL_ADC_ConvCpltCallback+0xea>
		}
		else
		{
			for(int i = 0;i < 1200;i++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ce4:	e00e      	b.n	8000d04 <HAL_ADC_ConvCpltCallback+0xb4>
			{
				DECADA0[i] = DECADA0[i]/100;
 8000ce6:	4a7a      	ldr	r2, [pc, #488]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0x280>)
 8000ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cee:	4a7b      	ldr	r2, [pc, #492]	; (8000edc <HAL_ADC_ConvCpltCallback+0x28c>)
 8000cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf4:	095a      	lsrs	r2, r3, #5
 8000cf6:	4976      	ldr	r1, [pc, #472]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0x280>)
 8000cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0;i < 1200;i++)
 8000cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d00:	3301      	adds	r3, #1
 8000d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d06:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000d0a:	dbec      	blt.n	8000ce6 <HAL_ADC_ConvCpltCallback+0x96>
			}
			for(int i = 0;i < 1200;i++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d10:	e00a      	b.n	8000d28 <HAL_ADC_ConvCpltCallback+0xd8>
			{
				printf("%li\n",DECADA0[i]);
 8000d12:	4a6f      	ldr	r2, [pc, #444]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0x280>)
 8000d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4870      	ldr	r0, [pc, #448]	; (8000ee0 <HAL_ADC_ConvCpltCallback+0x290>)
 8000d1e:	f004 ffdb 	bl	8005cd8 <iprintf>
			for(int i = 0;i < 1200;i++)
 8000d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d24:	3301      	adds	r3, #1
 8000d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d2a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000d2e:	dbf0      	blt.n	8000d12 <HAL_ADC_ConvCpltCallback+0xc2>
			}
			Decade ++;
 8000d30:	4b64      	ldr	r3, [pc, #400]	; (8000ec4 <HAL_ADC_ConvCpltCallback+0x274>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	4a63      	ldr	r2, [pc, #396]	; (8000ec4 <HAL_ADC_ConvCpltCallback+0x274>)
 8000d38:	6013      	str	r3, [r2, #0]
		}
	}
	if(Decade == 1)
 8000d3a:	4b62      	ldr	r3, [pc, #392]	; (8000ec4 <HAL_ADC_ConvCpltCallback+0x274>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d165      	bne.n	8000e0e <HAL_ADC_ConvCpltCallback+0x1be>
	{
		htim3.Init.Prescaler = 99;
 8000d42:	4b61      	ldr	r3, [pc, #388]	; (8000ec8 <HAL_ADC_ConvCpltCallback+0x278>)
 8000d44:	2263      	movs	r2, #99	; 0x63
 8000d46:	605a      	str	r2, [r3, #4]
		htim6.Init.Prescaler = 1799;
 8000d48:	4b60      	ldr	r3, [pc, #384]	; (8000ecc <HAL_ADC_ConvCpltCallback+0x27c>)
 8000d4a:	f240 7207 	movw	r2, #1799	; 0x707
 8000d4e:	605a      	str	r2, [r3, #4]

		for(int i = 0;i < 1200;i++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34
 8000d54:	e00f      	b.n	8000d76 <HAL_ADC_ConvCpltCallback+0x126>
		{
			DECADA1[i] = DECADA1[i] + ADC_BIA1[i];
 8000d56:	4a63      	ldr	r2, [pc, #396]	; (8000ee4 <HAL_ADC_ConvCpltCallback+0x294>)
 8000d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5e:	4962      	ldr	r1, [pc, #392]	; (8000ee8 <HAL_ADC_ConvCpltCallback+0x298>)
 8000d60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d62:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000d66:	441a      	add	r2, r3
 8000d68:	495e      	ldr	r1, [pc, #376]	; (8000ee4 <HAL_ADC_ConvCpltCallback+0x294>)
 8000d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0;i < 1200;i++)
 8000d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d72:	3301      	adds	r3, #1
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
 8000d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d78:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000d7c:	dbeb      	blt.n	8000d56 <HAL_ADC_ConvCpltCallback+0x106>
		}
		for(int i = 0;i < 1200;i++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
 8000d82:	e007      	b.n	8000d94 <HAL_ADC_ConvCpltCallback+0x144>
		{
			ADC_BIA1[i] = 0;
 8000d84:	4a58      	ldr	r2, [pc, #352]	; (8000ee8 <HAL_ADC_ConvCpltCallback+0x298>)
 8000d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0;i < 1200;i++)
 8000d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d90:	3301      	adds	r3, #1
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
 8000d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d96:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000d9a:	dbf3      	blt.n	8000d84 <HAL_ADC_ConvCpltCallback+0x134>
		}
		if(Measures < 200)
 8000d9c:	4b4e      	ldr	r3, [pc, #312]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x288>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2bc7      	cmp	r3, #199	; 0xc7
 8000da2:	dc07      	bgt.n	8000db4 <HAL_ADC_ConvCpltCallback+0x164>
		{
			Measures ++;
 8000da4:	4b4c      	ldr	r3, [pc, #304]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x288>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a4b      	ldr	r2, [pc, #300]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x288>)
 8000dac:	6013      	str	r3, [r2, #0]
			Measurement1();
 8000dae:	f7ff fdff 	bl	80009b0 <Measurement1>
 8000db2:	e02c      	b.n	8000e0e <HAL_ADC_ConvCpltCallback+0x1be>
		}
		else
		{
			for(int i = 0;i < 1200;i++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000db8:	e00e      	b.n	8000dd8 <HAL_ADC_ConvCpltCallback+0x188>
			{
				DECADA1[i] = DECADA1[i]/100;
 8000dba:	4a4a      	ldr	r2, [pc, #296]	; (8000ee4 <HAL_ADC_ConvCpltCallback+0x294>)
 8000dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc2:	4a46      	ldr	r2, [pc, #280]	; (8000edc <HAL_ADC_ConvCpltCallback+0x28c>)
 8000dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc8:	095a      	lsrs	r2, r3, #5
 8000dca:	4946      	ldr	r1, [pc, #280]	; (8000ee4 <HAL_ADC_ConvCpltCallback+0x294>)
 8000dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0;i < 1200;i++)
 8000dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dda:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000dde:	dbec      	blt.n	8000dba <HAL_ADC_ConvCpltCallback+0x16a>
			}
			for(int i = 0;i < 1200;i++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000de4:	e00a      	b.n	8000dfc <HAL_ADC_ConvCpltCallback+0x1ac>
			{
				printf("%li\n",DECADA1[i]);
 8000de6:	4a3f      	ldr	r2, [pc, #252]	; (8000ee4 <HAL_ADC_ConvCpltCallback+0x294>)
 8000de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dee:	4619      	mov	r1, r3
 8000df0:	483b      	ldr	r0, [pc, #236]	; (8000ee0 <HAL_ADC_ConvCpltCallback+0x290>)
 8000df2:	f004 ff71 	bl	8005cd8 <iprintf>
			for(int i = 0;i < 1200;i++)
 8000df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df8:	3301      	adds	r3, #1
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfe:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000e02:	dbf0      	blt.n	8000de6 <HAL_ADC_ConvCpltCallback+0x196>
			}
			Decade ++;
 8000e04:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <HAL_ADC_ConvCpltCallback+0x274>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	4a2e      	ldr	r2, [pc, #184]	; (8000ec4 <HAL_ADC_ConvCpltCallback+0x274>)
 8000e0c:	6013      	str	r3, [r2, #0]
		}
	}
	if(Decade == 2)
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <HAL_ADC_ConvCpltCallback+0x274>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	f040 8082 	bne.w	8000f1c <HAL_ADC_ConvCpltCallback+0x2cc>
	{
		htim3.Init.Prescaler = 9;
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <HAL_ADC_ConvCpltCallback+0x278>)
 8000e1a:	2209      	movs	r2, #9
 8000e1c:	605a      	str	r2, [r3, #4]
		htim6.Init.Prescaler = 179;
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <HAL_ADC_ConvCpltCallback+0x27c>)
 8000e20:	22b3      	movs	r2, #179	; 0xb3
 8000e22:	605a      	str	r2, [r3, #4]

		for(int i = 0;i < 1200;i++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
 8000e28:	e00f      	b.n	8000e4a <HAL_ADC_ConvCpltCallback+0x1fa>
		{
			DECADA2[i] = DECADA2[i] + ADC_BIA2[i];
 8000e2a:	4a30      	ldr	r2, [pc, #192]	; (8000eec <HAL_ADC_ConvCpltCallback+0x29c>)
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e32:	492f      	ldr	r1, [pc, #188]	; (8000ef0 <HAL_ADC_ConvCpltCallback+0x2a0>)
 8000e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e36:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000e3a:	441a      	add	r2, r3
 8000e3c:	492b      	ldr	r1, [pc, #172]	; (8000eec <HAL_ADC_ConvCpltCallback+0x29c>)
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0;i < 1200;i++)
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	3301      	adds	r3, #1
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000e50:	dbeb      	blt.n	8000e2a <HAL_ADC_ConvCpltCallback+0x1da>
		}
		for(int i = 0;i < 1200;i++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
 8000e56:	e007      	b.n	8000e68 <HAL_ADC_ConvCpltCallback+0x218>
		{
			ADC_BIA2[i] = 0;
 8000e58:	4a25      	ldr	r2, [pc, #148]	; (8000ef0 <HAL_ADC_ConvCpltCallback+0x2a0>)
 8000e5a:	6a3b      	ldr	r3, [r7, #32]
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0;i < 1200;i++)
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	3301      	adds	r3, #1
 8000e66:	623b      	str	r3, [r7, #32]
 8000e68:	6a3b      	ldr	r3, [r7, #32]
 8000e6a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000e6e:	dbf3      	blt.n	8000e58 <HAL_ADC_ConvCpltCallback+0x208>
		}
		if(Measures < 300)
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x288>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000e78:	da07      	bge.n	8000e8a <HAL_ADC_ConvCpltCallback+0x23a>
		{
			Measures ++;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x288>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	4a15      	ldr	r2, [pc, #84]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x288>)
 8000e82:	6013      	str	r3, [r2, #0]
			Measurement2();
 8000e84:	f7ff fe04 	bl	8000a90 <Measurement2>
 8000e88:	e048      	b.n	8000f1c <HAL_ADC_ConvCpltCallback+0x2cc>
		}
		else
		{
			for(int i = 0;i < 1200;i++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
 8000e8e:	e00e      	b.n	8000eae <HAL_ADC_ConvCpltCallback+0x25e>
			{
				DECADA2[i] = DECADA2[i]/100;
 8000e90:	4a16      	ldr	r2, [pc, #88]	; (8000eec <HAL_ADC_ConvCpltCallback+0x29c>)
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e98:	4a10      	ldr	r2, [pc, #64]	; (8000edc <HAL_ADC_ConvCpltCallback+0x28c>)
 8000e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9e:	095a      	lsrs	r2, r3, #5
 8000ea0:	4912      	ldr	r1, [pc, #72]	; (8000eec <HAL_ADC_ConvCpltCallback+0x29c>)
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0;i < 1200;i++)
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000eb4:	dbec      	blt.n	8000e90 <HAL_ADC_ConvCpltCallback+0x240>
			}
			for(int i = 0;i < 1200;i++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	e026      	b.n	8000f0a <HAL_ADC_ConvCpltCallback+0x2ba>
 8000ebc:	20001dcc 	.word	0x20001dcc
 8000ec0:	20003acc 	.word	0x20003acc
 8000ec4:	20000110 	.word	0x20000110
 8000ec8:	20001e1c 	.word	0x20001e1c
 8000ecc:	20004470 	.word	0x20004470
 8000ed0:	20006114 	.word	0x20006114
 8000ed4:	20003b10 	.word	0x20003b10
 8000ed8:	2000010c 	.word	0x2000010c
 8000edc:	51eb851f 	.word	0x51eb851f
 8000ee0:	08006ab8 	.word	0x08006ab8
 8000ee4:	20001e5c 	.word	0x20001e5c
 8000ee8:	200044b0 	.word	0x200044b0
 8000eec:	20000a8c 	.word	0x20000a8c
 8000ef0:	2000311c 	.word	0x2000311c
			{
				printf("%li\n",DECADA2[i]);
 8000ef4:	4a47      	ldr	r2, [pc, #284]	; (8001014 <HAL_ADC_ConvCpltCallback+0x3c4>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4846      	ldr	r0, [pc, #280]	; (8001018 <HAL_ADC_ConvCpltCallback+0x3c8>)
 8000f00:	f004 feea 	bl	8005cd8 <iprintf>
			for(int i = 0;i < 1200;i++)
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	3301      	adds	r3, #1
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000f10:	dbf0      	blt.n	8000ef4 <HAL_ADC_ConvCpltCallback+0x2a4>
			}
			Decade ++;
 8000f12:	4b42      	ldr	r3, [pc, #264]	; (800101c <HAL_ADC_ConvCpltCallback+0x3cc>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a40      	ldr	r2, [pc, #256]	; (800101c <HAL_ADC_ConvCpltCallback+0x3cc>)
 8000f1a:	6013      	str	r3, [r2, #0]
		}
	}
	if(Decade == 3)
 8000f1c:	4b3f      	ldr	r3, [pc, #252]	; (800101c <HAL_ADC_ConvCpltCallback+0x3cc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d172      	bne.n	800100a <HAL_ADC_ConvCpltCallback+0x3ba>
	{
		htim3.Init.Prescaler = 0;
 8000f24:	4b3e      	ldr	r3, [pc, #248]	; (8001020 <HAL_ADC_ConvCpltCallback+0x3d0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	605a      	str	r2, [r3, #4]
		htim6.Init.Prescaler = 17;
 8000f2a:	4b3e      	ldr	r3, [pc, #248]	; (8001024 <HAL_ADC_ConvCpltCallback+0x3d4>)
 8000f2c:	2211      	movs	r2, #17
 8000f2e:	605a      	str	r2, [r3, #4]

		for(int i = 0;i < 1200;i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	e00f      	b.n	8000f56 <HAL_ADC_ConvCpltCallback+0x306>
		{
			DECADA3[i] = DECADA3[i] + ADC_BIA3[i];
 8000f36:	4a3c      	ldr	r2, [pc, #240]	; (8001028 <HAL_ADC_ConvCpltCallback+0x3d8>)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3e:	493b      	ldr	r1, [pc, #236]	; (800102c <HAL_ADC_ConvCpltCallback+0x3dc>)
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f46:	441a      	add	r2, r3
 8000f48:	4937      	ldr	r1, [pc, #220]	; (8001028 <HAL_ADC_ConvCpltCallback+0x3d8>)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0;i < 1200;i++)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000f5c:	dbeb      	blt.n	8000f36 <HAL_ADC_ConvCpltCallback+0x2e6>
		}
		for(int i = 0;i < 1200;i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	e007      	b.n	8000f74 <HAL_ADC_ConvCpltCallback+0x324>
		{
			ADC_BIA3[i] = 0;
 8000f64:	4a31      	ldr	r2, [pc, #196]	; (800102c <HAL_ADC_ConvCpltCallback+0x3dc>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	2100      	movs	r1, #0
 8000f6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0;i < 1200;i++)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	3301      	adds	r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000f7a:	dbf3      	blt.n	8000f64 <HAL_ADC_ConvCpltCallback+0x314>
		}
		if(Measures < 400)
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <HAL_ADC_ConvCpltCallback+0x3e0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000f84:	da07      	bge.n	8000f96 <HAL_ADC_ConvCpltCallback+0x346>
		{
			Measures ++;
 8000f86:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <HAL_ADC_ConvCpltCallback+0x3e0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	4a28      	ldr	r2, [pc, #160]	; (8001030 <HAL_ADC_ConvCpltCallback+0x3e0>)
 8000f8e:	6013      	str	r3, [r2, #0]
			Measurement3();
 8000f90:	f7ff fdee 	bl	8000b70 <Measurement3>
			printf("%i\n",Led1);
			printf("%i\n",Led2);
			printf("%i\n",Led3);
		}
	}
}
 8000f94:	e039      	b.n	800100a <HAL_ADC_ConvCpltCallback+0x3ba>
			for(int i = 0;i < 1200;i++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	e00e      	b.n	8000fba <HAL_ADC_ConvCpltCallback+0x36a>
				DECADA3[i] = DECADA3[i]/100;
 8000f9c:	4a22      	ldr	r2, [pc, #136]	; (8001028 <HAL_ADC_ConvCpltCallback+0x3d8>)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa4:	4a23      	ldr	r2, [pc, #140]	; (8001034 <HAL_ADC_ConvCpltCallback+0x3e4>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	095a      	lsrs	r2, r3, #5
 8000fac:	491e      	ldr	r1, [pc, #120]	; (8001028 <HAL_ADC_ConvCpltCallback+0x3d8>)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0;i < 1200;i++)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000fc0:	dbec      	blt.n	8000f9c <HAL_ADC_ConvCpltCallback+0x34c>
			for(int i = 0;i < 1200;i++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	e00a      	b.n	8000fde <HAL_ADC_ConvCpltCallback+0x38e>
				printf("%li\n",DECADA3[i]);
 8000fc8:	4a17      	ldr	r2, [pc, #92]	; (8001028 <HAL_ADC_ConvCpltCallback+0x3d8>)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4811      	ldr	r0, [pc, #68]	; (8001018 <HAL_ADC_ConvCpltCallback+0x3c8>)
 8000fd4:	f004 fe80 	bl	8005cd8 <iprintf>
			for(int i = 0;i < 1200;i++)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000fe4:	dbf0      	blt.n	8000fc8 <HAL_ADC_ConvCpltCallback+0x378>
			printf("%i\n",Led1);
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_ADC_ConvCpltCallback+0x3e8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	4813      	ldr	r0, [pc, #76]	; (800103c <HAL_ADC_ConvCpltCallback+0x3ec>)
 8000fee:	f004 fe73 	bl	8005cd8 <iprintf>
			printf("%i\n",Led2);
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_ADC_ConvCpltCallback+0x3f0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4810      	ldr	r0, [pc, #64]	; (800103c <HAL_ADC_ConvCpltCallback+0x3ec>)
 8000ffa:	f004 fe6d 	bl	8005cd8 <iprintf>
			printf("%i\n",Led3);
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_ADC_ConvCpltCallback+0x3f4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <HAL_ADC_ConvCpltCallback+0x3ec>)
 8001006:	f004 fe67 	bl	8005cd8 <iprintf>
}
 800100a:	bf00      	nop
 800100c:	3748      	adds	r7, #72	; 0x48
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000a8c 	.word	0x20000a8c
 8001018:	08006ab8 	.word	0x08006ab8
 800101c:	20000110 	.word	0x20000110
 8001020:	20001e1c 	.word	0x20001e1c
 8001024:	20004470 	.word	0x20004470
 8001028:	20004e10 	.word	0x20004e10
 800102c:	2000012c 	.word	0x2000012c
 8001030:	2000010c 	.word	0x2000010c
 8001034:	51eb851f 	.word	0x51eb851f
 8001038:	20000114 	.word	0x20000114
 800103c:	08006ac0 	.word	0x08006ac0
 8001040:	20000118 	.word	0x20000118
 8001044:	2000011c 	.word	0x2000011c

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_MspInit+0x44>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_MspInit+0x44>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6193      	str	r3, [r2, #24]
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_MspInit+0x44>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_MspInit+0x44>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <HAL_MspInit+0x44>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	61d3      	str	r3, [r2, #28]
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_MspInit+0x44>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000

080010a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a3e      	ldr	r2, [pc, #248]	; (80011b8 <HAL_ADC_MspInit+0x118>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d14d      	bne.n	800115e <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010c2:	4b3e      	ldr	r3, [pc, #248]	; (80011bc <HAL_ADC_MspInit+0x11c>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4a3d      	ldr	r2, [pc, #244]	; (80011bc <HAL_ADC_MspInit+0x11c>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	6153      	str	r3, [r2, #20]
 80010ce:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <HAL_ADC_MspInit+0x11c>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	61bb      	str	r3, [r7, #24]
 80010d8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	4b38      	ldr	r3, [pc, #224]	; (80011bc <HAL_ADC_MspInit+0x11c>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4a37      	ldr	r2, [pc, #220]	; (80011bc <HAL_ADC_MspInit+0x11c>)
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	6153      	str	r3, [r2, #20]
 80010e6:	4b35      	ldr	r3, [pc, #212]	; (80011bc <HAL_ADC_MspInit+0x11c>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration    
    PA6     ------> ADC2_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010f2:	2340      	movs	r3, #64	; 0x40
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	2303      	movs	r3, #3
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f002 f976 	bl	80033f8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 800110c:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <HAL_ADC_MspInit+0x120>)
 800110e:	4a2d      	ldr	r2, [pc, #180]	; (80011c4 <HAL_ADC_MspInit+0x124>)
 8001110:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_ADC_MspInit+0x120>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001118:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <HAL_ADC_MspInit+0x120>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <HAL_ADC_MspInit+0x120>)
 8001120:	2280      	movs	r2, #128	; 0x80
 8001122:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001124:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <HAL_ADC_MspInit+0x120>)
 8001126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <HAL_ADC_MspInit+0x120>)
 800112e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001132:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <HAL_ADC_MspInit+0x120>)
 8001136:	2220      	movs	r2, #32
 8001138:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <HAL_ADC_MspInit+0x120>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001140:	481f      	ldr	r0, [pc, #124]	; (80011c0 <HAL_ADC_MspInit+0x120>)
 8001142:	f001 ff2e 	bl	8002fa2 <HAL_DMA_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 800114c:	f7ff ff7c 	bl	8001048 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <HAL_ADC_MspInit+0x120>)
 8001154:	639a      	str	r2, [r3, #56]	; 0x38
 8001156:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <HAL_ADC_MspInit+0x120>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800115c:	e028      	b.n	80011b0 <HAL_ADC_MspInit+0x110>
  else if(hadc->Instance==ADC3)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <HAL_ADC_MspInit+0x128>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d123      	bne.n	80011b0 <HAL_ADC_MspInit+0x110>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_ADC_MspInit+0x11c>)
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	4a13      	ldr	r2, [pc, #76]	; (80011bc <HAL_ADC_MspInit+0x11c>)
 800116e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001172:	6153      	str	r3, [r2, #20]
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_ADC_MspInit+0x11c>)
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_ADC_MspInit+0x11c>)
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <HAL_ADC_MspInit+0x11c>)
 8001186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118a:	6153      	str	r3, [r2, #20]
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_ADC_MspInit+0x11c>)
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001198:	2302      	movs	r3, #2
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119c:	2303      	movs	r3, #3
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	4808      	ldr	r0, [pc, #32]	; (80011cc <HAL_ADC_MspInit+0x12c>)
 80011ac:	f002 f924 	bl	80033f8 <HAL_GPIO_Init>
}
 80011b0:	bf00      	nop
 80011b2:	3730      	adds	r7, #48	; 0x30
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	50000100 	.word	0x50000100
 80011bc:	40021000 	.word	0x40021000
 80011c0:	200060d0 	.word	0x200060d0
 80011c4:	40020408 	.word	0x40020408
 80011c8:	50000400 	.word	0x50000400
 80011cc:	48000400 	.word	0x48000400

080011d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a29      	ldr	r2, [pc, #164]	; (8001284 <HAL_TIM_Base_MspInit+0xb4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10c      	bne.n	80011fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <HAL_TIM_Base_MspInit+0xb8>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a28      	ldr	r2, [pc, #160]	; (8001288 <HAL_TIM_Base_MspInit+0xb8>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	61d3      	str	r3, [r2, #28]
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <HAL_TIM_Base_MspInit+0xb8>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80011fa:	e03e      	b.n	800127a <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM6)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a22      	ldr	r2, [pc, #136]	; (800128c <HAL_TIM_Base_MspInit+0xbc>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d139      	bne.n	800127a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <HAL_TIM_Base_MspInit+0xb8>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a1f      	ldr	r2, [pc, #124]	; (8001288 <HAL_TIM_Base_MspInit+0xb8>)
 800120c:	f043 0310 	orr.w	r3, r3, #16
 8001210:	61d3      	str	r3, [r2, #28]
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <HAL_TIM_Base_MspInit+0xb8>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Channel3;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <HAL_TIM_Base_MspInit+0xc0>)
 8001220:	4a1c      	ldr	r2, [pc, #112]	; (8001294 <HAL_TIM_Base_MspInit+0xc4>)
 8001222:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <HAL_TIM_Base_MspInit+0xc0>)
 8001226:	2200      	movs	r2, #0
 8001228:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_TIM_Base_MspInit+0xc0>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_TIM_Base_MspInit+0xc0>)
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_TIM_Base_MspInit+0xc0>)
 8001238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800123c:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_TIM_Base_MspInit+0xc0>)
 8001240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001244:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_TIM_Base_MspInit+0xc0>)
 8001248:	2220      	movs	r2, #32
 800124a:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_TIM_Base_MspInit+0xc0>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8001252:	480f      	ldr	r0, [pc, #60]	; (8001290 <HAL_TIM_Base_MspInit+0xc0>)
 8001254:	f001 fea5 	bl	8002fa2 <HAL_DMA_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 800125e:	f7ff fef3 	bl	8001048 <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_TIM_Base_MspInit+0xc8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <HAL_TIM_Base_MspInit+0xc8>)
 8001268:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800126c:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_TIM_Base_MspInit+0xc0>)
 8001272:	621a      	str	r2, [r3, #32]
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_TIM_Base_MspInit+0xc0>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6253      	str	r3, [r2, #36]	; 0x24
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40000400 	.word	0x40000400
 8001288:	40021000 	.word	0x40021000
 800128c:	40001000 	.word	0x40001000
 8001290:	20003acc 	.word	0x20003acc
 8001294:	40020030 	.word	0x40020030
 8001298:	40010000 	.word	0x40010000

0800129c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a17      	ldr	r2, [pc, #92]	; (8001318 <HAL_UART_MspInit+0x7c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d128      	bne.n	8001310 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_UART_MspInit+0x80>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a16      	ldr	r2, [pc, #88]	; (800131c <HAL_UART_MspInit+0x80>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c8:	61d3      	str	r3, [r2, #28]
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_UART_MspInit+0x80>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_UART_MspInit+0x80>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	4a10      	ldr	r2, [pc, #64]	; (800131c <HAL_UART_MspInit+0x80>)
 80012dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012e0:	6153      	str	r3, [r2, #20]
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_UART_MspInit+0x80>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001300:	2307      	movs	r3, #7
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <HAL_UART_MspInit+0x84>)
 800130c:	f002 f874 	bl	80033f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	; 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40004800 	.word	0x40004800
 800131c:	40021000 	.word	0x40021000
 8001320:	48000c00 	.word	0x48000c00

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <MemManage_Handler+0x4>

0800133e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <UsageFault_Handler+0x4>

0800134a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001378:	f000 f936 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}

08001380 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <DMA1_Channel3_IRQHandler+0x10>)
 8001386:	f001 ff2d 	bl	80031e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20003acc 	.word	0x20003acc

08001394 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <DMA2_Channel1_IRQHandler+0x10>)
 800139a:	f001 ff23 	bl	80031e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200060d0 	.word	0x200060d0

080013a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e00a      	b.n	80013d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013ba:	f3af 8000 	nop.w
 80013be:	4601      	mov	r1, r0
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	60ba      	str	r2, [r7, #8]
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbf0      	blt.n	80013ba <_read+0x12>
	}

return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e009      	b.n	8001408 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	60ba      	str	r2, [r7, #8]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f9e5 	bl	80007cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	dbf1      	blt.n	80013f4 <_write+0x12>
	}
	return len;
 8001410:	687b      	ldr	r3, [r7, #4]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_close>:

int _close(int file)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return -1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001442:	605a      	str	r2, [r3, #4]
	return 0;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <_isatty>:

int _isatty(int file)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
	return 1;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
	return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x50>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <_sbrk+0x16>
		heap_end = &end;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <_sbrk+0x50>)
 8001496:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <_sbrk+0x54>)
 8001498:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <_sbrk+0x50>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <_sbrk+0x50>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	466a      	mov	r2, sp
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d907      	bls.n	80014be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014ae:	f004 fbe1 	bl	8005c74 <__errno>
 80014b2:	4602      	mov	r2, r0
 80014b4:	230c      	movs	r3, #12
 80014b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014bc:	e006      	b.n	80014cc <_sbrk+0x48>
	}

	heap_end += incr;
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <_sbrk+0x50>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a03      	ldr	r2, [pc, #12]	; (80014d4 <_sbrk+0x50>)
 80014c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000120 	.word	0x20000120
 80014d8:	200073e0 	.word	0x200073e0

080014dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <SystemInit+0x28>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a07      	ldr	r2, [pc, #28]	; (8001504 <SystemInit+0x28>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SystemInit+0x28>)
 80014f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014f6:	609a      	str	r2, [r3, #8]
#endif
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001540 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800150c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800150e:	e003      	b.n	8001518 <LoopCopyDataInit>

08001510 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001512:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001514:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001516:	3104      	adds	r1, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001518:	480b      	ldr	r0, [pc, #44]	; (8001548 <LoopForever+0xa>)
	ldr	r3, =_edata
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <LoopForever+0xe>)
	adds	r2, r0, r1
 800151c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800151e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001520:	d3f6      	bcc.n	8001510 <CopyDataInit>
	ldr	r2, =_sbss
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001524:	e002      	b.n	800152c <LoopFillZerobss>

08001526 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001526:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001528:	f842 3b04 	str.w	r3, [r2], #4

0800152c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <LoopForever+0x16>)
	cmp	r2, r3
 800152e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001530:	d3f9      	bcc.n	8001526 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001532:	f7ff ffd3 	bl	80014dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001536:	f004 fba3 	bl	8005c80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800153a:	f7fe fea1 	bl	8000280 <main>

0800153e <LoopForever>:

LoopForever:
    b LoopForever
 800153e:	e7fe      	b.n	800153e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001540:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001544:	08006b9c 	.word	0x08006b9c
	ldr	r0, =_sdata
 8001548:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800154c:	200000f0 	.word	0x200000f0
	ldr	r2, =_sbss
 8001550:	200000f0 	.word	0x200000f0
	ldr	r3, = _ebss
 8001554:	200073dc 	.word	0x200073dc

08001558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC1_2_IRQHandler>
	...

0800155c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_Init+0x28>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_Init+0x28>)
 8001566:	f043 0310 	orr.w	r3, r3, #16
 800156a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156c:	2003      	movs	r0, #3
 800156e:	f001 fcd7 	bl	8002f20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001572:	2000      	movs	r0, #0
 8001574:	f000 f808 	bl	8001588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001578:	f7ff fd6e 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40022000 	.word	0x40022000

08001588 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x54>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f001 fcef 	bl	8002f8a <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00e      	b.n	80015d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d80a      	bhi.n	80015d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015c4:	f001 fcb7 	bl	8002f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_InitTick+0x5c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000080 	.word	0x20000080
 80015e0:	20000088 	.word	0x20000088
 80015e4:	20000084 	.word	0x20000084

080015e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_IncTick+0x20>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x24>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_IncTick+0x24>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000088 	.word	0x20000088
 800160c:	200073d4 	.word	0x200073d4

08001610 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;  
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	200073d4 	.word	0x200073d4

08001628 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001630:	f7ff ffee 	bl	8001610 <HAL_GetTick>
 8001634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001640:	d005      	beq.n	800164e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_Delay+0x40>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800164e:	bf00      	nop
 8001650:	f7ff ffde 	bl	8001610 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	d8f7      	bhi.n	8001650 <HAL_Delay+0x28>
  {
  }
}
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000088 	.word	0x20000088

0800166c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b09a      	sub	sp, #104	; 0x68
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e1e3      	b.n	8001a7c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d176      	bne.n	80017b4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d152      	bne.n	8001774 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff fcd9 	bl	80010a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d13b      	bne.n	8001774 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f001 fa31 	bl	8002b64 <ADC_Disable>
 8001702:	4603      	mov	r3, r0
 8001704:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	d12f      	bne.n	8001774 <HAL_ADC_Init+0xe0>
 8001714:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001718:	2b00      	cmp	r3, #0
 800171a:	d12b      	bne.n	8001774 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001724:	f023 0302 	bic.w	r3, r3, #2
 8001728:	f043 0202 	orr.w	r2, r3, #2
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800173e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800174e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001750:	4b92      	ldr	r3, [pc, #584]	; (800199c <HAL_ADC_Init+0x308>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a92      	ldr	r2, [pc, #584]	; (80019a0 <HAL_ADC_Init+0x30c>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	0c9a      	lsrs	r2, r3, #18
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001766:	e002      	b.n	800176e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	3b01      	subs	r3, #1
 800176c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f9      	bne.n	8001768 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800178c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001790:	d110      	bne.n	80017b4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f023 0312 	bic.w	r3, r3, #18
 800179a:	f043 0210 	orr.w	r2, r3, #16
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f043 0201 	orr.w	r2, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f040 8150 	bne.w	8001a62 <HAL_ADC_Init+0x3ce>
 80017c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f040 814b 	bne.w	8001a62 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f040 8143 	bne.w	8001a62 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017e4:	f043 0202 	orr.w	r2, r3, #2
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017f4:	d004      	beq.n	8001800 <HAL_ADC_Init+0x16c>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a6a      	ldr	r2, [pc, #424]	; (80019a4 <HAL_ADC_Init+0x310>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d101      	bne.n	8001804 <HAL_ADC_Init+0x170>
 8001800:	4b69      	ldr	r3, [pc, #420]	; (80019a8 <HAL_ADC_Init+0x314>)
 8001802:	e000      	b.n	8001806 <HAL_ADC_Init+0x172>
 8001804:	4b69      	ldr	r3, [pc, #420]	; (80019ac <HAL_ADC_Init+0x318>)
 8001806:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001810:	d102      	bne.n	8001818 <HAL_ADC_Init+0x184>
 8001812:	4b64      	ldr	r3, [pc, #400]	; (80019a4 <HAL_ADC_Init+0x310>)
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	e01a      	b.n	800184e <HAL_ADC_Init+0x1ba>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a61      	ldr	r2, [pc, #388]	; (80019a4 <HAL_ADC_Init+0x310>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d103      	bne.n	800182a <HAL_ADC_Init+0x196>
 8001822:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e011      	b.n	800184e <HAL_ADC_Init+0x1ba>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a60      	ldr	r2, [pc, #384]	; (80019b0 <HAL_ADC_Init+0x31c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d102      	bne.n	800183a <HAL_ADC_Init+0x1a6>
 8001834:	4b5f      	ldr	r3, [pc, #380]	; (80019b4 <HAL_ADC_Init+0x320>)
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	e009      	b.n	800184e <HAL_ADC_Init+0x1ba>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a5d      	ldr	r2, [pc, #372]	; (80019b4 <HAL_ADC_Init+0x320>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d102      	bne.n	800184a <HAL_ADC_Init+0x1b6>
 8001844:	4b5a      	ldr	r3, [pc, #360]	; (80019b0 <HAL_ADC_Init+0x31c>)
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	e001      	b.n	800184e <HAL_ADC_Init+0x1ba>
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b01      	cmp	r3, #1
 800185a:	d108      	bne.n	800186e <HAL_ADC_Init+0x1da>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_ADC_Init+0x1da>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <HAL_ADC_Init+0x1dc>
 800186e:	2300      	movs	r3, #0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d11c      	bne.n	80018ae <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001874:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001876:	2b00      	cmp	r3, #0
 8001878:	d010      	beq.n	800189c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b01      	cmp	r3, #1
 8001884:	d107      	bne.n	8001896 <HAL_ADC_Init+0x202>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_ADC_Init+0x202>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <HAL_ADC_Init+0x204>
 8001896:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001898:	2b00      	cmp	r3, #0
 800189a:	d108      	bne.n	80018ae <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800189c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	431a      	orrs	r2, r3
 80018aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ac:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	7e5b      	ldrb	r3, [r3, #25]
 80018b2:	035b      	lsls	r3, r3, #13
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d002      	beq.n	80018c2 <HAL_ADC_Init+0x22e>
 80018bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018c0:	e000      	b.n	80018c4 <HAL_ADC_Init+0x230>
 80018c2:	2200      	movs	r2, #0
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018d4:	4313      	orrs	r3, r2
 80018d6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d11b      	bne.n	800191a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7e5b      	ldrb	r3, [r3, #25]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d109      	bne.n	80018fe <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	3b01      	subs	r3, #1
 80018f0:	045a      	lsls	r2, r3, #17
 80018f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018f4:	4313      	orrs	r3, r2
 80018f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fa:	663b      	str	r3, [r7, #96]	; 0x60
 80018fc:	e00d      	b.n	800191a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001906:	f043 0220 	orr.w	r2, r3, #32
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	2b01      	cmp	r3, #1
 8001920:	d054      	beq.n	80019cc <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a22      	ldr	r2, [pc, #136]	; (80019b0 <HAL_ADC_Init+0x31c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d004      	beq.n	8001936 <HAL_ADC_Init+0x2a2>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a20      	ldr	r2, [pc, #128]	; (80019b4 <HAL_ADC_Init+0x320>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d140      	bne.n	80019b8 <HAL_ADC_Init+0x324>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800193e:	d02a      	beq.n	8001996 <HAL_ADC_Init+0x302>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001948:	d022      	beq.n	8001990 <HAL_ADC_Init+0x2fc>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001952:	d01a      	beq.n	800198a <HAL_ADC_Init+0x2f6>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800195c:	d012      	beq.n	8001984 <HAL_ADC_Init+0x2f0>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001966:	d00a      	beq.n	800197e <HAL_ADC_Init+0x2ea>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001970:	d002      	beq.n	8001978 <HAL_ADC_Init+0x2e4>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	e023      	b.n	80019c0 <HAL_ADC_Init+0x32c>
 8001978:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800197c:	e020      	b.n	80019c0 <HAL_ADC_Init+0x32c>
 800197e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001982:	e01d      	b.n	80019c0 <HAL_ADC_Init+0x32c>
 8001984:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001988:	e01a      	b.n	80019c0 <HAL_ADC_Init+0x32c>
 800198a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800198e:	e017      	b.n	80019c0 <HAL_ADC_Init+0x32c>
 8001990:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001994:	e014      	b.n	80019c0 <HAL_ADC_Init+0x32c>
 8001996:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800199a:	e011      	b.n	80019c0 <HAL_ADC_Init+0x32c>
 800199c:	20000080 	.word	0x20000080
 80019a0:	431bde83 	.word	0x431bde83
 80019a4:	50000100 	.word	0x50000100
 80019a8:	50000300 	.word	0x50000300
 80019ac:	50000700 	.word	0x50000700
 80019b0:	50000400 	.word	0x50000400
 80019b4:	50000500 	.word	0x50000500
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019c4:	4313      	orrs	r3, r2
 80019c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019c8:	4313      	orrs	r3, r2
 80019ca:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d114      	bne.n	8001a04 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019e8:	f023 0302 	bic.w	r3, r3, #2
 80019ec:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	7e1b      	ldrb	r3, [r3, #24]
 80019f2:	039a      	lsls	r2, r3, #14
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4313      	orrs	r3, r2
 80019fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a00:	4313      	orrs	r3, r2
 8001a02:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <HAL_ADC_Init+0x3f0>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a14:	430b      	orrs	r3, r1
 8001a16:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d10c      	bne.n	8001a3a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f023 010f 	bic.w	r1, r3, #15
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	1e5a      	subs	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
 8001a38:	e007      	b.n	8001a4a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 020f 	bic.w	r2, r2, #15
 8001a48:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f023 0303 	bic.w	r3, r3, #3
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
 8001a60:	e00a      	b.n	8001a78 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f023 0312 	bic.w	r3, r3, #18
 8001a6a:	f043 0210 	orr.w	r2, r3, #16
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001a72:	2301      	movs	r3, #1
 8001a74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001a78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3768      	adds	r7, #104	; 0x68
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	fff0c007 	.word	0xfff0c007

08001a88 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f040 80f9 	bne.w	8001c96 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADC_Start+0x2a>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e0f4      	b.n	8001c9c <HAL_ADC_Start+0x214>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fff4 	bl	8002aa8 <ADC_Enable>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f040 80e0 	bne.w	8001c8c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ad4:	f023 0301 	bic.w	r3, r3, #1
 8001ad8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ae8:	d004      	beq.n	8001af4 <HAL_ADC_Start+0x6c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a6d      	ldr	r2, [pc, #436]	; (8001ca4 <HAL_ADC_Start+0x21c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d106      	bne.n	8001b02 <HAL_ADC_Start+0x7a>
 8001af4:	4b6c      	ldr	r3, [pc, #432]	; (8001ca8 <HAL_ADC_Start+0x220>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d010      	beq.n	8001b22 <HAL_ADC_Start+0x9a>
 8001b00:	e005      	b.n	8001b0e <HAL_ADC_Start+0x86>
 8001b02:	4b6a      	ldr	r3, [pc, #424]	; (8001cac <HAL_ADC_Start+0x224>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d009      	beq.n	8001b22 <HAL_ADC_Start+0x9a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b16:	d004      	beq.n	8001b22 <HAL_ADC_Start+0x9a>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a64      	ldr	r2, [pc, #400]	; (8001cb0 <HAL_ADC_Start+0x228>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d115      	bne.n	8001b4e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d036      	beq.n	8001baa <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b4c:	e02d      	b.n	8001baa <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b62:	d004      	beq.n	8001b6e <HAL_ADC_Start+0xe6>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a4e      	ldr	r2, [pc, #312]	; (8001ca4 <HAL_ADC_Start+0x21c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d10a      	bne.n	8001b84 <HAL_ADC_Start+0xfc>
 8001b6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf14      	ite	ne
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	2300      	moveq	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	e008      	b.n	8001b96 <HAL_ADC_Start+0x10e>
 8001b84:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <HAL_ADC_Start+0x228>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf14      	ite	ne
 8001b90:	2301      	movne	r3, #1
 8001b92:	2300      	moveq	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ba2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb6:	d106      	bne.n	8001bc6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbc:	f023 0206 	bic.w	r2, r3, #6
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	645a      	str	r2, [r3, #68]	; 0x44
 8001bc4:	e002      	b.n	8001bcc <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	221c      	movs	r2, #28
 8001bda:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be4:	d004      	beq.n	8001bf0 <HAL_ADC_Start+0x168>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a2e      	ldr	r2, [pc, #184]	; (8001ca4 <HAL_ADC_Start+0x21c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d106      	bne.n	8001bfe <HAL_ADC_Start+0x176>
 8001bf0:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <HAL_ADC_Start+0x220>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d03e      	beq.n	8001c7a <HAL_ADC_Start+0x1f2>
 8001bfc:	e005      	b.n	8001c0a <HAL_ADC_Start+0x182>
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <HAL_ADC_Start+0x224>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d037      	beq.n	8001c7a <HAL_ADC_Start+0x1f2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c12:	d004      	beq.n	8001c1e <HAL_ADC_Start+0x196>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a22      	ldr	r2, [pc, #136]	; (8001ca4 <HAL_ADC_Start+0x21c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d106      	bne.n	8001c2c <HAL_ADC_Start+0x1a4>
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_ADC_Start+0x220>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	2b05      	cmp	r3, #5
 8001c28:	d027      	beq.n	8001c7a <HAL_ADC_Start+0x1f2>
 8001c2a:	e005      	b.n	8001c38 <HAL_ADC_Start+0x1b0>
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <HAL_ADC_Start+0x224>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 031f 	and.w	r3, r3, #31
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	d020      	beq.n	8001c7a <HAL_ADC_Start+0x1f2>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c40:	d004      	beq.n	8001c4c <HAL_ADC_Start+0x1c4>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_ADC_Start+0x21c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d106      	bne.n	8001c5a <HAL_ADC_Start+0x1d2>
 8001c4c:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <HAL_ADC_Start+0x220>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	2b09      	cmp	r3, #9
 8001c56:	d010      	beq.n	8001c7a <HAL_ADC_Start+0x1f2>
 8001c58:	e005      	b.n	8001c66 <HAL_ADC_Start+0x1de>
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_ADC_Start+0x224>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 031f 	and.w	r3, r3, #31
 8001c62:	2b09      	cmp	r3, #9
 8001c64:	d009      	beq.n	8001c7a <HAL_ADC_Start+0x1f2>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c6e:	d004      	beq.n	8001c7a <HAL_ADC_Start+0x1f2>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <HAL_ADC_Start+0x228>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10f      	bne.n	8001c9a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0204 	orr.w	r2, r2, #4
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	e006      	b.n	8001c9a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c94:	e001      	b.n	8001c9a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c96:	2302      	movs	r3, #2
 8001c98:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	50000100 	.word	0x50000100
 8001ca8:	50000300 	.word	0x50000300
 8001cac:	50000700 	.word	0x50000700
 8001cb0:	50000400 	.word	0x50000400

08001cb4 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_Stop+0x1a>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e023      	b.n	8001d16 <HAL_ADC_Stop+0x62>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001cd6:	216c      	movs	r1, #108	; 0x6c
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 ffa3 	bl	8002c24 <ADC_ConversionStop>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d111      	bne.n	8001d0c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 ff3b 	bl	8002b64 <ADC_Disable>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d109      	bne.n	8001d0c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d102      	bne.n	8001d3c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001d36:	2308      	movs	r3, #8
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	e03a      	b.n	8001db2 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d44:	d004      	beq.n	8001d50 <HAL_ADC_PollForConversion+0x30>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a6e      	ldr	r2, [pc, #440]	; (8001f04 <HAL_ADC_PollForConversion+0x1e4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_PollForConversion+0x34>
 8001d50:	4b6d      	ldr	r3, [pc, #436]	; (8001f08 <HAL_ADC_PollForConversion+0x1e8>)
 8001d52:	e000      	b.n	8001d56 <HAL_ADC_PollForConversion+0x36>
 8001d54:	4b6d      	ldr	r3, [pc, #436]	; (8001f0c <HAL_ADC_PollForConversion+0x1ec>)
 8001d56:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d112      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d11d      	bne.n	8001dae <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f043 0220 	orr.w	r2, r3, #32
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0b8      	b.n	8001efc <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f043 0220 	orr.w	r2, r3, #32
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0a6      	b.n	8001efc <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001dae:	230c      	movs	r3, #12
 8001db0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dba:	d004      	beq.n	8001dc6 <HAL_ADC_PollForConversion+0xa6>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a50      	ldr	r2, [pc, #320]	; (8001f04 <HAL_ADC_PollForConversion+0x1e4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d106      	bne.n	8001dd4 <HAL_ADC_PollForConversion+0xb4>
 8001dc6:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <HAL_ADC_PollForConversion+0x1e8>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 031f 	and.w	r3, r3, #31
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d010      	beq.n	8001df4 <HAL_ADC_PollForConversion+0xd4>
 8001dd2:	e005      	b.n	8001de0 <HAL_ADC_PollForConversion+0xc0>
 8001dd4:	4b4d      	ldr	r3, [pc, #308]	; (8001f0c <HAL_ADC_PollForConversion+0x1ec>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d009      	beq.n	8001df4 <HAL_ADC_PollForConversion+0xd4>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001de8:	d004      	beq.n	8001df4 <HAL_ADC_PollForConversion+0xd4>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <HAL_ADC_PollForConversion+0x1f0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d104      	bne.n	8001dfe <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	e00f      	b.n	8001e1e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e06:	d004      	beq.n	8001e12 <HAL_ADC_PollForConversion+0xf2>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a3d      	ldr	r2, [pc, #244]	; (8001f04 <HAL_ADC_PollForConversion+0x1e4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d102      	bne.n	8001e18 <HAL_ADC_PollForConversion+0xf8>
 8001e12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e16:	e000      	b.n	8001e1a <HAL_ADC_PollForConversion+0xfa>
 8001e18:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <HAL_ADC_PollForConversion+0x1f0>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001e1e:	f7ff fbf7 	bl	8001610 <HAL_GetTick>
 8001e22:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e24:	e01a      	b.n	8001e5c <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e2c:	d016      	beq.n	8001e5c <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <HAL_ADC_PollForConversion+0x124>
 8001e34:	f7ff fbec 	bl	8001610 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d20b      	bcs.n	8001e5c <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	f043 0204 	orr.w	r2, r3, #4
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e04f      	b.n	8001efc <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0dd      	beq.n	8001e26 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d131      	bne.n	8001ee8 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d12c      	bne.n	8001ee8 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d125      	bne.n	8001ee8 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d112      	bne.n	8001ed0 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d112      	bne.n	8001ee8 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f043 0201 	orr.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40
 8001ece:	e00b      	b.n	8001ee8 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	f043 0201 	orr.w	r2, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d103      	bne.n	8001efa <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	50000100 	.word	0x50000100
 8001f08:	50000300 	.word	0x50000300
 8001f0c:	50000700 	.word	0x50000700
 8001f10:	50000400 	.word	0x50000400

08001f14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 80f7 	bne.w	8002122 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_Start_DMA+0x2e>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e0f2      	b.n	8002128 <HAL_ADC_Start_DMA+0x214>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f52:	d004      	beq.n	8001f5e <HAL_ADC_Start_DMA+0x4a>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a75      	ldr	r2, [pc, #468]	; (8002130 <HAL_ADC_Start_DMA+0x21c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d109      	bne.n	8001f72 <HAL_ADC_Start_DMA+0x5e>
 8001f5e:	4b75      	ldr	r3, [pc, #468]	; (8002134 <HAL_ADC_Start_DMA+0x220>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 031f 	and.w	r3, r3, #31
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf0c      	ite	eq
 8001f6a:	2301      	moveq	r3, #1
 8001f6c:	2300      	movne	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	e008      	b.n	8001f84 <HAL_ADC_Start_DMA+0x70>
 8001f72:	4b71      	ldr	r3, [pc, #452]	; (8002138 <HAL_ADC_Start_DMA+0x224>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf0c      	ite	eq
 8001f7e:	2301      	moveq	r3, #1
 8001f80:	2300      	movne	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80c5 	beq.w	8002114 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 fd8c 	bl	8002aa8 <ADC_Enable>
 8001f90:	4603      	mov	r3, r0
 8001f92:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 80b7 	bne.w	800210a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fb8:	d004      	beq.n	8001fc4 <HAL_ADC_Start_DMA+0xb0>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a5c      	ldr	r2, [pc, #368]	; (8002130 <HAL_ADC_Start_DMA+0x21c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d106      	bne.n	8001fd2 <HAL_ADC_Start_DMA+0xbe>
 8001fc4:	4b5b      	ldr	r3, [pc, #364]	; (8002134 <HAL_ADC_Start_DMA+0x220>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d010      	beq.n	8001ff2 <HAL_ADC_Start_DMA+0xde>
 8001fd0:	e005      	b.n	8001fde <HAL_ADC_Start_DMA+0xca>
 8001fd2:	4b59      	ldr	r3, [pc, #356]	; (8002138 <HAL_ADC_Start_DMA+0x224>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_ADC_Start_DMA+0xde>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fe6:	d004      	beq.n	8001ff2 <HAL_ADC_Start_DMA+0xde>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a53      	ldr	r2, [pc, #332]	; (800213c <HAL_ADC_Start_DMA+0x228>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d115      	bne.n	800201e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d036      	beq.n	800207a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002014:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800201c:	e02d      	b.n	800207a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002032:	d004      	beq.n	800203e <HAL_ADC_Start_DMA+0x12a>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a3d      	ldr	r2, [pc, #244]	; (8002130 <HAL_ADC_Start_DMA+0x21c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d10a      	bne.n	8002054 <HAL_ADC_Start_DMA+0x140>
 800203e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf14      	ite	ne
 800204c:	2301      	movne	r3, #1
 800204e:	2300      	moveq	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	e008      	b.n	8002066 <HAL_ADC_Start_DMA+0x152>
 8002054:	4b39      	ldr	r3, [pc, #228]	; (800213c <HAL_ADC_Start_DMA+0x228>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf14      	ite	ne
 8002060:	2301      	movne	r3, #1
 8002062:	2300      	moveq	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002072:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002086:	d106      	bne.n	8002096 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208c:	f023 0206 	bic.w	r2, r3, #6
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	645a      	str	r2, [r3, #68]	; 0x44
 8002094:	e002      	b.n	800209c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	4a25      	ldr	r2, [pc, #148]	; (8002140 <HAL_ADC_Start_DMA+0x22c>)
 80020aa:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	4a24      	ldr	r2, [pc, #144]	; (8002144 <HAL_ADC_Start_DMA+0x230>)
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b8:	4a23      	ldr	r2, [pc, #140]	; (8002148 <HAL_ADC_Start_DMA+0x234>)
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	221c      	movs	r2, #28
 80020c2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0210 	orr.w	r2, r2, #16
 80020d2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	3340      	adds	r3, #64	; 0x40
 80020ee:	4619      	mov	r1, r3
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f000 ffde 	bl	80030b4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0204 	orr.w	r2, r2, #4
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	e00d      	b.n	8002126 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002112:	e008      	b.n	8002126 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002120:	e001      	b.n	8002126 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002122:	2302      	movs	r3, #2
 8002124:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002126:	7dfb      	ldrb	r3, [r7, #23]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	50000100 	.word	0x50000100
 8002134:	50000300 	.word	0x50000300
 8002138:	50000700 	.word	0x50000700
 800213c:	50000400 	.word	0x50000400
 8002140:	080029dd 	.word	0x080029dd
 8002144:	08002a57 	.word	0x08002a57
 8002148:	08002a73 	.word	0x08002a73

0800214c <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_ADC_Stop_DMA+0x1a>
 8002162:	2302      	movs	r3, #2
 8002164:	e04a      	b.n	80021fc <HAL_ADC_Stop_DMA+0xb0>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800216e:	216c      	movs	r1, #108	; 0x6c
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 fd57 	bl	8002c24 <ADC_ConversionStop>
 8002176:	4603      	mov	r3, r0
 8002178:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d138      	bne.n	80021f2 <HAL_ADC_Stop_DMA+0xa6>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002194:	4618      	mov	r0, r3
 8002196:	f000 ffec 	bl	8003172 <HAL_DMA_Abort>
 800219a:	4603      	mov	r3, r0
 800219c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_ADC_Stop_DMA+0x64>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0210 	bic.w	r2, r2, #16
 80021be:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d105      	bne.n	80021d2 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fccc 	bl	8002b64 <ADC_Disable>
 80021cc:	4603      	mov	r3, r0
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	e002      	b.n	80021d8 <HAL_ADC_Stop_DMA+0x8c>
    }
    else
    {
      ADC_Disable(hadc);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fcc6 	bl	8002b64 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_ADC_Stop_DMA+0xa6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	f043 0201 	orr.w	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002220:	b480      	push	{r7}
 8002222:	b09b      	sub	sp, #108	; 0x6c
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x22>
 800223e:	2302      	movs	r3, #2
 8002240:	e2cb      	b.n	80027da <HAL_ADC_ConfigChannel+0x5ba>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	f040 82af 	bne.w	80027b8 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b04      	cmp	r3, #4
 8002260:	d81c      	bhi.n	800229c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	461a      	mov	r2, r3
 8002276:	231f      	movs	r3, #31
 8002278:	4093      	lsls	r3, r2
 800227a:	43db      	mvns	r3, r3
 800227c:	4019      	ands	r1, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fa00 f203 	lsl.w	r2, r0, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	631a      	str	r2, [r3, #48]	; 0x30
 800229a:	e063      	b.n	8002364 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b09      	cmp	r3, #9
 80022a2:	d81e      	bhi.n	80022e2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	3b1e      	subs	r3, #30
 80022b8:	221f      	movs	r2, #31
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	4019      	ands	r1, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	3b1e      	subs	r3, #30
 80022d4:	fa00 f203 	lsl.w	r2, r0, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	635a      	str	r2, [r3, #52]	; 0x34
 80022e0:	e040      	b.n	8002364 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b0e      	cmp	r3, #14
 80022e8:	d81e      	bhi.n	8002328 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	3b3c      	subs	r3, #60	; 0x3c
 80022fe:	221f      	movs	r2, #31
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	4019      	ands	r1, r3
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	3b3c      	subs	r3, #60	; 0x3c
 800231a:	fa00 f203 	lsl.w	r2, r0, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	639a      	str	r2, [r3, #56]	; 0x38
 8002326:	e01d      	b.n	8002364 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	3b5a      	subs	r3, #90	; 0x5a
 800233c:	221f      	movs	r2, #31
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	4019      	ands	r1, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	3b5a      	subs	r3, #90	; 0x5a
 8002358:	fa00 f203 	lsl.w	r2, r0, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 80e5 	bne.w	800253e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b09      	cmp	r3, #9
 800237a:	d91c      	bls.n	80023b6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6999      	ldr	r1, [r3, #24]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	3b1e      	subs	r3, #30
 800238e:	2207      	movs	r2, #7
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	4019      	ands	r1, r3
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6898      	ldr	r0, [r3, #8]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	3b1e      	subs	r3, #30
 80023a8:	fa00 f203 	lsl.w	r2, r0, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	619a      	str	r2, [r3, #24]
 80023b4:	e019      	b.n	80023ea <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6959      	ldr	r1, [r3, #20]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	2207      	movs	r2, #7
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	4019      	ands	r1, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6898      	ldr	r0, [r3, #8]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	fa00 f203 	lsl.w	r2, r0, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	08db      	lsrs	r3, r3, #3
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	3b01      	subs	r3, #1
 8002408:	2b03      	cmp	r3, #3
 800240a:	d84f      	bhi.n	80024ac <HAL_ADC_ConfigChannel+0x28c>
 800240c:	a201      	add	r2, pc, #4	; (adr r2, 8002414 <HAL_ADC_ConfigChannel+0x1f4>)
 800240e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002412:	bf00      	nop
 8002414:	08002425 	.word	0x08002425
 8002418:	08002447 	.word	0x08002447
 800241c:	08002469 	.word	0x08002469
 8002420:	0800248b 	.word	0x0800248b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800242a:	4b9f      	ldr	r3, [pc, #636]	; (80026a8 <HAL_ADC_ConfigChannel+0x488>)
 800242c:	4013      	ands	r3, r2
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	0691      	lsls	r1, r2, #26
 8002434:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002436:	430a      	orrs	r2, r1
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002442:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002444:	e07e      	b.n	8002544 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800244c:	4b96      	ldr	r3, [pc, #600]	; (80026a8 <HAL_ADC_ConfigChannel+0x488>)
 800244e:	4013      	ands	r3, r2
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	0691      	lsls	r1, r2, #26
 8002456:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002458:	430a      	orrs	r2, r1
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002464:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002466:	e06d      	b.n	8002544 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800246e:	4b8e      	ldr	r3, [pc, #568]	; (80026a8 <HAL_ADC_ConfigChannel+0x488>)
 8002470:	4013      	ands	r3, r2
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	0691      	lsls	r1, r2, #26
 8002478:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800247a:	430a      	orrs	r2, r1
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002486:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002488:	e05c      	b.n	8002544 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002490:	4b85      	ldr	r3, [pc, #532]	; (80026a8 <HAL_ADC_ConfigChannel+0x488>)
 8002492:	4013      	ands	r3, r2
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	0691      	lsls	r1, r2, #26
 800249a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800249c:	430a      	orrs	r2, r1
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024a8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024aa:	e04b      	b.n	8002544 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	069b      	lsls	r3, r3, #26
 80024bc:	429a      	cmp	r2, r3
 80024be:	d107      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024ce:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	069b      	lsls	r3, r3, #26
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d107      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024f2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	069b      	lsls	r3, r3, #26
 8002504:	429a      	cmp	r2, r3
 8002506:	d107      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002516:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	069b      	lsls	r3, r3, #26
 8002528:	429a      	cmp	r2, r3
 800252a:	d10a      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800253a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800253c:	e001      	b.n	8002542 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800253e:	bf00      	nop
 8002540:	e000      	b.n	8002544 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002542:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d108      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x344>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x344>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_ADC_ConfigChannel+0x346>
 8002564:	2300      	movs	r3, #0
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 8131 	bne.w	80027ce <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d00f      	beq.n	8002594 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2201      	movs	r2, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	400a      	ands	r2, r1
 800258e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002592:	e049      	b.n	8002628 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2201      	movs	r2, #1
 80025a2:	409a      	lsls	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b09      	cmp	r3, #9
 80025b4:	d91c      	bls.n	80025f0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6999      	ldr	r1, [r3, #24]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	3b1b      	subs	r3, #27
 80025c8:	2207      	movs	r2, #7
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	4019      	ands	r1, r3
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6898      	ldr	r0, [r3, #8]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4613      	mov	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	3b1b      	subs	r3, #27
 80025e2:	fa00 f203 	lsl.w	r2, r0, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	619a      	str	r2, [r3, #24]
 80025ee:	e01b      	b.n	8002628 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6959      	ldr	r1, [r3, #20]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	2207      	movs	r2, #7
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	4019      	ands	r1, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6898      	ldr	r0, [r3, #8]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	fa00 f203 	lsl.w	r2, r0, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002630:	d004      	beq.n	800263c <HAL_ADC_ConfigChannel+0x41c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <HAL_ADC_ConfigChannel+0x48c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x420>
 800263c:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <HAL_ADC_ConfigChannel+0x490>)
 800263e:	e000      	b.n	8002642 <HAL_ADC_ConfigChannel+0x422>
 8002640:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <HAL_ADC_ConfigChannel+0x494>)
 8002642:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b10      	cmp	r3, #16
 800264a:	d105      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800264c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002654:	2b00      	cmp	r3, #0
 8002656:	d015      	beq.n	8002684 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800265c:	2b11      	cmp	r3, #17
 800265e:	d105      	bne.n	800266c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00b      	beq.n	8002684 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002670:	2b12      	cmp	r3, #18
 8002672:	f040 80ac 	bne.w	80027ce <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 80a5 	bne.w	80027ce <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800268c:	d102      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x474>
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <HAL_ADC_ConfigChannel+0x48c>)
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	e023      	b.n	80026dc <HAL_ADC_ConfigChannel+0x4bc>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a04      	ldr	r2, [pc, #16]	; (80026ac <HAL_ADC_ConfigChannel+0x48c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10c      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x498>
 800269e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e01a      	b.n	80026dc <HAL_ADC_ConfigChannel+0x4bc>
 80026a6:	bf00      	nop
 80026a8:	83fff000 	.word	0x83fff000
 80026ac:	50000100 	.word	0x50000100
 80026b0:	50000300 	.word	0x50000300
 80026b4:	50000700 	.word	0x50000700
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a4a      	ldr	r2, [pc, #296]	; (80027e8 <HAL_ADC_ConfigChannel+0x5c8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d102      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x4a8>
 80026c2:	4b4a      	ldr	r3, [pc, #296]	; (80027ec <HAL_ADC_ConfigChannel+0x5cc>)
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e009      	b.n	80026dc <HAL_ADC_ConfigChannel+0x4bc>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a47      	ldr	r2, [pc, #284]	; (80027ec <HAL_ADC_ConfigChannel+0x5cc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d102      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x4b8>
 80026d2:	4b45      	ldr	r3, [pc, #276]	; (80027e8 <HAL_ADC_ConfigChannel+0x5c8>)
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	e001      	b.n	80026dc <HAL_ADC_ConfigChannel+0x4bc>
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d108      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x4dc>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x4dc>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <HAL_ADC_ConfigChannel+0x4de>
 80026fc:	2300      	movs	r3, #0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d150      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002702:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002704:	2b00      	cmp	r3, #0
 8002706:	d010      	beq.n	800272a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d107      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x504>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x504>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <HAL_ADC_ConfigChannel+0x506>
 8002724:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002726:	2b00      	cmp	r3, #0
 8002728:	d13c      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b10      	cmp	r3, #16
 8002730:	d11d      	bne.n	800276e <HAL_ADC_ConfigChannel+0x54e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800273a:	d118      	bne.n	800276e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800273c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002746:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002748:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <HAL_ADC_ConfigChannel+0x5d0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a29      	ldr	r2, [pc, #164]	; (80027f4 <HAL_ADC_ConfigChannel+0x5d4>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0c9a      	lsrs	r2, r3, #18
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800275e:	e002      	b.n	8002766 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	3b01      	subs	r3, #1
 8002764:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f9      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800276c:	e02e      	b.n	80027cc <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b11      	cmp	r3, #17
 8002774:	d10b      	bne.n	800278e <HAL_ADC_ConfigChannel+0x56e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800277e:	d106      	bne.n	800278e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800278a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800278c:	e01e      	b.n	80027cc <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b12      	cmp	r3, #18
 8002794:	d11a      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800279e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027a2:	e013      	b.n	80027cc <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f043 0220 	orr.w	r2, r3, #32
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80027b6:	e00a      	b.n	80027ce <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80027ca:	e000      	b.n	80027ce <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027cc:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80027da:	4618      	mov	r0, r3
 80027dc:	376c      	adds	r7, #108	; 0x6c
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	50000400 	.word	0x50000400
 80027ec:	50000500 	.word	0x50000500
 80027f0:	20000080 	.word	0x20000080
 80027f4:	431bde83 	.word	0x431bde83

080027f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b099      	sub	sp, #100	; 0x64
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002810:	d102      	bne.n	8002818 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002812:	4b6d      	ldr	r3, [pc, #436]	; (80029c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	e01a      	b.n	800284e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a6a      	ldr	r2, [pc, #424]	; (80029c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d103      	bne.n	800282a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002822:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	e011      	b.n	800284e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a67      	ldr	r2, [pc, #412]	; (80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d102      	bne.n	800283a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002834:	4b66      	ldr	r3, [pc, #408]	; (80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	e009      	b.n	800284e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a64      	ldr	r2, [pc, #400]	; (80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d102      	bne.n	800284a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002844:	4b61      	ldr	r3, [pc, #388]	; (80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	e001      	b.n	800284e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0b0      	b.n	80029ba <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002862:	2302      	movs	r3, #2
 8002864:	e0a9      	b.n	80029ba <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	f040 808d 	bne.w	8002998 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 8086 	bne.w	8002998 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002894:	d004      	beq.n	80028a0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a4b      	ldr	r2, [pc, #300]	; (80029c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80028a0:	4b4c      	ldr	r3, [pc, #304]	; (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80028a2:	e000      	b.n	80028a6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80028a4:	4b4c      	ldr	r3, [pc, #304]	; (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80028a6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d040      	beq.n	8002932 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80028b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028c2:	035b      	lsls	r3, r3, #13
 80028c4:	430b      	orrs	r3, r1
 80028c6:	431a      	orrs	r2, r3
 80028c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ca:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d108      	bne.n	80028ec <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80028ec:	2300      	movs	r3, #0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d15c      	bne.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d107      	bne.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800290e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002910:	2b00      	cmp	r3, #0
 8002912:	d14b      	bne.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800291c:	f023 030f 	bic.w	r3, r3, #15
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	6811      	ldr	r1, [r2, #0]
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	6892      	ldr	r2, [r2, #8]
 8002928:	430a      	orrs	r2, r1
 800292a:	431a      	orrs	r2, r3
 800292c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800292e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002930:	e03c      	b.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800293a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800293c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d108      	bne.n	800295e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800295e:	2300      	movs	r3, #0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d123      	bne.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d107      	bne.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002980:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002982:	2b00      	cmp	r3, #0
 8002984:	d112      	bne.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800298e:	f023 030f 	bic.w	r3, r3, #15
 8002992:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002994:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002996:	e009      	b.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029aa:	e000      	b.n	80029ae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029ac:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80029b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80029ba:	4618      	mov	r0, r3
 80029bc:	3764      	adds	r7, #100	; 0x64
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	50000100 	.word	0x50000100
 80029cc:	50000400 	.word	0x50000400
 80029d0:	50000500 	.word	0x50000500
 80029d4:	50000300 	.word	0x50000300
 80029d8:	50000700 	.word	0x50000700

080029dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d126      	bne.n	8002a44 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d115      	bne.n	8002a3c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d111      	bne.n	8002a3c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d105      	bne.n	8002a3c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f043 0201 	orr.w	r2, r3, #1
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7fe f907 	bl	8000c50 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002a42:	e004      	b.n	8002a4e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	4798      	blx	r3
}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f7fe fe01 	bl	800166c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a90:	f043 0204 	orr.w	r2, r3, #4
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7fe fdf1 	bl	8001680 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d108      	bne.n	8002ad4 <ADC_Enable+0x2c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <ADC_Enable+0x2c>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <ADC_Enable+0x2e>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d13c      	bne.n	8002b54 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	4b1f      	ldr	r3, [pc, #124]	; (8002b60 <ADC_Enable+0xb8>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00d      	beq.n	8002b04 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f043 0210 	orr.w	r2, r3, #16
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af8:	f043 0201 	orr.w	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e028      	b.n	8002b56 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002b14:	f7fe fd7c 	bl	8001610 <HAL_GetTick>
 8002b18:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b1a:	e014      	b.n	8002b46 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b1c:	f7fe fd78 	bl	8001610 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d90d      	bls.n	8002b46 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f043 0210 	orr.w	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	f043 0201 	orr.w	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e007      	b.n	8002b56 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d1e3      	bne.n	8002b1c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	8000003f 	.word	0x8000003f

08002b64 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d108      	bne.n	8002b90 <ADC_Disable+0x2c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <ADC_Disable+0x2c>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <ADC_Disable+0x2e>
 8002b90:	2300      	movs	r3, #0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d040      	beq.n	8002c18 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 030d 	and.w	r3, r3, #13
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d10f      	bne.n	8002bc4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0202 	orr.w	r2, r2, #2
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2203      	movs	r2, #3
 8002bba:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fd28 	bl	8001610 <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002bc2:	e022      	b.n	8002c0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f043 0210 	orr.w	r2, r3, #16
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	f043 0201 	orr.w	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e01c      	b.n	8002c1a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002be0:	f7fe fd16 	bl	8001610 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d90d      	bls.n	8002c0a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f043 0210 	orr.w	r2, r3, #16
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f043 0201 	orr.w	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e007      	b.n	8002c1a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d0e3      	beq.n	8002be0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 8093 	beq.w	8002d70 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c58:	d12a      	bne.n	8002cb0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d126      	bne.n	8002cb0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d122      	bne.n	8002cb0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002c6e:	e014      	b.n	8002c9a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4a42      	ldr	r2, [pc, #264]	; (8002d7c <ADC_ConversionStop+0x158>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d90d      	bls.n	8002c94 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f043 0210 	orr.w	r2, r3, #16
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	f043 0201 	orr.w	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e06e      	b.n	8002d72 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	3301      	adds	r3, #1
 8002c98:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d1e3      	bne.n	8002c70 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2240      	movs	r2, #64	; 0x40
 8002cae:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b60      	cmp	r3, #96	; 0x60
 8002cb4:	d015      	beq.n	8002ce2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d10e      	bne.n	8002ce2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d107      	bne.n	8002ce2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0210 	orr.w	r2, r2, #16
 8002ce0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	d015      	beq.n	8002d14 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d10e      	bne.n	8002d14 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d107      	bne.n	8002d14 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0220 	orr.w	r2, r2, #32
 8002d12:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b60      	cmp	r3, #96	; 0x60
 8002d18:	d004      	beq.n	8002d24 <ADC_ConversionStop+0x100>
 8002d1a:	2b6c      	cmp	r3, #108	; 0x6c
 8002d1c:	d105      	bne.n	8002d2a <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002d1e:	230c      	movs	r3, #12
 8002d20:	617b      	str	r3, [r7, #20]
        break;
 8002d22:	e005      	b.n	8002d30 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002d24:	2308      	movs	r3, #8
 8002d26:	617b      	str	r3, [r7, #20]
        break;
 8002d28:	e002      	b.n	8002d30 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	617b      	str	r3, [r7, #20]
        break;
 8002d2e:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002d30:	f7fe fc6e 	bl	8001610 <HAL_GetTick>
 8002d34:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002d36:	e014      	b.n	8002d62 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d38:	f7fe fc6a 	bl	8001610 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b0b      	cmp	r3, #11
 8002d44:	d90d      	bls.n	8002d62 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f043 0210 	orr.w	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f043 0201 	orr.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e007      	b.n	8002d72 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1e3      	bne.n	8002d38 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	000993ff 	.word	0x000993ff

08002d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db2:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	60d3      	str	r3, [r2, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	f003 0307 	and.w	r3, r3, #7
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	db0b      	blt.n	8002e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	f003 021f 	and.w	r2, r3, #31
 8002dfc:	4907      	ldr	r1, [pc, #28]	; (8002e1c <__NVIC_EnableIRQ+0x38>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	2001      	movs	r0, #1
 8002e06:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	e000e100 	.word	0xe000e100

08002e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	6039      	str	r1, [r7, #0]
 8002e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	db0a      	blt.n	8002e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	490c      	ldr	r1, [pc, #48]	; (8002e6c <__NVIC_SetPriority+0x4c>)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	0112      	lsls	r2, r2, #4
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	440b      	add	r3, r1
 8002e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e48:	e00a      	b.n	8002e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4908      	ldr	r1, [pc, #32]	; (8002e70 <__NVIC_SetPriority+0x50>)
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	3b04      	subs	r3, #4
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	761a      	strb	r2, [r3, #24]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000e100 	.word	0xe000e100
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	; 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f1c3 0307 	rsb	r3, r3, #7
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	bf28      	it	cs
 8002e92:	2304      	movcs	r3, #4
 8002e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d902      	bls.n	8002ea4 <NVIC_EncodePriority+0x30>
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3b03      	subs	r3, #3
 8002ea2:	e000      	b.n	8002ea6 <NVIC_EncodePriority+0x32>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	43d9      	mvns	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	4313      	orrs	r3, r2
         );
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3724      	adds	r7, #36	; 0x24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eec:	d301      	bcc.n	8002ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00f      	b.n	8002f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef2:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <SysTick_Config+0x40>)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002efa:	210f      	movs	r1, #15
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f00:	f7ff ff8e 	bl	8002e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <SysTick_Config+0x40>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0a:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <SysTick_Config+0x40>)
 8002f0c:	2207      	movs	r2, #7
 8002f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	e000e010 	.word	0xe000e010

08002f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ff29 	bl	8002d80 <__NVIC_SetPriorityGrouping>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f48:	f7ff ff3e 	bl	8002dc8 <__NVIC_GetPriorityGrouping>
 8002f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	6978      	ldr	r0, [r7, #20]
 8002f54:	f7ff ff8e 	bl	8002e74 <NVIC_EncodePriority>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff5d 	bl	8002e20 <__NVIC_SetPriority>
}
 8002f66:	bf00      	nop
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	4603      	mov	r3, r0
 8002f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff31 	bl	8002de4 <__NVIC_EnableIRQ>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ffa2 	bl	8002edc <SysTick_Config>
 8002f98:	4603      	mov	r3, r0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e037      	b.n	8003028 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002fce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002fd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f9b8 	bl	8003380 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}  
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_DMA_Start+0x20>
 800304c:	2302      	movs	r3, #2
 800304e:	e02d      	b.n	80030ac <HAL_DMA_Start+0x7c>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800305e:	2b01      	cmp	r3, #1
 8003060:	d11d      	bne.n	800309e <HAL_DMA_Start+0x6e>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2202      	movs	r2, #2
 8003066:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f94b 	bl	8003322 <DMA_SetConfig>
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;  
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	e005      	b.n	80030aa <HAL_DMA_Start+0x7a>
  }
  else
  {
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	/* Remain BUSY */
  	status = HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
 80030a8:	75fb      	strb	r3, [r7, #23]
  }  

  return status; 
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
} 
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_DMA_Start_IT+0x20>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e04a      	b.n	800316a <HAL_DMA_Start_IT+0xb6>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d13a      	bne.n	800315c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f909 	bl	8003322 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 020e 	orr.w	r2, r2, #14
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	e00f      	b.n	800314a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 020a 	orr.w	r2, r2, #10
 8003138:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0204 	bic.w	r2, r2, #4
 8003148:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0201 	orr.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	e005      	b.n	8003168 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003164:	2302      	movs	r3, #2
 8003166:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003168:	7dfb      	ldrb	r3, [r7, #23]
} 
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003180:	2b02      	cmp	r3, #2
 8003182:	d008      	beq.n	8003196 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2204      	movs	r2, #4
 8003188:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e020      	b.n	80031d8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 020e 	bic.w	r2, r2, #14
 80031a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0201 	bic.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	2101      	movs	r1, #1
 80031c0:	fa01 f202 	lsl.w	r2, r1, r2
 80031c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	2204      	movs	r2, #4
 8003202:	409a      	lsls	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d024      	beq.n	8003256 <HAL_DMA_IRQHandler+0x72>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d01f      	beq.n	8003256 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d107      	bne.n	8003234 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0204 	bic.w	r2, r2, #4
 8003232:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	2104      	movs	r1, #4
 800323e:	fa01 f202 	lsl.w	r2, r1, r2
 8003242:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	2b00      	cmp	r3, #0
 800324a:	d066      	beq.n	800331a <HAL_DMA_IRQHandler+0x136>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003254:	e061      	b.n	800331a <HAL_DMA_IRQHandler+0x136>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	2202      	movs	r2, #2
 800325c:	409a      	lsls	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d028      	beq.n	80032b8 <HAL_DMA_IRQHandler+0xd4>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d023      	beq.n	80032b8 <HAL_DMA_IRQHandler+0xd4>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d107      	bne.n	800328e <HAL_DMA_IRQHandler+0xaa>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 020a 	bic.w	r2, r2, #10
 800328c:	601a      	str	r2, [r3, #0]
  		/* Change the DMA state */
  		//hdma->State = HAL_DMA_STATE_READY;
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	2102      	movs	r1, #2
 8003298:	fa01 f202 	lsl.w	r2, r1, r2
 800329c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d035      	beq.n	800331a <HAL_DMA_IRQHandler+0x136>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80032b6:	e030      	b.n	800331a <HAL_DMA_IRQHandler+0x136>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	2208      	movs	r2, #8
 80032be:	409a      	lsls	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d028      	beq.n	800331a <HAL_DMA_IRQHandler+0x136>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d023      	beq.n	800331a <HAL_DMA_IRQHandler+0x136>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 020e 	bic.w	r2, r2, #14
 80032e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ea:	2101      	movs	r1, #1
 80032ec:	fa01 f202 	lsl.w	r2, r1, r2
 80032f0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <HAL_DMA_IRQHandler+0x136>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
    }
  }
}  
 8003318:	e7ff      	b.n	800331a <HAL_DMA_IRQHandler+0x136>
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003322:	b480      	push	{r7}
 8003324:	b085      	sub	sp, #20
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003338:	2101      	movs	r1, #1
 800333a:	fa01 f202 	lsl.w	r2, r1, r2
 800333e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b10      	cmp	r3, #16
 800334e:	d108      	bne.n	8003362 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003360:	e007      	b.n	8003372 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	60da      	str	r2, [r3, #12]
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <DMA_CalcBaseAndBitshift+0x60>)
 8003390:	429a      	cmp	r2, r3
 8003392:	d80f      	bhi.n	80033b4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <DMA_CalcBaseAndBitshift+0x64>)
 800339c:	4413      	add	r3, r2
 800339e:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <DMA_CalcBaseAndBitshift+0x68>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	009a      	lsls	r2, r3, #2
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a0f      	ldr	r2, [pc, #60]	; (80033ec <DMA_CalcBaseAndBitshift+0x6c>)
 80033b0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80033b2:	e00e      	b.n	80033d2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <DMA_CalcBaseAndBitshift+0x70>)
 80033bc:	4413      	add	r3, r2
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <DMA_CalcBaseAndBitshift+0x68>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	009a      	lsls	r2, r3, #2
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <DMA_CalcBaseAndBitshift+0x74>)
 80033d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40020407 	.word	0x40020407
 80033e4:	bffdfff8 	.word	0xbffdfff8
 80033e8:	cccccccd 	.word	0xcccccccd
 80033ec:	40020000 	.word	0x40020000
 80033f0:	bffdfbf8 	.word	0xbffdfbf8
 80033f4:	40020400 	.word	0x40020400

080033f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003406:	e160      	b.n	80036ca <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	2101      	movs	r1, #1
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	fa01 f303 	lsl.w	r3, r1, r3
 8003414:	4013      	ands	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8152 	beq.w	80036c4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d003      	beq.n	8003430 <HAL_GPIO_Init+0x38>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b12      	cmp	r3, #18
 800342e:	d123      	bne.n	8003478 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	08da      	lsrs	r2, r3, #3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3208      	adds	r2, #8
 8003438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	220f      	movs	r2, #15
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4013      	ands	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	08da      	lsrs	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3208      	adds	r2, #8
 8003472:	6939      	ldr	r1, [r7, #16]
 8003474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	2203      	movs	r2, #3
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4013      	ands	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0203 	and.w	r2, r3, #3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d00b      	beq.n	80034cc <HAL_GPIO_Init+0xd4>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d007      	beq.n	80034cc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034c0:	2b11      	cmp	r3, #17
 80034c2:	d003      	beq.n	80034cc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b12      	cmp	r3, #18
 80034ca:	d130      	bne.n	800352e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003502:	2201      	movs	r2, #1
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	f003 0201 	and.w	r2, r3, #1
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	2203      	movs	r2, #3
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4013      	ands	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80ac 	beq.w	80036c4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800356c:	4b5e      	ldr	r3, [pc, #376]	; (80036e8 <HAL_GPIO_Init+0x2f0>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	4a5d      	ldr	r2, [pc, #372]	; (80036e8 <HAL_GPIO_Init+0x2f0>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6193      	str	r3, [r2, #24]
 8003578:	4b5b      	ldr	r3, [pc, #364]	; (80036e8 <HAL_GPIO_Init+0x2f0>)
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003584:	4a59      	ldr	r2, [pc, #356]	; (80036ec <HAL_GPIO_Init+0x2f4>)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	089b      	lsrs	r3, r3, #2
 800358a:	3302      	adds	r3, #2
 800358c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003590:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	220f      	movs	r2, #15
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4013      	ands	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035ae:	d025      	beq.n	80035fc <HAL_GPIO_Init+0x204>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a4f      	ldr	r2, [pc, #316]	; (80036f0 <HAL_GPIO_Init+0x2f8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d01f      	beq.n	80035f8 <HAL_GPIO_Init+0x200>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a4e      	ldr	r2, [pc, #312]	; (80036f4 <HAL_GPIO_Init+0x2fc>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d019      	beq.n	80035f4 <HAL_GPIO_Init+0x1fc>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a4d      	ldr	r2, [pc, #308]	; (80036f8 <HAL_GPIO_Init+0x300>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d013      	beq.n	80035f0 <HAL_GPIO_Init+0x1f8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a4c      	ldr	r2, [pc, #304]	; (80036fc <HAL_GPIO_Init+0x304>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00d      	beq.n	80035ec <HAL_GPIO_Init+0x1f4>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a4b      	ldr	r2, [pc, #300]	; (8003700 <HAL_GPIO_Init+0x308>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d007      	beq.n	80035e8 <HAL_GPIO_Init+0x1f0>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a4a      	ldr	r2, [pc, #296]	; (8003704 <HAL_GPIO_Init+0x30c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d101      	bne.n	80035e4 <HAL_GPIO_Init+0x1ec>
 80035e0:	2306      	movs	r3, #6
 80035e2:	e00c      	b.n	80035fe <HAL_GPIO_Init+0x206>
 80035e4:	2307      	movs	r3, #7
 80035e6:	e00a      	b.n	80035fe <HAL_GPIO_Init+0x206>
 80035e8:	2305      	movs	r3, #5
 80035ea:	e008      	b.n	80035fe <HAL_GPIO_Init+0x206>
 80035ec:	2304      	movs	r3, #4
 80035ee:	e006      	b.n	80035fe <HAL_GPIO_Init+0x206>
 80035f0:	2303      	movs	r3, #3
 80035f2:	e004      	b.n	80035fe <HAL_GPIO_Init+0x206>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e002      	b.n	80035fe <HAL_GPIO_Init+0x206>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <HAL_GPIO_Init+0x206>
 80035fc:	2300      	movs	r3, #0
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	f002 0203 	and.w	r2, r2, #3
 8003604:	0092      	lsls	r2, r2, #2
 8003606:	4093      	lsls	r3, r2
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800360e:	4937      	ldr	r1, [pc, #220]	; (80036ec <HAL_GPIO_Init+0x2f4>)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	089b      	lsrs	r3, r3, #2
 8003614:	3302      	adds	r3, #2
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800361c:	4b3a      	ldr	r3, [pc, #232]	; (8003708 <HAL_GPIO_Init+0x310>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	43db      	mvns	r3, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4013      	ands	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003640:	4a31      	ldr	r2, [pc, #196]	; (8003708 <HAL_GPIO_Init+0x310>)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003646:	4b30      	ldr	r3, [pc, #192]	; (8003708 <HAL_GPIO_Init+0x310>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	43db      	mvns	r3, r3
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4013      	ands	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800366a:	4a27      	ldr	r2, [pc, #156]	; (8003708 <HAL_GPIO_Init+0x310>)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003670:	4b25      	ldr	r3, [pc, #148]	; (8003708 <HAL_GPIO_Init+0x310>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	43db      	mvns	r3, r3
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4013      	ands	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003694:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <HAL_GPIO_Init+0x310>)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800369a:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <HAL_GPIO_Init+0x310>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	43db      	mvns	r3, r3
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4013      	ands	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80036be:	4a12      	ldr	r2, [pc, #72]	; (8003708 <HAL_GPIO_Init+0x310>)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	3301      	adds	r3, #1
 80036c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f47f ae97 	bne.w	8003408 <HAL_GPIO_Init+0x10>
  }
}
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40010000 	.word	0x40010000
 80036f0:	48000400 	.word	0x48000400
 80036f4:	48000800 	.word	0x48000800
 80036f8:	48000c00 	.word	0x48000c00
 80036fc:	48001000 	.word	0x48001000
 8003700:	48001400 	.word	0x48001400
 8003704:	48001800 	.word	0x48001800
 8003708:	40010400 	.word	0x40010400

0800370c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	807b      	strh	r3, [r7, #2]
 8003718:	4613      	mov	r3, r2
 800371a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800371c:	787b      	ldrb	r3, [r7, #1]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003722:	887a      	ldrh	r2, [r7, #2]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003728:	e002      	b.n	8003730 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800372a:	887a      	ldrh	r2, [r7, #2]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003742:	af00      	add	r7, sp, #0
 8003744:	1d3b      	adds	r3, r7, #4
 8003746:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	f000 bf01 	b.w	8004558 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003756:	1d3b      	adds	r3, r7, #4
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8160 	beq.w	8003a26 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003766:	4bae      	ldr	r3, [pc, #696]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b04      	cmp	r3, #4
 8003770:	d00c      	beq.n	800378c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003772:	4bab      	ldr	r3, [pc, #684]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b08      	cmp	r3, #8
 800377c:	d159      	bne.n	8003832 <HAL_RCC_OscConfig+0xf6>
 800377e:	4ba8      	ldr	r3, [pc, #672]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378a:	d152      	bne.n	8003832 <HAL_RCC_OscConfig+0xf6>
 800378c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003790:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037a0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a4:	fab3 f383 	clz	r3, r3
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d102      	bne.n	80037be <HAL_RCC_OscConfig+0x82>
 80037b8:	4b99      	ldr	r3, [pc, #612]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	e015      	b.n	80037ea <HAL_RCC_OscConfig+0xae>
 80037be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037c2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80037ca:	fa93 f3a3 	rbit	r3, r3
 80037ce:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80037d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037d6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80037da:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80037de:	fa93 f3a3 	rbit	r3, r3
 80037e2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80037e6:	4b8e      	ldr	r3, [pc, #568]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037ee:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80037f2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80037f6:	fa92 f2a2 	rbit	r2, r2
 80037fa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80037fe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003802:	fab2 f282 	clz	r2, r2
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	f042 0220 	orr.w	r2, r2, #32
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	f002 021f 	and.w	r2, r2, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8102 	beq.w	8003a24 <HAL_RCC_OscConfig+0x2e8>
 8003820:	1d3b      	adds	r3, r7, #4
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	f040 80fc 	bne.w	8003a24 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f000 be93 	b.w	8004558 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003832:	1d3b      	adds	r3, r7, #4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383c:	d106      	bne.n	800384c <HAL_RCC_OscConfig+0x110>
 800383e:	4b78      	ldr	r3, [pc, #480]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a77      	ldr	r2, [pc, #476]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 8003844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e030      	b.n	80038ae <HAL_RCC_OscConfig+0x172>
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10c      	bne.n	8003870 <HAL_RCC_OscConfig+0x134>
 8003856:	4b72      	ldr	r3, [pc, #456]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a71      	ldr	r2, [pc, #452]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 800385c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b6f      	ldr	r3, [pc, #444]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a6e      	ldr	r2, [pc, #440]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 8003868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e01e      	b.n	80038ae <HAL_RCC_OscConfig+0x172>
 8003870:	1d3b      	adds	r3, r7, #4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800387a:	d10c      	bne.n	8003896 <HAL_RCC_OscConfig+0x15a>
 800387c:	4b68      	ldr	r3, [pc, #416]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a67      	ldr	r2, [pc, #412]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 8003882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	4b65      	ldr	r3, [pc, #404]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a64      	ldr	r2, [pc, #400]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 800388e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e00b      	b.n	80038ae <HAL_RCC_OscConfig+0x172>
 8003896:	4b62      	ldr	r3, [pc, #392]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a61      	ldr	r2, [pc, #388]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 800389c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	4b5f      	ldr	r3, [pc, #380]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a5e      	ldr	r2, [pc, #376]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 80038a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ac:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038ae:	1d3b      	adds	r3, r7, #4
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d059      	beq.n	800396c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fd feaa 	bl	8001610 <HAL_GetTick>
 80038bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c2:	f7fd fea5 	bl	8001610 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	; 0x64
 80038d0:	d902      	bls.n	80038d8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	f000 be40 	b.w	8004558 <HAL_RCC_OscConfig+0xe1c>
 80038d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038dc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80038e4:	fa93 f3a3 	rbit	r3, r3
 80038e8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80038ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f0:	fab3 f383 	clz	r3, r3
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d102      	bne.n	800390a <HAL_RCC_OscConfig+0x1ce>
 8003904:	4b46      	ldr	r3, [pc, #280]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	e015      	b.n	8003936 <HAL_RCC_OscConfig+0x1fa>
 800390a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800390e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800391e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003922:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003926:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003932:	4b3b      	ldr	r3, [pc, #236]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800393a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800393e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003942:	fa92 f2a2 	rbit	r2, r2
 8003946:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800394a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800394e:	fab2 f282 	clz	r2, r2
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	f042 0220 	orr.w	r2, r2, #32
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	f002 021f 	and.w	r2, r2, #31
 800395e:	2101      	movs	r1, #1
 8003960:	fa01 f202 	lsl.w	r2, r1, r2
 8003964:	4013      	ands	r3, r2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0ab      	beq.n	80038c2 <HAL_RCC_OscConfig+0x186>
 800396a:	e05c      	b.n	8003a26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7fd fe50 	bl	8001610 <HAL_GetTick>
 8003970:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003974:	e00a      	b.n	800398c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003976:	f7fd fe4b 	bl	8001610 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	; 0x64
 8003984:	d902      	bls.n	800398c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	f000 bde6 	b.w	8004558 <HAL_RCC_OscConfig+0xe1c>
 800398c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003990:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80039a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a4:	fab3 f383 	clz	r3, r3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d102      	bne.n	80039be <HAL_RCC_OscConfig+0x282>
 80039b8:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	e015      	b.n	80039ea <HAL_RCC_OscConfig+0x2ae>
 80039be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039c2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80039ca:	fa93 f3a3 	rbit	r3, r3
 80039ce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80039d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039d6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80039da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039de:	fa93 f3a3 	rbit	r3, r3
 80039e2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80039e6:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <HAL_RCC_OscConfig+0x2e4>)
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039ee:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80039f2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80039f6:	fa92 f2a2 	rbit	r2, r2
 80039fa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80039fe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003a02:	fab2 f282 	clz	r2, r2
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	f042 0220 	orr.w	r2, r2, #32
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	f002 021f 	and.w	r2, r2, #31
 8003a12:	2101      	movs	r1, #1
 8003a14:	fa01 f202 	lsl.w	r2, r1, r2
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1ab      	bne.n	8003976 <HAL_RCC_OscConfig+0x23a>
 8003a1e:	e002      	b.n	8003a26 <HAL_RCC_OscConfig+0x2ea>
 8003a20:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a26:	1d3b      	adds	r3, r7, #4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8170 	beq.w	8003d16 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a36:	4bd0      	ldr	r3, [pc, #832]	; (8003d78 <HAL_RCC_OscConfig+0x63c>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00c      	beq.n	8003a5c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a42:	4bcd      	ldr	r3, [pc, #820]	; (8003d78 <HAL_RCC_OscConfig+0x63c>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d16d      	bne.n	8003b2a <HAL_RCC_OscConfig+0x3ee>
 8003a4e:	4bca      	ldr	r3, [pc, #808]	; (8003d78 <HAL_RCC_OscConfig+0x63c>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5a:	d166      	bne.n	8003b2a <HAL_RCC_OscConfig+0x3ee>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a62:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003a66:	fa93 f3a3 	rbit	r3, r3
 8003a6a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003a6e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d102      	bne.n	8003a8c <HAL_RCC_OscConfig+0x350>
 8003a86:	4bbc      	ldr	r3, [pc, #752]	; (8003d78 <HAL_RCC_OscConfig+0x63c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	e013      	b.n	8003ab4 <HAL_RCC_OscConfig+0x378>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003aa4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003ab0:	4bb1      	ldr	r3, [pc, #708]	; (8003d78 <HAL_RCC_OscConfig+0x63c>)
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003aba:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003abe:	fa92 f2a2 	rbit	r2, r2
 8003ac2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003ac6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003aca:	fab2 f282 	clz	r2, r2
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	f042 0220 	orr.w	r2, r2, #32
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	f002 021f 	and.w	r2, r2, #31
 8003ada:	2101      	movs	r1, #1
 8003adc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <HAL_RCC_OscConfig+0x3ba>
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d002      	beq.n	8003af6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f000 bd31 	b.w	8004558 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af6:	4ba0      	ldr	r3, [pc, #640]	; (8003d78 <HAL_RCC_OscConfig+0x63c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003afe:	1d3b      	adds	r3, r7, #4
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	21f8      	movs	r1, #248	; 0xf8
 8003b06:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003b0e:	fa91 f1a1 	rbit	r1, r1
 8003b12:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003b16:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003b1a:	fab1 f181 	clz	r1, r1
 8003b1e:	b2c9      	uxtb	r1, r1
 8003b20:	408b      	lsls	r3, r1
 8003b22:	4995      	ldr	r1, [pc, #596]	; (8003d78 <HAL_RCC_OscConfig+0x63c>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b28:	e0f5      	b.n	8003d16 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b2a:	1d3b      	adds	r3, r7, #4
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 8085 	beq.w	8003c40 <HAL_RCC_OscConfig+0x504>
 8003b36:	2301      	movs	r3, #1
 8003b38:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003b40:	fa93 f3a3 	rbit	r3, r3
 8003b44:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003b48:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b4c:	fab3 f383 	clz	r3, r3
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	2301      	movs	r3, #1
 8003b60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b62:	f7fd fd55 	bl	8001610 <HAL_GetTick>
 8003b66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b6c:	f7fd fd50 	bl	8001610 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d902      	bls.n	8003b82 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	f000 bceb 	b.w	8004558 <HAL_RCC_OscConfig+0xe1c>
 8003b82:	2302      	movs	r3, #2
 8003b84:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 8003b90:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003b94:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b98:	fab3 f383 	clz	r3, r3
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d102      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x476>
 8003bac:	4b72      	ldr	r3, [pc, #456]	; (8003d78 <HAL_RCC_OscConfig+0x63c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	e013      	b.n	8003bda <HAL_RCC_OscConfig+0x49e>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003bbc:	fa93 f3a3 	rbit	r3, r3
 8003bc0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003bca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003bce:	fa93 f3a3 	rbit	r3, r3
 8003bd2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003bd6:	4b68      	ldr	r3, [pc, #416]	; (8003d78 <HAL_RCC_OscConfig+0x63c>)
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003be0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003be4:	fa92 f2a2 	rbit	r2, r2
 8003be8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003bec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003bf0:	fab2 f282 	clz	r2, r2
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	f042 0220 	orr.w	r2, r2, #32
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	f002 021f 	and.w	r2, r2, #31
 8003c00:	2101      	movs	r1, #1
 8003c02:	fa01 f202 	lsl.w	r2, r1, r2
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0af      	beq.n	8003b6c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0c:	4b5a      	ldr	r3, [pc, #360]	; (8003d78 <HAL_RCC_OscConfig+0x63c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c14:	1d3b      	adds	r3, r7, #4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	21f8      	movs	r1, #248	; 0xf8
 8003c1c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003c24:	fa91 f1a1 	rbit	r1, r1
 8003c28:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003c2c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003c30:	fab1 f181 	clz	r1, r1
 8003c34:	b2c9      	uxtb	r1, r1
 8003c36:	408b      	lsls	r3, r1
 8003c38:	494f      	ldr	r1, [pc, #316]	; (8003d78 <HAL_RCC_OscConfig+0x63c>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]
 8003c3e:	e06a      	b.n	8003d16 <HAL_RCC_OscConfig+0x5da>
 8003c40:	2301      	movs	r3, #1
 8003c42:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003c4a:	fa93 f3a3 	rbit	r3, r3
 8003c4e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003c52:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c56:	fab3 f383 	clz	r3, r3
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	461a      	mov	r2, r3
 8003c68:	2300      	movs	r3, #0
 8003c6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7fd fcd0 	bl	8001610 <HAL_GetTick>
 8003c70:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c74:	e00a      	b.n	8003c8c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c76:	f7fd fccb 	bl	8001610 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d902      	bls.n	8003c8c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	f000 bc66 	b.w	8004558 <HAL_RCC_OscConfig+0xe1c>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c96:	fa93 f3a3 	rbit	r3, r3
 8003c9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003c9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca2:	fab3 f383 	clz	r3, r3
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d102      	bne.n	8003cbc <HAL_RCC_OscConfig+0x580>
 8003cb6:	4b30      	ldr	r3, [pc, #192]	; (8003d78 <HAL_RCC_OscConfig+0x63c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	e013      	b.n	8003ce4 <HAL_RCC_OscConfig+0x5a8>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cc6:	fa93 f3a3 	rbit	r3, r3
 8003cca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003cce:	2302      	movs	r3, #2
 8003cd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003cd4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003cd8:	fa93 f3a3 	rbit	r3, r3
 8003cdc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ce0:	4b25      	ldr	r3, [pc, #148]	; (8003d78 <HAL_RCC_OscConfig+0x63c>)
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003cea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003cee:	fa92 f2a2 	rbit	r2, r2
 8003cf2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003cf6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003cfa:	fab2 f282 	clz	r2, r2
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	f042 0220 	orr.w	r2, r2, #32
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	f002 021f 	and.w	r2, r2, #31
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1af      	bne.n	8003c76 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80da 	beq.w	8003eda <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d26:	1d3b      	adds	r3, r7, #4
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d069      	beq.n	8003e04 <HAL_RCC_OscConfig+0x6c8>
 8003d30:	2301      	movs	r3, #1
 8003d32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d3a:	fa93 f3a3 	rbit	r3, r3
 8003d3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003d42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_OscConfig+0x640>)
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	461a      	mov	r2, r3
 8003d56:	2301      	movs	r3, #1
 8003d58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5a:	f7fd fc59 	bl	8001610 <HAL_GetTick>
 8003d5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d62:	e00d      	b.n	8003d80 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d64:	f7fd fc54 	bl	8001610 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d905      	bls.n	8003d80 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e3ef      	b.n	8004558 <HAL_RCC_OscConfig+0xe1c>
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	10908120 	.word	0x10908120
 8003d80:	2302      	movs	r3, #2
 8003d82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d8a:	fa93 f2a3 	rbit	r2, r3
 8003d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003d98:	2202      	movs	r2, #2
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	fa93 f2a3 	rbit	r2, r3
 8003da6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003db0:	2202      	movs	r2, #2
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	fa93 f2a3 	rbit	r2, r3
 8003dbe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003dc2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc4:	4ba4      	ldr	r3, [pc, #656]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dc8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003dcc:	2102      	movs	r1, #2
 8003dce:	6019      	str	r1, [r3, #0]
 8003dd0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	fa93 f1a3 	rbit	r1, r3
 8003dda:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003dde:	6019      	str	r1, [r3, #0]
  return result;
 8003de0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	2101      	movs	r1, #1
 8003df8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0b0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x628>
 8003e02:	e06a      	b.n	8003eda <HAL_RCC_OscConfig+0x79e>
 8003e04:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	fa93 f2a3 	rbit	r2, r3
 8003e16:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003e1a:	601a      	str	r2, [r3, #0]
  return result;
 8003e1c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003e20:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e22:	fab3 f383 	clz	r3, r3
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4b8c      	ldr	r3, [pc, #560]	; (800405c <HAL_RCC_OscConfig+0x920>)
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	461a      	mov	r2, r3
 8003e32:	2300      	movs	r3, #0
 8003e34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e36:	f7fd fbeb 	bl	8001610 <HAL_GetTick>
 8003e3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e3e:	e009      	b.n	8003e54 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e40:	f7fd fbe6 	bl	8001610 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e381      	b.n	8004558 <HAL_RCC_OscConfig+0xe1c>
 8003e54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003e58:	2202      	movs	r2, #2
 8003e5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	fa93 f2a3 	rbit	r2, r3
 8003e66:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003e70:	2202      	movs	r2, #2
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	fa93 f2a3 	rbit	r2, r3
 8003e7e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003e88:	2202      	movs	r2, #2
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	fa93 f2a3 	rbit	r2, r3
 8003e96:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003e9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9c:	4b6e      	ldr	r3, [pc, #440]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ea0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	6019      	str	r1, [r3, #0]
 8003ea8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	fa93 f1a3 	rbit	r1, r3
 8003eb2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003eb6:	6019      	str	r1, [r3, #0]
  return result;
 8003eb8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	2101      	movs	r1, #1
 8003ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1b2      	bne.n	8003e40 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eda:	1d3b      	adds	r3, r7, #4
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8157 	beq.w	8004198 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ef0:	4b59      	ldr	r3, [pc, #356]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d112      	bne.n	8003f22 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efc:	4b56      	ldr	r3, [pc, #344]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	4a55      	ldr	r2, [pc, #340]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f06:	61d3      	str	r3, [r2, #28]
 8003f08:	4b53      	ldr	r3, [pc, #332]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003f10:	f107 030c 	add.w	r3, r7, #12
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	f107 030c 	add.w	r3, r7, #12
 8003f1a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f22:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <HAL_RCC_OscConfig+0x924>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d11a      	bne.n	8003f64 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f2e:	4b4c      	ldr	r3, [pc, #304]	; (8004060 <HAL_RCC_OscConfig+0x924>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a4b      	ldr	r2, [pc, #300]	; (8004060 <HAL_RCC_OscConfig+0x924>)
 8003f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3a:	f7fd fb69 	bl	8001610 <HAL_GetTick>
 8003f3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f42:	e009      	b.n	8003f58 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f44:	f7fd fb64 	bl	8001610 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b64      	cmp	r3, #100	; 0x64
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e2ff      	b.n	8004558 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f58:	4b41      	ldr	r3, [pc, #260]	; (8004060 <HAL_RCC_OscConfig+0x924>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0ef      	beq.n	8003f44 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f64:	1d3b      	adds	r3, r7, #4
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d106      	bne.n	8003f7c <HAL_RCC_OscConfig+0x840>
 8003f6e:	4b3a      	ldr	r3, [pc, #232]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	4a39      	ldr	r2, [pc, #228]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003f74:	f043 0301 	orr.w	r3, r3, #1
 8003f78:	6213      	str	r3, [r2, #32]
 8003f7a:	e02f      	b.n	8003fdc <HAL_RCC_OscConfig+0x8a0>
 8003f7c:	1d3b      	adds	r3, r7, #4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x864>
 8003f86:	4b34      	ldr	r3, [pc, #208]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	4a33      	ldr	r2, [pc, #204]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	6213      	str	r3, [r2, #32]
 8003f92:	4b31      	ldr	r3, [pc, #196]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	4a30      	ldr	r2, [pc, #192]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	6213      	str	r3, [r2, #32]
 8003f9e:	e01d      	b.n	8003fdc <HAL_RCC_OscConfig+0x8a0>
 8003fa0:	1d3b      	adds	r3, r7, #4
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b05      	cmp	r3, #5
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x888>
 8003faa:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	4a2a      	ldr	r2, [pc, #168]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003fb0:	f043 0304 	orr.w	r3, r3, #4
 8003fb4:	6213      	str	r3, [r2, #32]
 8003fb6:	4b28      	ldr	r3, [pc, #160]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	4a27      	ldr	r2, [pc, #156]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	6213      	str	r3, [r2, #32]
 8003fc2:	e00b      	b.n	8003fdc <HAL_RCC_OscConfig+0x8a0>
 8003fc4:	4b24      	ldr	r3, [pc, #144]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	4a23      	ldr	r2, [pc, #140]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	6213      	str	r3, [r2, #32]
 8003fd0:	4b21      	ldr	r3, [pc, #132]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	4a20      	ldr	r2, [pc, #128]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8003fd6:	f023 0304 	bic.w	r3, r3, #4
 8003fda:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fdc:	1d3b      	adds	r3, r7, #4
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d06a      	beq.n	80040bc <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe6:	f7fd fb13 	bl	8001610 <HAL_GetTick>
 8003fea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fee:	e00b      	b.n	8004008 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff0:	f7fd fb0e 	bl	8001610 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004000:	4293      	cmp	r3, r2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e2a7      	b.n	8004558 <HAL_RCC_OscConfig+0xe1c>
 8004008:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800400c:	2202      	movs	r2, #2
 800400e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004010:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	fa93 f2a3 	rbit	r2, r3
 800401a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004024:	2202      	movs	r2, #2
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	fa93 f2a3 	rbit	r2, r3
 8004032:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004036:	601a      	str	r2, [r3, #0]
  return result;
 8004038:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800403c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403e:	fab3 f383 	clz	r3, r3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	095b      	lsrs	r3, r3, #5
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f043 0302 	orr.w	r3, r3, #2
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d108      	bne.n	8004064 <HAL_RCC_OscConfig+0x928>
 8004052:	4b01      	ldr	r3, [pc, #4]	; (8004058 <HAL_RCC_OscConfig+0x91c>)
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	e013      	b.n	8004080 <HAL_RCC_OscConfig+0x944>
 8004058:	40021000 	.word	0x40021000
 800405c:	10908120 	.word	0x10908120
 8004060:	40007000 	.word	0x40007000
 8004064:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004068:	2202      	movs	r2, #2
 800406a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	fa93 f2a3 	rbit	r2, r3
 8004076:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	4bc0      	ldr	r3, [pc, #768]	; (8004380 <HAL_RCC_OscConfig+0xc44>)
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004084:	2102      	movs	r1, #2
 8004086:	6011      	str	r1, [r2, #0]
 8004088:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	fa92 f1a2 	rbit	r1, r2
 8004092:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004096:	6011      	str	r1, [r2, #0]
  return result;
 8004098:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	fab2 f282 	clz	r2, r2
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	f002 021f 	and.w	r2, r2, #31
 80040ae:	2101      	movs	r1, #1
 80040b0:	fa01 f202 	lsl.w	r2, r1, r2
 80040b4:	4013      	ands	r3, r2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d09a      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x8b4>
 80040ba:	e063      	b.n	8004184 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040bc:	f7fd faa8 	bl	8001610 <HAL_GetTick>
 80040c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c4:	e00b      	b.n	80040de <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fd faa3 	bl	8001610 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e23c      	b.n	8004558 <HAL_RCC_OscConfig+0xe1c>
 80040de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80040e2:	2202      	movs	r2, #2
 80040e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	fa93 f2a3 	rbit	r2, r3
 80040f0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80040fa:	2202      	movs	r2, #2
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	fa93 f2a3 	rbit	r2, r3
 8004108:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800410c:	601a      	str	r2, [r3, #0]
  return result;
 800410e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004112:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004114:	fab3 f383 	clz	r3, r3
 8004118:	b2db      	uxtb	r3, r3
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f043 0302 	orr.w	r3, r3, #2
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d102      	bne.n	800412e <HAL_RCC_OscConfig+0x9f2>
 8004128:	4b95      	ldr	r3, [pc, #596]	; (8004380 <HAL_RCC_OscConfig+0xc44>)
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	e00d      	b.n	800414a <HAL_RCC_OscConfig+0xa0e>
 800412e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004132:	2202      	movs	r2, #2
 8004134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	fa93 f2a3 	rbit	r2, r3
 8004140:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	4b8e      	ldr	r3, [pc, #568]	; (8004380 <HAL_RCC_OscConfig+0xc44>)
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800414e:	2102      	movs	r1, #2
 8004150:	6011      	str	r1, [r2, #0]
 8004152:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	fa92 f1a2 	rbit	r1, r2
 800415c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004160:	6011      	str	r1, [r2, #0]
  return result;
 8004162:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	fab2 f282 	clz	r2, r2
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	f002 021f 	and.w	r2, r2, #31
 8004178:	2101      	movs	r1, #1
 800417a:	fa01 f202 	lsl.w	r2, r1, r2
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1a0      	bne.n	80040c6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004184:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004188:	2b01      	cmp	r3, #1
 800418a:	d105      	bne.n	8004198 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418c:	4b7c      	ldr	r3, [pc, #496]	; (8004380 <HAL_RCC_OscConfig+0xc44>)
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	4a7b      	ldr	r2, [pc, #492]	; (8004380 <HAL_RCC_OscConfig+0xc44>)
 8004192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004196:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004198:	1d3b      	adds	r3, r7, #4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 81d9 	beq.w	8004556 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041a4:	4b76      	ldr	r3, [pc, #472]	; (8004380 <HAL_RCC_OscConfig+0xc44>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	f000 81a6 	beq.w	80044fe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041b2:	1d3b      	adds	r3, r7, #4
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	f040 811e 	bne.w	80043fa <HAL_RCC_OscConfig+0xcbe>
 80041be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80041c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	fa93 f2a3 	rbit	r2, r3
 80041d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80041d6:	601a      	str	r2, [r3, #0]
  return result;
 80041d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80041dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041de:	fab3 f383 	clz	r3, r3
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	461a      	mov	r2, r3
 80041f0:	2300      	movs	r3, #0
 80041f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fd fa0c 	bl	8001610 <HAL_GetTick>
 80041f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041fc:	e009      	b.n	8004212 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fe:	f7fd fa07 	bl	8001610 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e1a2      	b.n	8004558 <HAL_RCC_OscConfig+0xe1c>
 8004212:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004216:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800421a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	fa93 f2a3 	rbit	r2, r3
 8004226:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800422a:	601a      	str	r2, [r3, #0]
  return result;
 800422c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004230:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004232:	fab3 f383 	clz	r3, r3
 8004236:	b2db      	uxtb	r3, r3
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b01      	cmp	r3, #1
 8004244:	d102      	bne.n	800424c <HAL_RCC_OscConfig+0xb10>
 8004246:	4b4e      	ldr	r3, [pc, #312]	; (8004380 <HAL_RCC_OscConfig+0xc44>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	e01b      	b.n	8004284 <HAL_RCC_OscConfig+0xb48>
 800424c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004250:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004254:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004256:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	fa93 f2a3 	rbit	r2, r3
 8004260:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800426a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	fa93 f2a3 	rbit	r2, r3
 800427a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	4b3f      	ldr	r3, [pc, #252]	; (8004380 <HAL_RCC_OscConfig+0xc44>)
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004288:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800428c:	6011      	str	r1, [r2, #0]
 800428e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	fa92 f1a2 	rbit	r1, r2
 8004298:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800429c:	6011      	str	r1, [r2, #0]
  return result;
 800429e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	fab2 f282 	clz	r2, r2
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	f042 0220 	orr.w	r2, r2, #32
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	f002 021f 	and.w	r2, r2, #31
 80042b4:	2101      	movs	r1, #1
 80042b6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d19e      	bne.n	80041fe <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042c0:	4b2f      	ldr	r3, [pc, #188]	; (8004380 <HAL_RCC_OscConfig+0xc44>)
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	f023 020f 	bic.w	r2, r3, #15
 80042c8:	1d3b      	adds	r3, r7, #4
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	492c      	ldr	r1, [pc, #176]	; (8004380 <HAL_RCC_OscConfig+0xc44>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80042d4:	4b2a      	ldr	r3, [pc, #168]	; (8004380 <HAL_RCC_OscConfig+0xc44>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80042dc:	1d3b      	adds	r3, r7, #4
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6a19      	ldr	r1, [r3, #32]
 80042e2:	1d3b      	adds	r3, r7, #4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	430b      	orrs	r3, r1
 80042ea:	4925      	ldr	r1, [pc, #148]	; (8004380 <HAL_RCC_OscConfig+0xc44>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	604b      	str	r3, [r1, #4]
 80042f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80042f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	fa93 f2a3 	rbit	r2, r3
 8004304:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004308:	601a      	str	r2, [r3, #0]
  return result;
 800430a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800430e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004310:	fab3 f383 	clz	r3, r3
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800431a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	461a      	mov	r2, r3
 8004322:	2301      	movs	r3, #1
 8004324:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004326:	f7fd f973 	bl	8001610 <HAL_GetTick>
 800432a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800432e:	e009      	b.n	8004344 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004330:	f7fd f96e 	bl	8001610 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e109      	b.n	8004558 <HAL_RCC_OscConfig+0xe1c>
 8004344:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004348:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800434c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	fa93 f2a3 	rbit	r2, r3
 8004358:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800435c:	601a      	str	r2, [r3, #0]
  return result;
 800435e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004362:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004364:	fab3 f383 	clz	r3, r3
 8004368:	b2db      	uxtb	r3, r3
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	d105      	bne.n	8004384 <HAL_RCC_OscConfig+0xc48>
 8004378:	4b01      	ldr	r3, [pc, #4]	; (8004380 <HAL_RCC_OscConfig+0xc44>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	e01e      	b.n	80043bc <HAL_RCC_OscConfig+0xc80>
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000
 8004384:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004388:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800438c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	fa93 f2a3 	rbit	r2, r3
 8004398:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80043a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	fa93 f2a3 	rbit	r2, r3
 80043b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	4b6a      	ldr	r3, [pc, #424]	; (8004564 <HAL_RCC_OscConfig+0xe28>)
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80043c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043c4:	6011      	str	r1, [r2, #0]
 80043c6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	fa92 f1a2 	rbit	r1, r2
 80043d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043d4:	6011      	str	r1, [r2, #0]
  return result;
 80043d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	fab2 f282 	clz	r2, r2
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	f042 0220 	orr.w	r2, r2, #32
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	f002 021f 	and.w	r2, r2, #31
 80043ec:	2101      	movs	r1, #1
 80043ee:	fa01 f202 	lsl.w	r2, r1, r2
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d09b      	beq.n	8004330 <HAL_RCC_OscConfig+0xbf4>
 80043f8:	e0ad      	b.n	8004556 <HAL_RCC_OscConfig+0xe1a>
 80043fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004404:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	fa93 f2a3 	rbit	r2, r3
 800440e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004412:	601a      	str	r2, [r3, #0]
  return result;
 8004414:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004418:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441a:	fab3 f383 	clz	r3, r3
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004424:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	461a      	mov	r2, r3
 800442c:	2300      	movs	r3, #0
 800442e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004430:	f7fd f8ee 	bl	8001610 <HAL_GetTick>
 8004434:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004438:	e009      	b.n	800444e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443a:	f7fd f8e9 	bl	8001610 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e084      	b.n	8004558 <HAL_RCC_OscConfig+0xe1c>
 800444e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004452:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	fa93 f2a3 	rbit	r2, r3
 8004462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004466:	601a      	str	r2, [r3, #0]
  return result;
 8004468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800446c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800446e:	fab3 f383 	clz	r3, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	d102      	bne.n	8004488 <HAL_RCC_OscConfig+0xd4c>
 8004482:	4b38      	ldr	r3, [pc, #224]	; (8004564 <HAL_RCC_OscConfig+0xe28>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	e01b      	b.n	80044c0 <HAL_RCC_OscConfig+0xd84>
 8004488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800448c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	fa93 f2a3 	rbit	r2, r3
 800449c:	f107 0320 	add.w	r3, r7, #32
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	f107 031c 	add.w	r3, r7, #28
 80044a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	f107 031c 	add.w	r3, r7, #28
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	fa93 f2a3 	rbit	r2, r3
 80044b6:	f107 0318 	add.w	r3, r7, #24
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	4b29      	ldr	r3, [pc, #164]	; (8004564 <HAL_RCC_OscConfig+0xe28>)
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	f107 0214 	add.w	r2, r7, #20
 80044c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044c8:	6011      	str	r1, [r2, #0]
 80044ca:	f107 0214 	add.w	r2, r7, #20
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	fa92 f1a2 	rbit	r1, r2
 80044d4:	f107 0210 	add.w	r2, r7, #16
 80044d8:	6011      	str	r1, [r2, #0]
  return result;
 80044da:	f107 0210 	add.w	r2, r7, #16
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	fab2 f282 	clz	r2, r2
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	f042 0220 	orr.w	r2, r2, #32
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	f002 021f 	and.w	r2, r2, #31
 80044f0:	2101      	movs	r1, #1
 80044f2:	fa01 f202 	lsl.w	r2, r1, r2
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d19e      	bne.n	800443a <HAL_RCC_OscConfig+0xcfe>
 80044fc:	e02b      	b.n	8004556 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044fe:	1d3b      	adds	r3, r7, #4
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e025      	b.n	8004558 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800450c:	4b15      	ldr	r3, [pc, #84]	; (8004564 <HAL_RCC_OscConfig+0xe28>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004514:	4b13      	ldr	r3, [pc, #76]	; (8004564 <HAL_RCC_OscConfig+0xe28>)
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800451c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004520:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004524:	1d3b      	adds	r3, r7, #4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	429a      	cmp	r2, r3
 800452c:	d111      	bne.n	8004552 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800452e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004532:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004536:	1d3b      	adds	r3, r7, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800453c:	429a      	cmp	r2, r3
 800453e:	d108      	bne.n	8004552 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004540:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004544:	f003 020f 	and.w	r2, r3, #15
 8004548:	1d3b      	adds	r3, r7, #4
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800454e:	429a      	cmp	r2, r3
 8004550:	d001      	beq.n	8004556 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40021000 	.word	0x40021000

08004568 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b09e      	sub	sp, #120	; 0x78
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e162      	b.n	8004846 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004580:	4b90      	ldr	r3, [pc, #576]	; (80047c4 <HAL_RCC_ClockConfig+0x25c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d910      	bls.n	80045b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458e:	4b8d      	ldr	r3, [pc, #564]	; (80047c4 <HAL_RCC_ClockConfig+0x25c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f023 0207 	bic.w	r2, r3, #7
 8004596:	498b      	ldr	r1, [pc, #556]	; (80047c4 <HAL_RCC_ClockConfig+0x25c>)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	4313      	orrs	r3, r2
 800459c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459e:	4b89      	ldr	r3, [pc, #548]	; (80047c4 <HAL_RCC_ClockConfig+0x25c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e14a      	b.n	8004846 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045bc:	4b82      	ldr	r3, [pc, #520]	; (80047c8 <HAL_RCC_ClockConfig+0x260>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	497f      	ldr	r1, [pc, #508]	; (80047c8 <HAL_RCC_ClockConfig+0x260>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 80dc 	beq.w	8004794 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d13c      	bne.n	800465e <HAL_RCC_ClockConfig+0xf6>
 80045e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045ec:	fa93 f3a3 	rbit	r3, r3
 80045f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80045f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f4:	fab3 f383 	clz	r3, r3
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b01      	cmp	r3, #1
 8004606:	d102      	bne.n	800460e <HAL_RCC_ClockConfig+0xa6>
 8004608:	4b6f      	ldr	r3, [pc, #444]	; (80047c8 <HAL_RCC_ClockConfig+0x260>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	e00f      	b.n	800462e <HAL_RCC_ClockConfig+0xc6>
 800460e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004612:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004614:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004616:	fa93 f3a3 	rbit	r3, r3
 800461a:	667b      	str	r3, [r7, #100]	; 0x64
 800461c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004620:	663b      	str	r3, [r7, #96]	; 0x60
 8004622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004624:	fa93 f3a3 	rbit	r3, r3
 8004628:	65fb      	str	r3, [r7, #92]	; 0x5c
 800462a:	4b67      	ldr	r3, [pc, #412]	; (80047c8 <HAL_RCC_ClockConfig+0x260>)
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004632:	65ba      	str	r2, [r7, #88]	; 0x58
 8004634:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004636:	fa92 f2a2 	rbit	r2, r2
 800463a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800463c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800463e:	fab2 f282 	clz	r2, r2
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	f042 0220 	orr.w	r2, r2, #32
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	f002 021f 	and.w	r2, r2, #31
 800464e:	2101      	movs	r1, #1
 8004650:	fa01 f202 	lsl.w	r2, r1, r2
 8004654:	4013      	ands	r3, r2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d17b      	bne.n	8004752 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e0f3      	b.n	8004846 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d13c      	bne.n	80046e0 <HAL_RCC_ClockConfig+0x178>
 8004666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800466a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800466e:	fa93 f3a3 	rbit	r3, r3
 8004672:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d102      	bne.n	8004690 <HAL_RCC_ClockConfig+0x128>
 800468a:	4b4f      	ldr	r3, [pc, #316]	; (80047c8 <HAL_RCC_ClockConfig+0x260>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	e00f      	b.n	80046b0 <HAL_RCC_ClockConfig+0x148>
 8004690:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004694:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004698:	fa93 f3a3 	rbit	r3, r3
 800469c:	647b      	str	r3, [r7, #68]	; 0x44
 800469e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046a2:	643b      	str	r3, [r7, #64]	; 0x40
 80046a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a6:	fa93 f3a3 	rbit	r3, r3
 80046aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ac:	4b46      	ldr	r3, [pc, #280]	; (80047c8 <HAL_RCC_ClockConfig+0x260>)
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80046b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046b8:	fa92 f2a2 	rbit	r2, r2
 80046bc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80046be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046c0:	fab2 f282 	clz	r2, r2
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	f042 0220 	orr.w	r2, r2, #32
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	f002 021f 	and.w	r2, r2, #31
 80046d0:	2101      	movs	r1, #1
 80046d2:	fa01 f202 	lsl.w	r2, r1, r2
 80046d6:	4013      	ands	r3, r2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d13a      	bne.n	8004752 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0b2      	b.n	8004846 <HAL_RCC_ClockConfig+0x2de>
 80046e0:	2302      	movs	r3, #2
 80046e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	fa93 f3a3 	rbit	r3, r3
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ee:	fab3 f383 	clz	r3, r3
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d102      	bne.n	8004708 <HAL_RCC_ClockConfig+0x1a0>
 8004702:	4b31      	ldr	r3, [pc, #196]	; (80047c8 <HAL_RCC_ClockConfig+0x260>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	e00d      	b.n	8004724 <HAL_RCC_ClockConfig+0x1bc>
 8004708:	2302      	movs	r3, #2
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470e:	fa93 f3a3 	rbit	r3, r3
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
 8004714:	2302      	movs	r3, #2
 8004716:	623b      	str	r3, [r7, #32]
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	fa93 f3a3 	rbit	r3, r3
 800471e:	61fb      	str	r3, [r7, #28]
 8004720:	4b29      	ldr	r3, [pc, #164]	; (80047c8 <HAL_RCC_ClockConfig+0x260>)
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	2202      	movs	r2, #2
 8004726:	61ba      	str	r2, [r7, #24]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	fa92 f2a2 	rbit	r2, r2
 800472e:	617a      	str	r2, [r7, #20]
  return result;
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	fab2 f282 	clz	r2, r2
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	f042 0220 	orr.w	r2, r2, #32
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	f002 021f 	and.w	r2, r2, #31
 8004742:	2101      	movs	r1, #1
 8004744:	fa01 f202 	lsl.w	r2, r1, r2
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e079      	b.n	8004846 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004752:	4b1d      	ldr	r3, [pc, #116]	; (80047c8 <HAL_RCC_ClockConfig+0x260>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f023 0203 	bic.w	r2, r3, #3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	491a      	ldr	r1, [pc, #104]	; (80047c8 <HAL_RCC_ClockConfig+0x260>)
 8004760:	4313      	orrs	r3, r2
 8004762:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004764:	f7fc ff54 	bl	8001610 <HAL_GetTick>
 8004768:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476a:	e00a      	b.n	8004782 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476c:	f7fc ff50 	bl	8001610 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	; 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e061      	b.n	8004846 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004782:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_RCC_ClockConfig+0x260>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f003 020c 	and.w	r2, r3, #12
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	429a      	cmp	r2, r3
 8004792:	d1eb      	bne.n	800476c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_RCC_ClockConfig+0x25c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d214      	bcs.n	80047cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a2:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <HAL_RCC_ClockConfig+0x25c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 0207 	bic.w	r2, r3, #7
 80047aa:	4906      	ldr	r1, [pc, #24]	; (80047c4 <HAL_RCC_ClockConfig+0x25c>)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b2:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <HAL_RCC_ClockConfig+0x25c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d005      	beq.n	80047cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e040      	b.n	8004846 <HAL_RCC_ClockConfig+0x2de>
 80047c4:	40022000 	.word	0x40022000
 80047c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047d8:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <HAL_RCC_ClockConfig+0x2e8>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	491a      	ldr	r1, [pc, #104]	; (8004850 <HAL_RCC_ClockConfig+0x2e8>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047f6:	4b16      	ldr	r3, [pc, #88]	; (8004850 <HAL_RCC_ClockConfig+0x2e8>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4912      	ldr	r1, [pc, #72]	; (8004850 <HAL_RCC_ClockConfig+0x2e8>)
 8004806:	4313      	orrs	r3, r2
 8004808:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800480a:	f000 f829 	bl	8004860 <HAL_RCC_GetSysClockFreq>
 800480e:	4601      	mov	r1, r0
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <HAL_RCC_ClockConfig+0x2e8>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004818:	22f0      	movs	r2, #240	; 0xf0
 800481a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	fa92 f2a2 	rbit	r2, r2
 8004822:	60fa      	str	r2, [r7, #12]
  return result;
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	fab2 f282 	clz	r2, r2
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	40d3      	lsrs	r3, r2
 800482e:	4a09      	ldr	r2, [pc, #36]	; (8004854 <HAL_RCC_ClockConfig+0x2ec>)
 8004830:	5cd3      	ldrb	r3, [r2, r3]
 8004832:	fa21 f303 	lsr.w	r3, r1, r3
 8004836:	4a08      	ldr	r2, [pc, #32]	; (8004858 <HAL_RCC_ClockConfig+0x2f0>)
 8004838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800483a:	4b08      	ldr	r3, [pc, #32]	; (800485c <HAL_RCC_ClockConfig+0x2f4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fc fea2 	bl	8001588 <HAL_InitTick>
  
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3778      	adds	r7, #120	; 0x78
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40021000 	.word	0x40021000
 8004854:	08006ac4 	.word	0x08006ac4
 8004858:	20000080 	.word	0x20000080
 800485c:	20000084 	.word	0x20000084

08004860 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004860:	b480      	push	{r7}
 8004862:	b08b      	sub	sp, #44	; 0x2c
 8004864:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
 800486a:	2300      	movs	r3, #0
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	2300      	movs	r3, #0
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800487a:	4b2a      	ldr	r3, [pc, #168]	; (8004924 <HAL_RCC_GetSysClockFreq+0xc4>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f003 030c 	and.w	r3, r3, #12
 8004886:	2b04      	cmp	r3, #4
 8004888:	d002      	beq.n	8004890 <HAL_RCC_GetSysClockFreq+0x30>
 800488a:	2b08      	cmp	r3, #8
 800488c:	d003      	beq.n	8004896 <HAL_RCC_GetSysClockFreq+0x36>
 800488e:	e03f      	b.n	8004910 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004890:	4b25      	ldr	r3, [pc, #148]	; (8004928 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004892:	623b      	str	r3, [r7, #32]
      break;
 8004894:	e03f      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800489c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80048a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	fa92 f2a2 	rbit	r2, r2
 80048a8:	607a      	str	r2, [r7, #4]
  return result;
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	fab2 f282 	clz	r2, r2
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	40d3      	lsrs	r3, r2
 80048b4:	4a1d      	ldr	r2, [pc, #116]	; (800492c <HAL_RCC_GetSysClockFreq+0xcc>)
 80048b6:	5cd3      	ldrb	r3, [r2, r3]
 80048b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80048ba:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	220f      	movs	r2, #15
 80048c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	fa92 f2a2 	rbit	r2, r2
 80048cc:	60fa      	str	r2, [r7, #12]
  return result;
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	fab2 f282 	clz	r2, r2
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	40d3      	lsrs	r3, r2
 80048d8:	4a15      	ldr	r2, [pc, #84]	; (8004930 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048da:	5cd3      	ldrb	r3, [r2, r3]
 80048dc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80048e8:	4a0f      	ldr	r2, [pc, #60]	; (8004928 <HAL_RCC_GetSysClockFreq+0xc8>)
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	fb02 f303 	mul.w	r3, r2, r3
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
 80048f8:	e007      	b.n	800490a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80048fa:	4a0b      	ldr	r2, [pc, #44]	; (8004928 <HAL_RCC_GetSysClockFreq+0xc8>)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	fb02 f303 	mul.w	r3, r2, r3
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	623b      	str	r3, [r7, #32]
      break;
 800490e:	e002      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004912:	623b      	str	r3, [r7, #32]
      break;
 8004914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004916:	6a3b      	ldr	r3, [r7, #32]
}
 8004918:	4618      	mov	r0, r3
 800491a:	372c      	adds	r7, #44	; 0x2c
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	40021000 	.word	0x40021000
 8004928:	007a1200 	.word	0x007a1200
 800492c:	08006adc 	.word	0x08006adc
 8004930:	08006aec 	.word	0x08006aec

08004934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004938:	4b03      	ldr	r3, [pc, #12]	; (8004948 <HAL_RCC_GetHCLKFreq+0x14>)
 800493a:	681b      	ldr	r3, [r3, #0]
}
 800493c:	4618      	mov	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20000080 	.word	0x20000080

0800494c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004952:	f7ff ffef 	bl	8004934 <HAL_RCC_GetHCLKFreq>
 8004956:	4601      	mov	r1, r0
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004960:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004964:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	fa92 f2a2 	rbit	r2, r2
 800496c:	603a      	str	r2, [r7, #0]
  return result;
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	fab2 f282 	clz	r2, r2
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	40d3      	lsrs	r3, r2
 8004978:	4a04      	ldr	r2, [pc, #16]	; (800498c <HAL_RCC_GetPCLK1Freq+0x40>)
 800497a:	5cd3      	ldrb	r3, [r2, r3]
 800497c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40021000 	.word	0x40021000
 800498c:	08006ad4 	.word	0x08006ad4

08004990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004996:	f7ff ffcd 	bl	8004934 <HAL_RCC_GetHCLKFreq>
 800499a:	4601      	mov	r1, r0
 800499c:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80049a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80049a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	fa92 f2a2 	rbit	r2, r2
 80049b0:	603a      	str	r2, [r7, #0]
  return result;
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	fab2 f282 	clz	r2, r2
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	40d3      	lsrs	r3, r2
 80049bc:	4a04      	ldr	r2, [pc, #16]	; (80049d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80049be:	5cd3      	ldrb	r3, [r2, r3]
 80049c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40021000 	.word	0x40021000
 80049d0:	08006ad4 	.word	0x08006ad4

080049d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b092      	sub	sp, #72	; 0x48
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80d7 	beq.w	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80049f2:	2300      	movs	r3, #0
 80049f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049f8:	4b4e      	ldr	r3, [pc, #312]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10e      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a04:	4b4b      	ldr	r3, [pc, #300]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	4a4a      	ldr	r2, [pc, #296]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	61d3      	str	r3, [r2, #28]
 8004a10:	4b48      	ldr	r3, [pc, #288]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a22:	4b45      	ldr	r3, [pc, #276]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d118      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a2e:	4b42      	ldr	r3, [pc, #264]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a41      	ldr	r2, [pc, #260]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a3a:	f7fc fde9 	bl	8001610 <HAL_GetTick>
 8004a3e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a40:	e008      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a42:	f7fc fde5 	bl	8001610 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b64      	cmp	r3, #100	; 0x64
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e1d6      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a54:	4b38      	ldr	r3, [pc, #224]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f0      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a60:	4b34      	ldr	r3, [pc, #208]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a68:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 8084 	beq.w	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d07c      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a80:	4b2c      	ldr	r3, [pc, #176]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a92:	fa93 f3a3 	rbit	r3, r3
 8004a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a9a:	fab3 f383 	clz	r3, r3
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4b26      	ldr	r3, [pc, #152]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2301      	movs	r3, #1
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ab2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab6:	fa93 f3a3 	rbit	r3, r3
 8004aba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004abe:	fab3 f383 	clz	r3, r3
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	461a      	mov	r2, r3
 8004ace:	2300      	movs	r3, #0
 8004ad0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ad2:	4a18      	ldr	r2, [pc, #96]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d04b      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae2:	f7fc fd95 	bl	8001610 <HAL_GetTick>
 8004ae6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae8:	e00a      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aea:	f7fc fd91 	bl	8001610 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e180      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004b00:	2302      	movs	r3, #2
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	fa93 f3a3 	rbit	r3, r3
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	623b      	str	r3, [r7, #32]
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	fa93 f3a3 	rbit	r3, r3
 8004b16:	61fb      	str	r3, [r7, #28]
  return result;
 8004b18:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b1a:	fab3 f383 	clz	r3, r3
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f043 0302 	orr.w	r3, r3, #2
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d108      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004b2e:	4b01      	ldr	r3, [pc, #4]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	e00d      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004b34:	40021000 	.word	0x40021000
 8004b38:	40007000 	.word	0x40007000
 8004b3c:	10908100 	.word	0x10908100
 8004b40:	2302      	movs	r3, #2
 8004b42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	fa93 f3a3 	rbit	r3, r3
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	4ba0      	ldr	r3, [pc, #640]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	2202      	movs	r2, #2
 8004b52:	613a      	str	r2, [r7, #16]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	fa92 f2a2 	rbit	r2, r2
 8004b5a:	60fa      	str	r2, [r7, #12]
  return result;
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	fab2 f282 	clz	r2, r2
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	f002 021f 	and.w	r2, r2, #31
 8004b6e:	2101      	movs	r1, #1
 8004b70:	fa01 f202 	lsl.w	r2, r1, r2
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0b7      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004b7a:	4b95      	ldr	r3, [pc, #596]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4992      	ldr	r1, [pc, #584]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d105      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b94:	4b8e      	ldr	r3, [pc, #568]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	4a8d      	ldr	r2, [pc, #564]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bac:	4b88      	ldr	r3, [pc, #544]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	f023 0203 	bic.w	r2, r3, #3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	4985      	ldr	r1, [pc, #532]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d008      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bca:	4b81      	ldr	r3, [pc, #516]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	497e      	ldr	r1, [pc, #504]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d008      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004be8:	4b79      	ldr	r3, [pc, #484]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	4976      	ldr	r1, [pc, #472]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0320 	and.w	r3, r3, #32
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d008      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c06:	4b72      	ldr	r3, [pc, #456]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	f023 0210 	bic.w	r2, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	496f      	ldr	r1, [pc, #444]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004c24:	4b6a      	ldr	r3, [pc, #424]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c30:	4967      	ldr	r1, [pc, #412]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d008      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c42:	4b63      	ldr	r3, [pc, #396]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	f023 0220 	bic.w	r2, r3, #32
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	4960      	ldr	r1, [pc, #384]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c60:	4b5b      	ldr	r3, [pc, #364]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	4958      	ldr	r1, [pc, #352]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d008      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c7e:	4b54      	ldr	r3, [pc, #336]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	4951      	ldr	r1, [pc, #324]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c9c:	4b4c      	ldr	r3, [pc, #304]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	4949      	ldr	r1, [pc, #292]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cba:	4b45      	ldr	r3, [pc, #276]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	4942      	ldr	r1, [pc, #264]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cd8:	4b3d      	ldr	r3, [pc, #244]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	493a      	ldr	r1, [pc, #232]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d008      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004cf6:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	4933      	ldr	r1, [pc, #204]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004d14:	4b2e      	ldr	r3, [pc, #184]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d20:	492b      	ldr	r1, [pc, #172]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d008      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004d32:	4b27      	ldr	r3, [pc, #156]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	4924      	ldr	r1, [pc, #144]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004d50:	4b1f      	ldr	r3, [pc, #124]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	491c      	ldr	r1, [pc, #112]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d008      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004d6e:	4b18      	ldr	r3, [pc, #96]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	4915      	ldr	r1, [pc, #84]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004d8c:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d98:	490d      	ldr	r1, [pc, #52]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004daa:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db6:	4906      	ldr	r1, [pc, #24]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00c      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004dc8:	4b01      	ldr	r3, [pc, #4]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	e002      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004dce:	bf00      	nop
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ddc:	490b      	ldr	r1, [pc, #44]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d008      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004dee:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfa:	4904      	ldr	r1, [pc, #16]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3748      	adds	r7, #72	; 0x48
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40021000 	.word	0x40021000

08004e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e01d      	b.n	8004e5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fc f9ca 	bl	80011d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	f000 f8ee 	bl	8005030 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	4b0e      	ldr	r3, [pc, #56]	; (8004eb8 <HAL_TIM_Base_Start+0x50>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b06      	cmp	r3, #6
 8004e88:	d00b      	beq.n	8004ea2 <HAL_TIM_Base_Start+0x3a>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e90:	d007      	beq.n	8004ea2 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	00010007 	.word	0x00010007

08004ebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIM_ConfigClockSource+0x18>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e0a8      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x16a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d067      	beq.n	8004fe0 <HAL_TIM_ConfigClockSource+0x124>
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d80b      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x70>
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d073      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0x144>
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d802      	bhi.n	8004f22 <HAL_TIM_ConfigClockSource+0x66>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d06f      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004f20:	e078      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f22:	2b20      	cmp	r3, #32
 8004f24:	d06c      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0x144>
 8004f26:	2b30      	cmp	r3, #48	; 0x30
 8004f28:	d06a      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004f2a:	e073      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f2c:	2b70      	cmp	r3, #112	; 0x70
 8004f2e:	d00d      	beq.n	8004f4c <HAL_TIM_ConfigClockSource+0x90>
 8004f30:	2b70      	cmp	r3, #112	; 0x70
 8004f32:	d804      	bhi.n	8004f3e <HAL_TIM_ConfigClockSource+0x82>
 8004f34:	2b50      	cmp	r3, #80	; 0x50
 8004f36:	d033      	beq.n	8004fa0 <HAL_TIM_ConfigClockSource+0xe4>
 8004f38:	2b60      	cmp	r3, #96	; 0x60
 8004f3a:	d041      	beq.n	8004fc0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004f3c:	e06a      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f42:	d066      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0x156>
 8004f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f48:	d017      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004f4a:	e063      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	6899      	ldr	r1, [r3, #8]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f000 f980 	bl	8005260 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	609a      	str	r2, [r3, #8]
      break;
 8004f78:	e04c      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6899      	ldr	r1, [r3, #8]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f000 f969 	bl	8005260 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f9c:	609a      	str	r2, [r3, #8]
      break;
 8004f9e:	e039      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	6859      	ldr	r1, [r3, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	461a      	mov	r2, r3
 8004fae:	f000 f8dd 	bl	800516c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2150      	movs	r1, #80	; 0x50
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 f936 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8004fbe:	e029      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	6859      	ldr	r1, [r3, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	f000 f8fc 	bl	80051ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2160      	movs	r1, #96	; 0x60
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 f926 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8004fde:	e019      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	6859      	ldr	r1, [r3, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	461a      	mov	r2, r3
 8004fee:	f000 f8bd 	bl	800516c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2140      	movs	r1, #64	; 0x40
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 f916 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8004ffe:	e009      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f000 f90d 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8005010:	e000      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a42      	ldr	r2, [pc, #264]	; (800514c <TIM_Base_SetConfig+0x11c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d013      	beq.n	8005070 <TIM_Base_SetConfig+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504e:	d00f      	beq.n	8005070 <TIM_Base_SetConfig+0x40>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a3f      	ldr	r2, [pc, #252]	; (8005150 <TIM_Base_SetConfig+0x120>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00b      	beq.n	8005070 <TIM_Base_SetConfig+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a3e      	ldr	r2, [pc, #248]	; (8005154 <TIM_Base_SetConfig+0x124>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <TIM_Base_SetConfig+0x40>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a3d      	ldr	r2, [pc, #244]	; (8005158 <TIM_Base_SetConfig+0x128>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_Base_SetConfig+0x40>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a3c      	ldr	r2, [pc, #240]	; (800515c <TIM_Base_SetConfig+0x12c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d108      	bne.n	8005082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a31      	ldr	r2, [pc, #196]	; (800514c <TIM_Base_SetConfig+0x11c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d01f      	beq.n	80050ca <TIM_Base_SetConfig+0x9a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005090:	d01b      	beq.n	80050ca <TIM_Base_SetConfig+0x9a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a2e      	ldr	r2, [pc, #184]	; (8005150 <TIM_Base_SetConfig+0x120>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d017      	beq.n	80050ca <TIM_Base_SetConfig+0x9a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a2d      	ldr	r2, [pc, #180]	; (8005154 <TIM_Base_SetConfig+0x124>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d013      	beq.n	80050ca <TIM_Base_SetConfig+0x9a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a2c      	ldr	r2, [pc, #176]	; (8005158 <TIM_Base_SetConfig+0x128>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00f      	beq.n	80050ca <TIM_Base_SetConfig+0x9a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a2c      	ldr	r2, [pc, #176]	; (8005160 <TIM_Base_SetConfig+0x130>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00b      	beq.n	80050ca <TIM_Base_SetConfig+0x9a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a2b      	ldr	r2, [pc, #172]	; (8005164 <TIM_Base_SetConfig+0x134>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d007      	beq.n	80050ca <TIM_Base_SetConfig+0x9a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a2a      	ldr	r2, [pc, #168]	; (8005168 <TIM_Base_SetConfig+0x138>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d003      	beq.n	80050ca <TIM_Base_SetConfig+0x9a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a25      	ldr	r2, [pc, #148]	; (800515c <TIM_Base_SetConfig+0x12c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d108      	bne.n	80050dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4313      	orrs	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a12      	ldr	r2, [pc, #72]	; (800514c <TIM_Base_SetConfig+0x11c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d013      	beq.n	8005130 <TIM_Base_SetConfig+0x100>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a13      	ldr	r2, [pc, #76]	; (8005158 <TIM_Base_SetConfig+0x128>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00f      	beq.n	8005130 <TIM_Base_SetConfig+0x100>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a13      	ldr	r2, [pc, #76]	; (8005160 <TIM_Base_SetConfig+0x130>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00b      	beq.n	8005130 <TIM_Base_SetConfig+0x100>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a12      	ldr	r2, [pc, #72]	; (8005164 <TIM_Base_SetConfig+0x134>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d007      	beq.n	8005130 <TIM_Base_SetConfig+0x100>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a11      	ldr	r2, [pc, #68]	; (8005168 <TIM_Base_SetConfig+0x138>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_Base_SetConfig+0x100>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a0c      	ldr	r2, [pc, #48]	; (800515c <TIM_Base_SetConfig+0x12c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d103      	bne.n	8005138 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	615a      	str	r2, [r3, #20]
}
 800513e:	bf00      	nop
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40000400 	.word	0x40000400
 8005154:	40000800 	.word	0x40000800
 8005158:	40013400 	.word	0x40013400
 800515c:	40015000 	.word	0x40015000
 8005160:	40014000 	.word	0x40014000
 8005164:	40014400 	.word	0x40014400
 8005168:	40014800 	.word	0x40014800

0800516c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f023 0201 	bic.w	r2, r3, #1
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f023 030a 	bic.w	r3, r3, #10
 80051a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	621a      	str	r2, [r3, #32]
}
 80051be:	bf00      	nop
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b087      	sub	sp, #28
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f023 0210 	bic.w	r2, r3, #16
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	031b      	lsls	r3, r3, #12
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005206:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	621a      	str	r2, [r3, #32]
}
 800521e:	bf00      	nop
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	f043 0307 	orr.w	r3, r3, #7
 800524c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	609a      	str	r2, [r3, #8]
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800527a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	021a      	lsls	r2, r3, #8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	431a      	orrs	r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4313      	orrs	r3, r2
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	609a      	str	r2, [r3, #8]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e06d      	b.n	8005394 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a30      	ldr	r2, [pc, #192]	; (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d009      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a2f      	ldr	r2, [pc, #188]	; (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d004      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a2d      	ldr	r2, [pc, #180]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d108      	bne.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a1e      	ldr	r2, [pc, #120]	; (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d01d      	beq.n	8005368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005334:	d018      	beq.n	8005368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a1c      	ldr	r2, [pc, #112]	; (80053ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d013      	beq.n	8005368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1a      	ldr	r2, [pc, #104]	; (80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00e      	beq.n	8005368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a15      	ldr	r2, [pc, #84]	; (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d009      	beq.n	8005368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a16      	ldr	r2, [pc, #88]	; (80053b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d004      	beq.n	8005368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a11      	ldr	r2, [pc, #68]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d10c      	bne.n	8005382 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800536e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	4313      	orrs	r3, r2
 8005378:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	40012c00 	.word	0x40012c00
 80053a4:	40013400 	.word	0x40013400
 80053a8:	40015000 	.word	0x40015000
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40000800 	.word	0x40000800
 80053b4:	40014000 	.word	0x40014000

080053b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e040      	b.n	800544c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fb ff5e 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2224      	movs	r2, #36	; 0x24
 80053e4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0201 	bic.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f8c0 	bl	800557c <UART_SetConfig>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e022      	b.n	800544c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 face 	bl	80059b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005422:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005432:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fb55 	bl	8005af4 <UART_CheckIdleState>
 800544a:	4603      	mov	r3, r0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08a      	sub	sp, #40	; 0x28
 8005458:	af02      	add	r7, sp, #8
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	4613      	mov	r3, r2
 8005462:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005468:	2b20      	cmp	r3, #32
 800546a:	f040 8081 	bne.w	8005570 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <HAL_UART_Transmit+0x26>
 8005474:	88fb      	ldrh	r3, [r7, #6]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e079      	b.n	8005572 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_UART_Transmit+0x38>
 8005488:	2302      	movs	r3, #2
 800548a:	e072      	b.n	8005572 <HAL_UART_Transmit+0x11e>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2221      	movs	r2, #33	; 0x21
 800549e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80054a0:	f7fc f8b6 	bl	8001610 <HAL_GetTick>
 80054a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	88fa      	ldrh	r2, [r7, #6]
 80054aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	88fa      	ldrh	r2, [r7, #6]
 80054b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054be:	d108      	bne.n	80054d2 <HAL_UART_Transmit+0x7e>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	61bb      	str	r3, [r7, #24]
 80054d0:	e003      	b.n	80054da <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054da:	e02d      	b.n	8005538 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2200      	movs	r2, #0
 80054e4:	2180      	movs	r1, #128	; 0x80
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 fb49 	bl	8005b7e <UART_WaitOnFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e03d      	b.n	8005572 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	881a      	ldrh	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005508:	b292      	uxth	r2, r2
 800550a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	3302      	adds	r3, #2
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	e008      	b.n	8005526 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	781a      	ldrb	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	b292      	uxth	r2, r2
 800551e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	3301      	adds	r3, #1
 8005524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800553e:	b29b      	uxth	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1cb      	bne.n	80054dc <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2200      	movs	r2, #0
 800554c:	2140      	movs	r1, #64	; 0x40
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 fb15 	bl	8005b7e <UART_WaitOnFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e009      	b.n	8005572 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	e000      	b.n	8005572 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005570:	2302      	movs	r3, #2
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005584:	2300      	movs	r3, #0
 8005586:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4bac      	ldr	r3, [pc, #688]	; (800585c <UART_SetConfig+0x2e0>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6812      	ldr	r2, [r2, #0]
 80055b2:	6939      	ldr	r1, [r7, #16]
 80055b4:	430b      	orrs	r3, r1
 80055b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a9a      	ldr	r2, [pc, #616]	; (8005860 <UART_SetConfig+0x2e4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d121      	bne.n	8005640 <UART_SetConfig+0xc4>
 80055fc:	4b99      	ldr	r3, [pc, #612]	; (8005864 <UART_SetConfig+0x2e8>)
 80055fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005600:	f003 0303 	and.w	r3, r3, #3
 8005604:	2b03      	cmp	r3, #3
 8005606:	d817      	bhi.n	8005638 <UART_SetConfig+0xbc>
 8005608:	a201      	add	r2, pc, #4	; (adr r2, 8005610 <UART_SetConfig+0x94>)
 800560a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560e:	bf00      	nop
 8005610:	08005621 	.word	0x08005621
 8005614:	0800562d 	.word	0x0800562d
 8005618:	08005633 	.word	0x08005633
 800561c:	08005627 	.word	0x08005627
 8005620:	2301      	movs	r3, #1
 8005622:	77fb      	strb	r3, [r7, #31]
 8005624:	e0b2      	b.n	800578c <UART_SetConfig+0x210>
 8005626:	2302      	movs	r3, #2
 8005628:	77fb      	strb	r3, [r7, #31]
 800562a:	e0af      	b.n	800578c <UART_SetConfig+0x210>
 800562c:	2304      	movs	r3, #4
 800562e:	77fb      	strb	r3, [r7, #31]
 8005630:	e0ac      	b.n	800578c <UART_SetConfig+0x210>
 8005632:	2308      	movs	r3, #8
 8005634:	77fb      	strb	r3, [r7, #31]
 8005636:	e0a9      	b.n	800578c <UART_SetConfig+0x210>
 8005638:	2310      	movs	r3, #16
 800563a:	77fb      	strb	r3, [r7, #31]
 800563c:	bf00      	nop
 800563e:	e0a5      	b.n	800578c <UART_SetConfig+0x210>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a88      	ldr	r2, [pc, #544]	; (8005868 <UART_SetConfig+0x2ec>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d123      	bne.n	8005692 <UART_SetConfig+0x116>
 800564a:	4b86      	ldr	r3, [pc, #536]	; (8005864 <UART_SetConfig+0x2e8>)
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005656:	d012      	beq.n	800567e <UART_SetConfig+0x102>
 8005658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800565c:	d802      	bhi.n	8005664 <UART_SetConfig+0xe8>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <UART_SetConfig+0xf6>
 8005662:	e012      	b.n	800568a <UART_SetConfig+0x10e>
 8005664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005668:	d00c      	beq.n	8005684 <UART_SetConfig+0x108>
 800566a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800566e:	d003      	beq.n	8005678 <UART_SetConfig+0xfc>
 8005670:	e00b      	b.n	800568a <UART_SetConfig+0x10e>
 8005672:	2300      	movs	r3, #0
 8005674:	77fb      	strb	r3, [r7, #31]
 8005676:	e089      	b.n	800578c <UART_SetConfig+0x210>
 8005678:	2302      	movs	r3, #2
 800567a:	77fb      	strb	r3, [r7, #31]
 800567c:	e086      	b.n	800578c <UART_SetConfig+0x210>
 800567e:	2304      	movs	r3, #4
 8005680:	77fb      	strb	r3, [r7, #31]
 8005682:	e083      	b.n	800578c <UART_SetConfig+0x210>
 8005684:	2308      	movs	r3, #8
 8005686:	77fb      	strb	r3, [r7, #31]
 8005688:	e080      	b.n	800578c <UART_SetConfig+0x210>
 800568a:	2310      	movs	r3, #16
 800568c:	77fb      	strb	r3, [r7, #31]
 800568e:	bf00      	nop
 8005690:	e07c      	b.n	800578c <UART_SetConfig+0x210>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a75      	ldr	r2, [pc, #468]	; (800586c <UART_SetConfig+0x2f0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d123      	bne.n	80056e4 <UART_SetConfig+0x168>
 800569c:	4b71      	ldr	r3, [pc, #452]	; (8005864 <UART_SetConfig+0x2e8>)
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80056a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056a8:	d012      	beq.n	80056d0 <UART_SetConfig+0x154>
 80056aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056ae:	d802      	bhi.n	80056b6 <UART_SetConfig+0x13a>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <UART_SetConfig+0x148>
 80056b4:	e012      	b.n	80056dc <UART_SetConfig+0x160>
 80056b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056ba:	d00c      	beq.n	80056d6 <UART_SetConfig+0x15a>
 80056bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80056c0:	d003      	beq.n	80056ca <UART_SetConfig+0x14e>
 80056c2:	e00b      	b.n	80056dc <UART_SetConfig+0x160>
 80056c4:	2300      	movs	r3, #0
 80056c6:	77fb      	strb	r3, [r7, #31]
 80056c8:	e060      	b.n	800578c <UART_SetConfig+0x210>
 80056ca:	2302      	movs	r3, #2
 80056cc:	77fb      	strb	r3, [r7, #31]
 80056ce:	e05d      	b.n	800578c <UART_SetConfig+0x210>
 80056d0:	2304      	movs	r3, #4
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e05a      	b.n	800578c <UART_SetConfig+0x210>
 80056d6:	2308      	movs	r3, #8
 80056d8:	77fb      	strb	r3, [r7, #31]
 80056da:	e057      	b.n	800578c <UART_SetConfig+0x210>
 80056dc:	2310      	movs	r3, #16
 80056de:	77fb      	strb	r3, [r7, #31]
 80056e0:	bf00      	nop
 80056e2:	e053      	b.n	800578c <UART_SetConfig+0x210>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a61      	ldr	r2, [pc, #388]	; (8005870 <UART_SetConfig+0x2f4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d123      	bne.n	8005736 <UART_SetConfig+0x1ba>
 80056ee:	4b5d      	ldr	r3, [pc, #372]	; (8005864 <UART_SetConfig+0x2e8>)
 80056f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80056f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056fa:	d012      	beq.n	8005722 <UART_SetConfig+0x1a6>
 80056fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005700:	d802      	bhi.n	8005708 <UART_SetConfig+0x18c>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d007      	beq.n	8005716 <UART_SetConfig+0x19a>
 8005706:	e012      	b.n	800572e <UART_SetConfig+0x1b2>
 8005708:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800570c:	d00c      	beq.n	8005728 <UART_SetConfig+0x1ac>
 800570e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005712:	d003      	beq.n	800571c <UART_SetConfig+0x1a0>
 8005714:	e00b      	b.n	800572e <UART_SetConfig+0x1b2>
 8005716:	2300      	movs	r3, #0
 8005718:	77fb      	strb	r3, [r7, #31]
 800571a:	e037      	b.n	800578c <UART_SetConfig+0x210>
 800571c:	2302      	movs	r3, #2
 800571e:	77fb      	strb	r3, [r7, #31]
 8005720:	e034      	b.n	800578c <UART_SetConfig+0x210>
 8005722:	2304      	movs	r3, #4
 8005724:	77fb      	strb	r3, [r7, #31]
 8005726:	e031      	b.n	800578c <UART_SetConfig+0x210>
 8005728:	2308      	movs	r3, #8
 800572a:	77fb      	strb	r3, [r7, #31]
 800572c:	e02e      	b.n	800578c <UART_SetConfig+0x210>
 800572e:	2310      	movs	r3, #16
 8005730:	77fb      	strb	r3, [r7, #31]
 8005732:	bf00      	nop
 8005734:	e02a      	b.n	800578c <UART_SetConfig+0x210>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a4e      	ldr	r2, [pc, #312]	; (8005874 <UART_SetConfig+0x2f8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d123      	bne.n	8005788 <UART_SetConfig+0x20c>
 8005740:	4b48      	ldr	r3, [pc, #288]	; (8005864 <UART_SetConfig+0x2e8>)
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800574c:	d012      	beq.n	8005774 <UART_SetConfig+0x1f8>
 800574e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005752:	d802      	bhi.n	800575a <UART_SetConfig+0x1de>
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <UART_SetConfig+0x1ec>
 8005758:	e012      	b.n	8005780 <UART_SetConfig+0x204>
 800575a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800575e:	d00c      	beq.n	800577a <UART_SetConfig+0x1fe>
 8005760:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005764:	d003      	beq.n	800576e <UART_SetConfig+0x1f2>
 8005766:	e00b      	b.n	8005780 <UART_SetConfig+0x204>
 8005768:	2300      	movs	r3, #0
 800576a:	77fb      	strb	r3, [r7, #31]
 800576c:	e00e      	b.n	800578c <UART_SetConfig+0x210>
 800576e:	2302      	movs	r3, #2
 8005770:	77fb      	strb	r3, [r7, #31]
 8005772:	e00b      	b.n	800578c <UART_SetConfig+0x210>
 8005774:	2304      	movs	r3, #4
 8005776:	77fb      	strb	r3, [r7, #31]
 8005778:	e008      	b.n	800578c <UART_SetConfig+0x210>
 800577a:	2308      	movs	r3, #8
 800577c:	77fb      	strb	r3, [r7, #31]
 800577e:	e005      	b.n	800578c <UART_SetConfig+0x210>
 8005780:	2310      	movs	r3, #16
 8005782:	77fb      	strb	r3, [r7, #31]
 8005784:	bf00      	nop
 8005786:	e001      	b.n	800578c <UART_SetConfig+0x210>
 8005788:	2310      	movs	r3, #16
 800578a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005794:	f040 8090 	bne.w	80058b8 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8005798:	7ffb      	ldrb	r3, [r7, #31]
 800579a:	2b08      	cmp	r3, #8
 800579c:	d86c      	bhi.n	8005878 <UART_SetConfig+0x2fc>
 800579e:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <UART_SetConfig+0x228>)
 80057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a4:	080057c9 	.word	0x080057c9
 80057a8:	080057e9 	.word	0x080057e9
 80057ac:	08005809 	.word	0x08005809
 80057b0:	08005879 	.word	0x08005879
 80057b4:	08005825 	.word	0x08005825
 80057b8:	08005879 	.word	0x08005879
 80057bc:	08005879 	.word	0x08005879
 80057c0:	08005879 	.word	0x08005879
 80057c4:	08005845 	.word	0x08005845
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c8:	f7ff f8c0 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 80057cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	005a      	lsls	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	085b      	lsrs	r3, r3, #1
 80057d8:	441a      	add	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	61bb      	str	r3, [r7, #24]
        break;
 80057e6:	e04a      	b.n	800587e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057e8:	f7ff f8d2 	bl	8004990 <HAL_RCC_GetPCLK2Freq>
 80057ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	005a      	lsls	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	085b      	lsrs	r3, r3, #1
 80057f8:	441a      	add	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	b29b      	uxth	r3, r3
 8005804:	61bb      	str	r3, [r7, #24]
        break;
 8005806:	e03a      	b.n	800587e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005812:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6852      	ldr	r2, [r2, #4]
 800581a:	fbb3 f3f2 	udiv	r3, r3, r2
 800581e:	b29b      	uxth	r3, r3
 8005820:	61bb      	str	r3, [r7, #24]
        break;
 8005822:	e02c      	b.n	800587e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005824:	f7ff f81c 	bl	8004860 <HAL_RCC_GetSysClockFreq>
 8005828:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	005a      	lsls	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	441a      	add	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	fbb2 f3f3 	udiv	r3, r2, r3
 800583e:	b29b      	uxth	r3, r3
 8005840:	61bb      	str	r3, [r7, #24]
        break;
 8005842:	e01c      	b.n	800587e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	085b      	lsrs	r3, r3, #1
 800584a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	fbb2 f3f3 	udiv	r3, r2, r3
 8005856:	b29b      	uxth	r3, r3
 8005858:	61bb      	str	r3, [r7, #24]
        break;
 800585a:	e010      	b.n	800587e <UART_SetConfig+0x302>
 800585c:	efff69f3 	.word	0xefff69f3
 8005860:	40013800 	.word	0x40013800
 8005864:	40021000 	.word	0x40021000
 8005868:	40004400 	.word	0x40004400
 800586c:	40004800 	.word	0x40004800
 8005870:	40004c00 	.word	0x40004c00
 8005874:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	75fb      	strb	r3, [r7, #23]
        break;
 800587c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b0f      	cmp	r3, #15
 8005882:	d916      	bls.n	80058b2 <UART_SetConfig+0x336>
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588a:	d212      	bcs.n	80058b2 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	b29b      	uxth	r3, r3
 8005890:	f023 030f 	bic.w	r3, r3, #15
 8005894:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	085b      	lsrs	r3, r3, #1
 800589a:	b29b      	uxth	r3, r3
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	897b      	ldrh	r3, [r7, #10]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	897a      	ldrh	r2, [r7, #10]
 80058ae:	60da      	str	r2, [r3, #12]
 80058b0:	e072      	b.n	8005998 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]
 80058b6:	e06f      	b.n	8005998 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 80058b8:	7ffb      	ldrb	r3, [r7, #31]
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d85b      	bhi.n	8005976 <UART_SetConfig+0x3fa>
 80058be:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <UART_SetConfig+0x348>)
 80058c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c4:	080058e9 	.word	0x080058e9
 80058c8:	08005907 	.word	0x08005907
 80058cc:	08005925 	.word	0x08005925
 80058d0:	08005977 	.word	0x08005977
 80058d4:	08005941 	.word	0x08005941
 80058d8:	08005977 	.word	0x08005977
 80058dc:	08005977 	.word	0x08005977
 80058e0:	08005977 	.word	0x08005977
 80058e4:	0800595f 	.word	0x0800595f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e8:	f7ff f830 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 80058ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	085a      	lsrs	r2, r3, #1
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	441a      	add	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005900:	b29b      	uxth	r3, r3
 8005902:	61bb      	str	r3, [r7, #24]
        break;
 8005904:	e03a      	b.n	800597c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005906:	f7ff f843 	bl	8004990 <HAL_RCC_GetPCLK2Freq>
 800590a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	085a      	lsrs	r2, r3, #1
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	441a      	add	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	fbb2 f3f3 	udiv	r3, r2, r3
 800591e:	b29b      	uxth	r3, r3
 8005920:	61bb      	str	r3, [r7, #24]
        break;
 8005922:	e02b      	b.n	800597c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	085b      	lsrs	r3, r3, #1
 800592a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800592e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6852      	ldr	r2, [r2, #4]
 8005936:	fbb3 f3f2 	udiv	r3, r3, r2
 800593a:	b29b      	uxth	r3, r3
 800593c:	61bb      	str	r3, [r7, #24]
        break;
 800593e:	e01d      	b.n	800597c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005940:	f7fe ff8e 	bl	8004860 <HAL_RCC_GetSysClockFreq>
 8005944:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	085a      	lsrs	r2, r3, #1
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	441a      	add	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	fbb2 f3f3 	udiv	r3, r2, r3
 8005958:	b29b      	uxth	r3, r3
 800595a:	61bb      	str	r3, [r7, #24]
        break;
 800595c:	e00e      	b.n	800597c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	085b      	lsrs	r3, r3, #1
 8005964:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	b29b      	uxth	r3, r3
 8005972:	61bb      	str	r3, [r7, #24]
        break;
 8005974:	e002      	b.n	800597c <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	75fb      	strb	r3, [r7, #23]
        break;
 800597a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	2b0f      	cmp	r3, #15
 8005980:	d908      	bls.n	8005994 <UART_SetConfig+0x418>
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005988:	d204      	bcs.n	8005994 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	60da      	str	r2, [r3, #12]
 8005992:	e001      	b.n	8005998 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80059a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3720      	adds	r7, #32
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop

080059b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01a      	beq.n	8005ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aae:	d10a      	bne.n	8005ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	605a      	str	r2, [r3, #4]
  }
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af02      	add	r7, sp, #8
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005b02:	f7fb fd85 	bl	8001610 <HAL_GetTick>
 8005b06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d10e      	bne.n	8005b34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f82a 	bl	8005b7e <UART_WaitOnFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e020      	b.n	8005b76 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d10e      	bne.n	8005b60 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f814 	bl	8005b7e <UART_WaitOnFlagUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e00a      	b.n	8005b76 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	603b      	str	r3, [r7, #0]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b8e:	e05d      	b.n	8005c4c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b96:	d059      	beq.n	8005c4c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b98:	f7fb fd3a 	bl	8001610 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d302      	bcc.n	8005bae <UART_WaitOnFlagUntilTimeout+0x30>
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d11b      	bne.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bbc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0201 	bic.w	r2, r2, #1
 8005bcc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e042      	b.n	8005c6c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d02b      	beq.n	8005c4c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c02:	d123      	bne.n	8005c4c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c0c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c1c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0201 	bic.w	r2, r2, #1
 8005c2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e00f      	b.n	8005c6c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	69da      	ldr	r2, [r3, #28]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	4013      	ands	r3, r2
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	bf0c      	ite	eq
 8005c5c:	2301      	moveq	r3, #1
 8005c5e:	2300      	movne	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	461a      	mov	r2, r3
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d092      	beq.n	8005b90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <__errno>:
 8005c74:	4b01      	ldr	r3, [pc, #4]	; (8005c7c <__errno+0x8>)
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	2000008c 	.word	0x2000008c

08005c80 <__libc_init_array>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	4e0d      	ldr	r6, [pc, #52]	; (8005cb8 <__libc_init_array+0x38>)
 8005c84:	4c0d      	ldr	r4, [pc, #52]	; (8005cbc <__libc_init_array+0x3c>)
 8005c86:	1ba4      	subs	r4, r4, r6
 8005c88:	10a4      	asrs	r4, r4, #2
 8005c8a:	2500      	movs	r5, #0
 8005c8c:	42a5      	cmp	r5, r4
 8005c8e:	d109      	bne.n	8005ca4 <__libc_init_array+0x24>
 8005c90:	4e0b      	ldr	r6, [pc, #44]	; (8005cc0 <__libc_init_array+0x40>)
 8005c92:	4c0c      	ldr	r4, [pc, #48]	; (8005cc4 <__libc_init_array+0x44>)
 8005c94:	f000 ff04 	bl	8006aa0 <_init>
 8005c98:	1ba4      	subs	r4, r4, r6
 8005c9a:	10a4      	asrs	r4, r4, #2
 8005c9c:	2500      	movs	r5, #0
 8005c9e:	42a5      	cmp	r5, r4
 8005ca0:	d105      	bne.n	8005cae <__libc_init_array+0x2e>
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ca8:	4798      	blx	r3
 8005caa:	3501      	adds	r5, #1
 8005cac:	e7ee      	b.n	8005c8c <__libc_init_array+0xc>
 8005cae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cb2:	4798      	blx	r3
 8005cb4:	3501      	adds	r5, #1
 8005cb6:	e7f2      	b.n	8005c9e <__libc_init_array+0x1e>
 8005cb8:	08006b94 	.word	0x08006b94
 8005cbc:	08006b94 	.word	0x08006b94
 8005cc0:	08006b94 	.word	0x08006b94
 8005cc4:	08006b98 	.word	0x08006b98

08005cc8 <memset>:
 8005cc8:	4402      	add	r2, r0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d100      	bne.n	8005cd2 <memset+0xa>
 8005cd0:	4770      	bx	lr
 8005cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cd6:	e7f9      	b.n	8005ccc <memset+0x4>

08005cd8 <iprintf>:
 8005cd8:	b40f      	push	{r0, r1, r2, r3}
 8005cda:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <iprintf+0x2c>)
 8005cdc:	b513      	push	{r0, r1, r4, lr}
 8005cde:	681c      	ldr	r4, [r3, #0]
 8005ce0:	b124      	cbz	r4, 8005cec <iprintf+0x14>
 8005ce2:	69a3      	ldr	r3, [r4, #24]
 8005ce4:	b913      	cbnz	r3, 8005cec <iprintf+0x14>
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f000 f84e 	bl	8005d88 <__sinit>
 8005cec:	ab05      	add	r3, sp, #20
 8005cee:	9a04      	ldr	r2, [sp, #16]
 8005cf0:	68a1      	ldr	r1, [r4, #8]
 8005cf2:	9301      	str	r3, [sp, #4]
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f000 f955 	bl	8005fa4 <_vfiprintf_r>
 8005cfa:	b002      	add	sp, #8
 8005cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d00:	b004      	add	sp, #16
 8005d02:	4770      	bx	lr
 8005d04:	2000008c 	.word	0x2000008c

08005d08 <std>:
 8005d08:	2300      	movs	r3, #0
 8005d0a:	b510      	push	{r4, lr}
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d12:	6083      	str	r3, [r0, #8]
 8005d14:	8181      	strh	r1, [r0, #12]
 8005d16:	6643      	str	r3, [r0, #100]	; 0x64
 8005d18:	81c2      	strh	r2, [r0, #14]
 8005d1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d1e:	6183      	str	r3, [r0, #24]
 8005d20:	4619      	mov	r1, r3
 8005d22:	2208      	movs	r2, #8
 8005d24:	305c      	adds	r0, #92	; 0x5c
 8005d26:	f7ff ffcf 	bl	8005cc8 <memset>
 8005d2a:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <std+0x38>)
 8005d2c:	6263      	str	r3, [r4, #36]	; 0x24
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <std+0x3c>)
 8005d30:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <std+0x40>)
 8005d34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d36:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <std+0x44>)
 8005d38:	6224      	str	r4, [r4, #32]
 8005d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8005d3c:	bd10      	pop	{r4, pc}
 8005d3e:	bf00      	nop
 8005d40:	08006501 	.word	0x08006501
 8005d44:	08006523 	.word	0x08006523
 8005d48:	0800655b 	.word	0x0800655b
 8005d4c:	0800657f 	.word	0x0800657f

08005d50 <_cleanup_r>:
 8005d50:	4901      	ldr	r1, [pc, #4]	; (8005d58 <_cleanup_r+0x8>)
 8005d52:	f000 b885 	b.w	8005e60 <_fwalk_reent>
 8005d56:	bf00      	nop
 8005d58:	08006859 	.word	0x08006859

08005d5c <__sfmoreglue>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	1e4a      	subs	r2, r1, #1
 8005d60:	2568      	movs	r5, #104	; 0x68
 8005d62:	4355      	muls	r5, r2
 8005d64:	460e      	mov	r6, r1
 8005d66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d6a:	f000 f897 	bl	8005e9c <_malloc_r>
 8005d6e:	4604      	mov	r4, r0
 8005d70:	b140      	cbz	r0, 8005d84 <__sfmoreglue+0x28>
 8005d72:	2100      	movs	r1, #0
 8005d74:	e9c0 1600 	strd	r1, r6, [r0]
 8005d78:	300c      	adds	r0, #12
 8005d7a:	60a0      	str	r0, [r4, #8]
 8005d7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d80:	f7ff ffa2 	bl	8005cc8 <memset>
 8005d84:	4620      	mov	r0, r4
 8005d86:	bd70      	pop	{r4, r5, r6, pc}

08005d88 <__sinit>:
 8005d88:	6983      	ldr	r3, [r0, #24]
 8005d8a:	b510      	push	{r4, lr}
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	bb33      	cbnz	r3, 8005dde <__sinit+0x56>
 8005d90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005d94:	6503      	str	r3, [r0, #80]	; 0x50
 8005d96:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <__sinit+0x58>)
 8005d98:	4a12      	ldr	r2, [pc, #72]	; (8005de4 <__sinit+0x5c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6282      	str	r2, [r0, #40]	; 0x28
 8005d9e:	4298      	cmp	r0, r3
 8005da0:	bf04      	itt	eq
 8005da2:	2301      	moveq	r3, #1
 8005da4:	6183      	streq	r3, [r0, #24]
 8005da6:	f000 f81f 	bl	8005de8 <__sfp>
 8005daa:	6060      	str	r0, [r4, #4]
 8005dac:	4620      	mov	r0, r4
 8005dae:	f000 f81b 	bl	8005de8 <__sfp>
 8005db2:	60a0      	str	r0, [r4, #8]
 8005db4:	4620      	mov	r0, r4
 8005db6:	f000 f817 	bl	8005de8 <__sfp>
 8005dba:	2200      	movs	r2, #0
 8005dbc:	60e0      	str	r0, [r4, #12]
 8005dbe:	2104      	movs	r1, #4
 8005dc0:	6860      	ldr	r0, [r4, #4]
 8005dc2:	f7ff ffa1 	bl	8005d08 <std>
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	2109      	movs	r1, #9
 8005dca:	68a0      	ldr	r0, [r4, #8]
 8005dcc:	f7ff ff9c 	bl	8005d08 <std>
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	2112      	movs	r1, #18
 8005dd4:	68e0      	ldr	r0, [r4, #12]
 8005dd6:	f7ff ff97 	bl	8005d08 <std>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	61a3      	str	r3, [r4, #24]
 8005dde:	bd10      	pop	{r4, pc}
 8005de0:	08006afc 	.word	0x08006afc
 8005de4:	08005d51 	.word	0x08005d51

08005de8 <__sfp>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	4b1b      	ldr	r3, [pc, #108]	; (8005e58 <__sfp+0x70>)
 8005dec:	681e      	ldr	r6, [r3, #0]
 8005dee:	69b3      	ldr	r3, [r6, #24]
 8005df0:	4607      	mov	r7, r0
 8005df2:	b913      	cbnz	r3, 8005dfa <__sfp+0x12>
 8005df4:	4630      	mov	r0, r6
 8005df6:	f7ff ffc7 	bl	8005d88 <__sinit>
 8005dfa:	3648      	adds	r6, #72	; 0x48
 8005dfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	d503      	bpl.n	8005e0c <__sfp+0x24>
 8005e04:	6833      	ldr	r3, [r6, #0]
 8005e06:	b133      	cbz	r3, 8005e16 <__sfp+0x2e>
 8005e08:	6836      	ldr	r6, [r6, #0]
 8005e0a:	e7f7      	b.n	8005dfc <__sfp+0x14>
 8005e0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e10:	b16d      	cbz	r5, 8005e2e <__sfp+0x46>
 8005e12:	3468      	adds	r4, #104	; 0x68
 8005e14:	e7f4      	b.n	8005e00 <__sfp+0x18>
 8005e16:	2104      	movs	r1, #4
 8005e18:	4638      	mov	r0, r7
 8005e1a:	f7ff ff9f 	bl	8005d5c <__sfmoreglue>
 8005e1e:	6030      	str	r0, [r6, #0]
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d1f1      	bne.n	8005e08 <__sfp+0x20>
 8005e24:	230c      	movs	r3, #12
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	4604      	mov	r4, r0
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e2e:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <__sfp+0x74>)
 8005e30:	6665      	str	r5, [r4, #100]	; 0x64
 8005e32:	e9c4 5500 	strd	r5, r5, [r4]
 8005e36:	60a5      	str	r5, [r4, #8]
 8005e38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005e3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005e40:	2208      	movs	r2, #8
 8005e42:	4629      	mov	r1, r5
 8005e44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e48:	f7ff ff3e 	bl	8005cc8 <memset>
 8005e4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e54:	e7e9      	b.n	8005e2a <__sfp+0x42>
 8005e56:	bf00      	nop
 8005e58:	08006afc 	.word	0x08006afc
 8005e5c:	ffff0001 	.word	0xffff0001

08005e60 <_fwalk_reent>:
 8005e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e64:	4680      	mov	r8, r0
 8005e66:	4689      	mov	r9, r1
 8005e68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e6c:	2600      	movs	r6, #0
 8005e6e:	b914      	cbnz	r4, 8005e76 <_fwalk_reent+0x16>
 8005e70:	4630      	mov	r0, r6
 8005e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005e7a:	3f01      	subs	r7, #1
 8005e7c:	d501      	bpl.n	8005e82 <_fwalk_reent+0x22>
 8005e7e:	6824      	ldr	r4, [r4, #0]
 8005e80:	e7f5      	b.n	8005e6e <_fwalk_reent+0xe>
 8005e82:	89ab      	ldrh	r3, [r5, #12]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d907      	bls.n	8005e98 <_fwalk_reent+0x38>
 8005e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	d003      	beq.n	8005e98 <_fwalk_reent+0x38>
 8005e90:	4629      	mov	r1, r5
 8005e92:	4640      	mov	r0, r8
 8005e94:	47c8      	blx	r9
 8005e96:	4306      	orrs	r6, r0
 8005e98:	3568      	adds	r5, #104	; 0x68
 8005e9a:	e7ee      	b.n	8005e7a <_fwalk_reent+0x1a>

08005e9c <_malloc_r>:
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	1ccd      	adds	r5, r1, #3
 8005ea0:	f025 0503 	bic.w	r5, r5, #3
 8005ea4:	3508      	adds	r5, #8
 8005ea6:	2d0c      	cmp	r5, #12
 8005ea8:	bf38      	it	cc
 8005eaa:	250c      	movcc	r5, #12
 8005eac:	2d00      	cmp	r5, #0
 8005eae:	4606      	mov	r6, r0
 8005eb0:	db01      	blt.n	8005eb6 <_malloc_r+0x1a>
 8005eb2:	42a9      	cmp	r1, r5
 8005eb4:	d903      	bls.n	8005ebe <_malloc_r+0x22>
 8005eb6:	230c      	movs	r3, #12
 8005eb8:	6033      	str	r3, [r6, #0]
 8005eba:	2000      	movs	r0, #0
 8005ebc:	bd70      	pop	{r4, r5, r6, pc}
 8005ebe:	f000 fd6b 	bl	8006998 <__malloc_lock>
 8005ec2:	4a21      	ldr	r2, [pc, #132]	; (8005f48 <_malloc_r+0xac>)
 8005ec4:	6814      	ldr	r4, [r2, #0]
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	b991      	cbnz	r1, 8005ef0 <_malloc_r+0x54>
 8005eca:	4c20      	ldr	r4, [pc, #128]	; (8005f4c <_malloc_r+0xb0>)
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	b91b      	cbnz	r3, 8005ed8 <_malloc_r+0x3c>
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f000 fb05 	bl	80064e0 <_sbrk_r>
 8005ed6:	6020      	str	r0, [r4, #0]
 8005ed8:	4629      	mov	r1, r5
 8005eda:	4630      	mov	r0, r6
 8005edc:	f000 fb00 	bl	80064e0 <_sbrk_r>
 8005ee0:	1c43      	adds	r3, r0, #1
 8005ee2:	d124      	bne.n	8005f2e <_malloc_r+0x92>
 8005ee4:	230c      	movs	r3, #12
 8005ee6:	6033      	str	r3, [r6, #0]
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f000 fd56 	bl	800699a <__malloc_unlock>
 8005eee:	e7e4      	b.n	8005eba <_malloc_r+0x1e>
 8005ef0:	680b      	ldr	r3, [r1, #0]
 8005ef2:	1b5b      	subs	r3, r3, r5
 8005ef4:	d418      	bmi.n	8005f28 <_malloc_r+0x8c>
 8005ef6:	2b0b      	cmp	r3, #11
 8005ef8:	d90f      	bls.n	8005f1a <_malloc_r+0x7e>
 8005efa:	600b      	str	r3, [r1, #0]
 8005efc:	50cd      	str	r5, [r1, r3]
 8005efe:	18cc      	adds	r4, r1, r3
 8005f00:	4630      	mov	r0, r6
 8005f02:	f000 fd4a 	bl	800699a <__malloc_unlock>
 8005f06:	f104 000b 	add.w	r0, r4, #11
 8005f0a:	1d23      	adds	r3, r4, #4
 8005f0c:	f020 0007 	bic.w	r0, r0, #7
 8005f10:	1ac3      	subs	r3, r0, r3
 8005f12:	d0d3      	beq.n	8005ebc <_malloc_r+0x20>
 8005f14:	425a      	negs	r2, r3
 8005f16:	50e2      	str	r2, [r4, r3]
 8005f18:	e7d0      	b.n	8005ebc <_malloc_r+0x20>
 8005f1a:	428c      	cmp	r4, r1
 8005f1c:	684b      	ldr	r3, [r1, #4]
 8005f1e:	bf16      	itet	ne
 8005f20:	6063      	strne	r3, [r4, #4]
 8005f22:	6013      	streq	r3, [r2, #0]
 8005f24:	460c      	movne	r4, r1
 8005f26:	e7eb      	b.n	8005f00 <_malloc_r+0x64>
 8005f28:	460c      	mov	r4, r1
 8005f2a:	6849      	ldr	r1, [r1, #4]
 8005f2c:	e7cc      	b.n	8005ec8 <_malloc_r+0x2c>
 8005f2e:	1cc4      	adds	r4, r0, #3
 8005f30:	f024 0403 	bic.w	r4, r4, #3
 8005f34:	42a0      	cmp	r0, r4
 8005f36:	d005      	beq.n	8005f44 <_malloc_r+0xa8>
 8005f38:	1a21      	subs	r1, r4, r0
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	f000 fad0 	bl	80064e0 <_sbrk_r>
 8005f40:	3001      	adds	r0, #1
 8005f42:	d0cf      	beq.n	8005ee4 <_malloc_r+0x48>
 8005f44:	6025      	str	r5, [r4, #0]
 8005f46:	e7db      	b.n	8005f00 <_malloc_r+0x64>
 8005f48:	20000124 	.word	0x20000124
 8005f4c:	20000128 	.word	0x20000128

08005f50 <__sfputc_r>:
 8005f50:	6893      	ldr	r3, [r2, #8]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	b410      	push	{r4}
 8005f58:	6093      	str	r3, [r2, #8]
 8005f5a:	da08      	bge.n	8005f6e <__sfputc_r+0x1e>
 8005f5c:	6994      	ldr	r4, [r2, #24]
 8005f5e:	42a3      	cmp	r3, r4
 8005f60:	db01      	blt.n	8005f66 <__sfputc_r+0x16>
 8005f62:	290a      	cmp	r1, #10
 8005f64:	d103      	bne.n	8005f6e <__sfputc_r+0x1e>
 8005f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f6a:	f000 bb0d 	b.w	8006588 <__swbuf_r>
 8005f6e:	6813      	ldr	r3, [r2, #0]
 8005f70:	1c58      	adds	r0, r3, #1
 8005f72:	6010      	str	r0, [r2, #0]
 8005f74:	7019      	strb	r1, [r3, #0]
 8005f76:	4608      	mov	r0, r1
 8005f78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <__sfputs_r>:
 8005f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f80:	4606      	mov	r6, r0
 8005f82:	460f      	mov	r7, r1
 8005f84:	4614      	mov	r4, r2
 8005f86:	18d5      	adds	r5, r2, r3
 8005f88:	42ac      	cmp	r4, r5
 8005f8a:	d101      	bne.n	8005f90 <__sfputs_r+0x12>
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	e007      	b.n	8005fa0 <__sfputs_r+0x22>
 8005f90:	463a      	mov	r2, r7
 8005f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f96:	4630      	mov	r0, r6
 8005f98:	f7ff ffda 	bl	8005f50 <__sfputc_r>
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d1f3      	bne.n	8005f88 <__sfputs_r+0xa>
 8005fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fa4 <_vfiprintf_r>:
 8005fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa8:	460c      	mov	r4, r1
 8005faa:	b09d      	sub	sp, #116	; 0x74
 8005fac:	4617      	mov	r7, r2
 8005fae:	461d      	mov	r5, r3
 8005fb0:	4606      	mov	r6, r0
 8005fb2:	b118      	cbz	r0, 8005fbc <_vfiprintf_r+0x18>
 8005fb4:	6983      	ldr	r3, [r0, #24]
 8005fb6:	b90b      	cbnz	r3, 8005fbc <_vfiprintf_r+0x18>
 8005fb8:	f7ff fee6 	bl	8005d88 <__sinit>
 8005fbc:	4b7c      	ldr	r3, [pc, #496]	; (80061b0 <_vfiprintf_r+0x20c>)
 8005fbe:	429c      	cmp	r4, r3
 8005fc0:	d158      	bne.n	8006074 <_vfiprintf_r+0xd0>
 8005fc2:	6874      	ldr	r4, [r6, #4]
 8005fc4:	89a3      	ldrh	r3, [r4, #12]
 8005fc6:	0718      	lsls	r0, r3, #28
 8005fc8:	d55e      	bpl.n	8006088 <_vfiprintf_r+0xe4>
 8005fca:	6923      	ldr	r3, [r4, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d05b      	beq.n	8006088 <_vfiprintf_r+0xe4>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fd4:	2320      	movs	r3, #32
 8005fd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fda:	2330      	movs	r3, #48	; 0x30
 8005fdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fe0:	9503      	str	r5, [sp, #12]
 8005fe2:	f04f 0b01 	mov.w	fp, #1
 8005fe6:	46b8      	mov	r8, r7
 8005fe8:	4645      	mov	r5, r8
 8005fea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005fee:	b10b      	cbz	r3, 8005ff4 <_vfiprintf_r+0x50>
 8005ff0:	2b25      	cmp	r3, #37	; 0x25
 8005ff2:	d154      	bne.n	800609e <_vfiprintf_r+0xfa>
 8005ff4:	ebb8 0a07 	subs.w	sl, r8, r7
 8005ff8:	d00b      	beq.n	8006012 <_vfiprintf_r+0x6e>
 8005ffa:	4653      	mov	r3, sl
 8005ffc:	463a      	mov	r2, r7
 8005ffe:	4621      	mov	r1, r4
 8006000:	4630      	mov	r0, r6
 8006002:	f7ff ffbc 	bl	8005f7e <__sfputs_r>
 8006006:	3001      	adds	r0, #1
 8006008:	f000 80c2 	beq.w	8006190 <_vfiprintf_r+0x1ec>
 800600c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800600e:	4453      	add	r3, sl
 8006010:	9309      	str	r3, [sp, #36]	; 0x24
 8006012:	f898 3000 	ldrb.w	r3, [r8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 80ba 	beq.w	8006190 <_vfiprintf_r+0x1ec>
 800601c:	2300      	movs	r3, #0
 800601e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006026:	9304      	str	r3, [sp, #16]
 8006028:	9307      	str	r3, [sp, #28]
 800602a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800602e:	931a      	str	r3, [sp, #104]	; 0x68
 8006030:	46a8      	mov	r8, r5
 8006032:	2205      	movs	r2, #5
 8006034:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006038:	485e      	ldr	r0, [pc, #376]	; (80061b4 <_vfiprintf_r+0x210>)
 800603a:	f7fa f8d1 	bl	80001e0 <memchr>
 800603e:	9b04      	ldr	r3, [sp, #16]
 8006040:	bb78      	cbnz	r0, 80060a2 <_vfiprintf_r+0xfe>
 8006042:	06d9      	lsls	r1, r3, #27
 8006044:	bf44      	itt	mi
 8006046:	2220      	movmi	r2, #32
 8006048:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800604c:	071a      	lsls	r2, r3, #28
 800604e:	bf44      	itt	mi
 8006050:	222b      	movmi	r2, #43	; 0x2b
 8006052:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006056:	782a      	ldrb	r2, [r5, #0]
 8006058:	2a2a      	cmp	r2, #42	; 0x2a
 800605a:	d02a      	beq.n	80060b2 <_vfiprintf_r+0x10e>
 800605c:	9a07      	ldr	r2, [sp, #28]
 800605e:	46a8      	mov	r8, r5
 8006060:	2000      	movs	r0, #0
 8006062:	250a      	movs	r5, #10
 8006064:	4641      	mov	r1, r8
 8006066:	f811 3b01 	ldrb.w	r3, [r1], #1
 800606a:	3b30      	subs	r3, #48	; 0x30
 800606c:	2b09      	cmp	r3, #9
 800606e:	d969      	bls.n	8006144 <_vfiprintf_r+0x1a0>
 8006070:	b360      	cbz	r0, 80060cc <_vfiprintf_r+0x128>
 8006072:	e024      	b.n	80060be <_vfiprintf_r+0x11a>
 8006074:	4b50      	ldr	r3, [pc, #320]	; (80061b8 <_vfiprintf_r+0x214>)
 8006076:	429c      	cmp	r4, r3
 8006078:	d101      	bne.n	800607e <_vfiprintf_r+0xda>
 800607a:	68b4      	ldr	r4, [r6, #8]
 800607c:	e7a2      	b.n	8005fc4 <_vfiprintf_r+0x20>
 800607e:	4b4f      	ldr	r3, [pc, #316]	; (80061bc <_vfiprintf_r+0x218>)
 8006080:	429c      	cmp	r4, r3
 8006082:	bf08      	it	eq
 8006084:	68f4      	ldreq	r4, [r6, #12]
 8006086:	e79d      	b.n	8005fc4 <_vfiprintf_r+0x20>
 8006088:	4621      	mov	r1, r4
 800608a:	4630      	mov	r0, r6
 800608c:	f000 fae0 	bl	8006650 <__swsetup_r>
 8006090:	2800      	cmp	r0, #0
 8006092:	d09d      	beq.n	8005fd0 <_vfiprintf_r+0x2c>
 8006094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006098:	b01d      	add	sp, #116	; 0x74
 800609a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609e:	46a8      	mov	r8, r5
 80060a0:	e7a2      	b.n	8005fe8 <_vfiprintf_r+0x44>
 80060a2:	4a44      	ldr	r2, [pc, #272]	; (80061b4 <_vfiprintf_r+0x210>)
 80060a4:	1a80      	subs	r0, r0, r2
 80060a6:	fa0b f000 	lsl.w	r0, fp, r0
 80060aa:	4318      	orrs	r0, r3
 80060ac:	9004      	str	r0, [sp, #16]
 80060ae:	4645      	mov	r5, r8
 80060b0:	e7be      	b.n	8006030 <_vfiprintf_r+0x8c>
 80060b2:	9a03      	ldr	r2, [sp, #12]
 80060b4:	1d11      	adds	r1, r2, #4
 80060b6:	6812      	ldr	r2, [r2, #0]
 80060b8:	9103      	str	r1, [sp, #12]
 80060ba:	2a00      	cmp	r2, #0
 80060bc:	db01      	blt.n	80060c2 <_vfiprintf_r+0x11e>
 80060be:	9207      	str	r2, [sp, #28]
 80060c0:	e004      	b.n	80060cc <_vfiprintf_r+0x128>
 80060c2:	4252      	negs	r2, r2
 80060c4:	f043 0302 	orr.w	r3, r3, #2
 80060c8:	9207      	str	r2, [sp, #28]
 80060ca:	9304      	str	r3, [sp, #16]
 80060cc:	f898 3000 	ldrb.w	r3, [r8]
 80060d0:	2b2e      	cmp	r3, #46	; 0x2e
 80060d2:	d10e      	bne.n	80060f2 <_vfiprintf_r+0x14e>
 80060d4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80060d8:	2b2a      	cmp	r3, #42	; 0x2a
 80060da:	d138      	bne.n	800614e <_vfiprintf_r+0x1aa>
 80060dc:	9b03      	ldr	r3, [sp, #12]
 80060de:	1d1a      	adds	r2, r3, #4
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	9203      	str	r2, [sp, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	bfb8      	it	lt
 80060e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80060ec:	f108 0802 	add.w	r8, r8, #2
 80060f0:	9305      	str	r3, [sp, #20]
 80060f2:	4d33      	ldr	r5, [pc, #204]	; (80061c0 <_vfiprintf_r+0x21c>)
 80060f4:	f898 1000 	ldrb.w	r1, [r8]
 80060f8:	2203      	movs	r2, #3
 80060fa:	4628      	mov	r0, r5
 80060fc:	f7fa f870 	bl	80001e0 <memchr>
 8006100:	b140      	cbz	r0, 8006114 <_vfiprintf_r+0x170>
 8006102:	2340      	movs	r3, #64	; 0x40
 8006104:	1b40      	subs	r0, r0, r5
 8006106:	fa03 f000 	lsl.w	r0, r3, r0
 800610a:	9b04      	ldr	r3, [sp, #16]
 800610c:	4303      	orrs	r3, r0
 800610e:	f108 0801 	add.w	r8, r8, #1
 8006112:	9304      	str	r3, [sp, #16]
 8006114:	f898 1000 	ldrb.w	r1, [r8]
 8006118:	482a      	ldr	r0, [pc, #168]	; (80061c4 <_vfiprintf_r+0x220>)
 800611a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800611e:	2206      	movs	r2, #6
 8006120:	f108 0701 	add.w	r7, r8, #1
 8006124:	f7fa f85c 	bl	80001e0 <memchr>
 8006128:	2800      	cmp	r0, #0
 800612a:	d037      	beq.n	800619c <_vfiprintf_r+0x1f8>
 800612c:	4b26      	ldr	r3, [pc, #152]	; (80061c8 <_vfiprintf_r+0x224>)
 800612e:	bb1b      	cbnz	r3, 8006178 <_vfiprintf_r+0x1d4>
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	3307      	adds	r3, #7
 8006134:	f023 0307 	bic.w	r3, r3, #7
 8006138:	3308      	adds	r3, #8
 800613a:	9303      	str	r3, [sp, #12]
 800613c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613e:	444b      	add	r3, r9
 8006140:	9309      	str	r3, [sp, #36]	; 0x24
 8006142:	e750      	b.n	8005fe6 <_vfiprintf_r+0x42>
 8006144:	fb05 3202 	mla	r2, r5, r2, r3
 8006148:	2001      	movs	r0, #1
 800614a:	4688      	mov	r8, r1
 800614c:	e78a      	b.n	8006064 <_vfiprintf_r+0xc0>
 800614e:	2300      	movs	r3, #0
 8006150:	f108 0801 	add.w	r8, r8, #1
 8006154:	9305      	str	r3, [sp, #20]
 8006156:	4619      	mov	r1, r3
 8006158:	250a      	movs	r5, #10
 800615a:	4640      	mov	r0, r8
 800615c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006160:	3a30      	subs	r2, #48	; 0x30
 8006162:	2a09      	cmp	r2, #9
 8006164:	d903      	bls.n	800616e <_vfiprintf_r+0x1ca>
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0c3      	beq.n	80060f2 <_vfiprintf_r+0x14e>
 800616a:	9105      	str	r1, [sp, #20]
 800616c:	e7c1      	b.n	80060f2 <_vfiprintf_r+0x14e>
 800616e:	fb05 2101 	mla	r1, r5, r1, r2
 8006172:	2301      	movs	r3, #1
 8006174:	4680      	mov	r8, r0
 8006176:	e7f0      	b.n	800615a <_vfiprintf_r+0x1b6>
 8006178:	ab03      	add	r3, sp, #12
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	4622      	mov	r2, r4
 800617e:	4b13      	ldr	r3, [pc, #76]	; (80061cc <_vfiprintf_r+0x228>)
 8006180:	a904      	add	r1, sp, #16
 8006182:	4630      	mov	r0, r6
 8006184:	f3af 8000 	nop.w
 8006188:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800618c:	4681      	mov	r9, r0
 800618e:	d1d5      	bne.n	800613c <_vfiprintf_r+0x198>
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	065b      	lsls	r3, r3, #25
 8006194:	f53f af7e 	bmi.w	8006094 <_vfiprintf_r+0xf0>
 8006198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800619a:	e77d      	b.n	8006098 <_vfiprintf_r+0xf4>
 800619c:	ab03      	add	r3, sp, #12
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	4622      	mov	r2, r4
 80061a2:	4b0a      	ldr	r3, [pc, #40]	; (80061cc <_vfiprintf_r+0x228>)
 80061a4:	a904      	add	r1, sp, #16
 80061a6:	4630      	mov	r0, r6
 80061a8:	f000 f888 	bl	80062bc <_printf_i>
 80061ac:	e7ec      	b.n	8006188 <_vfiprintf_r+0x1e4>
 80061ae:	bf00      	nop
 80061b0:	08006b20 	.word	0x08006b20
 80061b4:	08006b60 	.word	0x08006b60
 80061b8:	08006b40 	.word	0x08006b40
 80061bc:	08006b00 	.word	0x08006b00
 80061c0:	08006b66 	.word	0x08006b66
 80061c4:	08006b6a 	.word	0x08006b6a
 80061c8:	00000000 	.word	0x00000000
 80061cc:	08005f7f 	.word	0x08005f7f

080061d0 <_printf_common>:
 80061d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d4:	4691      	mov	r9, r2
 80061d6:	461f      	mov	r7, r3
 80061d8:	688a      	ldr	r2, [r1, #8]
 80061da:	690b      	ldr	r3, [r1, #16]
 80061dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061e0:	4293      	cmp	r3, r2
 80061e2:	bfb8      	it	lt
 80061e4:	4613      	movlt	r3, r2
 80061e6:	f8c9 3000 	str.w	r3, [r9]
 80061ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061ee:	4606      	mov	r6, r0
 80061f0:	460c      	mov	r4, r1
 80061f2:	b112      	cbz	r2, 80061fa <_printf_common+0x2a>
 80061f4:	3301      	adds	r3, #1
 80061f6:	f8c9 3000 	str.w	r3, [r9]
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	0699      	lsls	r1, r3, #26
 80061fe:	bf42      	ittt	mi
 8006200:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006204:	3302      	addmi	r3, #2
 8006206:	f8c9 3000 	strmi.w	r3, [r9]
 800620a:	6825      	ldr	r5, [r4, #0]
 800620c:	f015 0506 	ands.w	r5, r5, #6
 8006210:	d107      	bne.n	8006222 <_printf_common+0x52>
 8006212:	f104 0a19 	add.w	sl, r4, #25
 8006216:	68e3      	ldr	r3, [r4, #12]
 8006218:	f8d9 2000 	ldr.w	r2, [r9]
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	42ab      	cmp	r3, r5
 8006220:	dc28      	bgt.n	8006274 <_printf_common+0xa4>
 8006222:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006226:	6822      	ldr	r2, [r4, #0]
 8006228:	3300      	adds	r3, #0
 800622a:	bf18      	it	ne
 800622c:	2301      	movne	r3, #1
 800622e:	0692      	lsls	r2, r2, #26
 8006230:	d42d      	bmi.n	800628e <_printf_common+0xbe>
 8006232:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006236:	4639      	mov	r1, r7
 8006238:	4630      	mov	r0, r6
 800623a:	47c0      	blx	r8
 800623c:	3001      	adds	r0, #1
 800623e:	d020      	beq.n	8006282 <_printf_common+0xb2>
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	68e5      	ldr	r5, [r4, #12]
 8006244:	f8d9 2000 	ldr.w	r2, [r9]
 8006248:	f003 0306 	and.w	r3, r3, #6
 800624c:	2b04      	cmp	r3, #4
 800624e:	bf08      	it	eq
 8006250:	1aad      	subeq	r5, r5, r2
 8006252:	68a3      	ldr	r3, [r4, #8]
 8006254:	6922      	ldr	r2, [r4, #16]
 8006256:	bf0c      	ite	eq
 8006258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800625c:	2500      	movne	r5, #0
 800625e:	4293      	cmp	r3, r2
 8006260:	bfc4      	itt	gt
 8006262:	1a9b      	subgt	r3, r3, r2
 8006264:	18ed      	addgt	r5, r5, r3
 8006266:	f04f 0900 	mov.w	r9, #0
 800626a:	341a      	adds	r4, #26
 800626c:	454d      	cmp	r5, r9
 800626e:	d11a      	bne.n	80062a6 <_printf_common+0xd6>
 8006270:	2000      	movs	r0, #0
 8006272:	e008      	b.n	8006286 <_printf_common+0xb6>
 8006274:	2301      	movs	r3, #1
 8006276:	4652      	mov	r2, sl
 8006278:	4639      	mov	r1, r7
 800627a:	4630      	mov	r0, r6
 800627c:	47c0      	blx	r8
 800627e:	3001      	adds	r0, #1
 8006280:	d103      	bne.n	800628a <_printf_common+0xba>
 8006282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628a:	3501      	adds	r5, #1
 800628c:	e7c3      	b.n	8006216 <_printf_common+0x46>
 800628e:	18e1      	adds	r1, r4, r3
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	2030      	movs	r0, #48	; 0x30
 8006294:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006298:	4422      	add	r2, r4
 800629a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800629e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062a2:	3302      	adds	r3, #2
 80062a4:	e7c5      	b.n	8006232 <_printf_common+0x62>
 80062a6:	2301      	movs	r3, #1
 80062a8:	4622      	mov	r2, r4
 80062aa:	4639      	mov	r1, r7
 80062ac:	4630      	mov	r0, r6
 80062ae:	47c0      	blx	r8
 80062b0:	3001      	adds	r0, #1
 80062b2:	d0e6      	beq.n	8006282 <_printf_common+0xb2>
 80062b4:	f109 0901 	add.w	r9, r9, #1
 80062b8:	e7d8      	b.n	800626c <_printf_common+0x9c>
	...

080062bc <_printf_i>:
 80062bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80062c4:	460c      	mov	r4, r1
 80062c6:	7e09      	ldrb	r1, [r1, #24]
 80062c8:	b085      	sub	sp, #20
 80062ca:	296e      	cmp	r1, #110	; 0x6e
 80062cc:	4617      	mov	r7, r2
 80062ce:	4606      	mov	r6, r0
 80062d0:	4698      	mov	r8, r3
 80062d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062d4:	f000 80b3 	beq.w	800643e <_printf_i+0x182>
 80062d8:	d822      	bhi.n	8006320 <_printf_i+0x64>
 80062da:	2963      	cmp	r1, #99	; 0x63
 80062dc:	d036      	beq.n	800634c <_printf_i+0x90>
 80062de:	d80a      	bhi.n	80062f6 <_printf_i+0x3a>
 80062e0:	2900      	cmp	r1, #0
 80062e2:	f000 80b9 	beq.w	8006458 <_printf_i+0x19c>
 80062e6:	2958      	cmp	r1, #88	; 0x58
 80062e8:	f000 8083 	beq.w	80063f2 <_printf_i+0x136>
 80062ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80062f4:	e032      	b.n	800635c <_printf_i+0xa0>
 80062f6:	2964      	cmp	r1, #100	; 0x64
 80062f8:	d001      	beq.n	80062fe <_printf_i+0x42>
 80062fa:	2969      	cmp	r1, #105	; 0x69
 80062fc:	d1f6      	bne.n	80062ec <_printf_i+0x30>
 80062fe:	6820      	ldr	r0, [r4, #0]
 8006300:	6813      	ldr	r3, [r2, #0]
 8006302:	0605      	lsls	r5, r0, #24
 8006304:	f103 0104 	add.w	r1, r3, #4
 8006308:	d52a      	bpl.n	8006360 <_printf_i+0xa4>
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6011      	str	r1, [r2, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	da03      	bge.n	800631a <_printf_i+0x5e>
 8006312:	222d      	movs	r2, #45	; 0x2d
 8006314:	425b      	negs	r3, r3
 8006316:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800631a:	486f      	ldr	r0, [pc, #444]	; (80064d8 <_printf_i+0x21c>)
 800631c:	220a      	movs	r2, #10
 800631e:	e039      	b.n	8006394 <_printf_i+0xd8>
 8006320:	2973      	cmp	r1, #115	; 0x73
 8006322:	f000 809d 	beq.w	8006460 <_printf_i+0x1a4>
 8006326:	d808      	bhi.n	800633a <_printf_i+0x7e>
 8006328:	296f      	cmp	r1, #111	; 0x6f
 800632a:	d020      	beq.n	800636e <_printf_i+0xb2>
 800632c:	2970      	cmp	r1, #112	; 0x70
 800632e:	d1dd      	bne.n	80062ec <_printf_i+0x30>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	f043 0320 	orr.w	r3, r3, #32
 8006336:	6023      	str	r3, [r4, #0]
 8006338:	e003      	b.n	8006342 <_printf_i+0x86>
 800633a:	2975      	cmp	r1, #117	; 0x75
 800633c:	d017      	beq.n	800636e <_printf_i+0xb2>
 800633e:	2978      	cmp	r1, #120	; 0x78
 8006340:	d1d4      	bne.n	80062ec <_printf_i+0x30>
 8006342:	2378      	movs	r3, #120	; 0x78
 8006344:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006348:	4864      	ldr	r0, [pc, #400]	; (80064dc <_printf_i+0x220>)
 800634a:	e055      	b.n	80063f8 <_printf_i+0x13c>
 800634c:	6813      	ldr	r3, [r2, #0]
 800634e:	1d19      	adds	r1, r3, #4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6011      	str	r1, [r2, #0]
 8006354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800635c:	2301      	movs	r3, #1
 800635e:	e08c      	b.n	800647a <_printf_i+0x1be>
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6011      	str	r1, [r2, #0]
 8006364:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006368:	bf18      	it	ne
 800636a:	b21b      	sxthne	r3, r3
 800636c:	e7cf      	b.n	800630e <_printf_i+0x52>
 800636e:	6813      	ldr	r3, [r2, #0]
 8006370:	6825      	ldr	r5, [r4, #0]
 8006372:	1d18      	adds	r0, r3, #4
 8006374:	6010      	str	r0, [r2, #0]
 8006376:	0628      	lsls	r0, r5, #24
 8006378:	d501      	bpl.n	800637e <_printf_i+0xc2>
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	e002      	b.n	8006384 <_printf_i+0xc8>
 800637e:	0668      	lsls	r0, r5, #25
 8006380:	d5fb      	bpl.n	800637a <_printf_i+0xbe>
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	4854      	ldr	r0, [pc, #336]	; (80064d8 <_printf_i+0x21c>)
 8006386:	296f      	cmp	r1, #111	; 0x6f
 8006388:	bf14      	ite	ne
 800638a:	220a      	movne	r2, #10
 800638c:	2208      	moveq	r2, #8
 800638e:	2100      	movs	r1, #0
 8006390:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006394:	6865      	ldr	r5, [r4, #4]
 8006396:	60a5      	str	r5, [r4, #8]
 8006398:	2d00      	cmp	r5, #0
 800639a:	f2c0 8095 	blt.w	80064c8 <_printf_i+0x20c>
 800639e:	6821      	ldr	r1, [r4, #0]
 80063a0:	f021 0104 	bic.w	r1, r1, #4
 80063a4:	6021      	str	r1, [r4, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d13d      	bne.n	8006426 <_printf_i+0x16a>
 80063aa:	2d00      	cmp	r5, #0
 80063ac:	f040 808e 	bne.w	80064cc <_printf_i+0x210>
 80063b0:	4665      	mov	r5, ip
 80063b2:	2a08      	cmp	r2, #8
 80063b4:	d10b      	bne.n	80063ce <_printf_i+0x112>
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	07db      	lsls	r3, r3, #31
 80063ba:	d508      	bpl.n	80063ce <_printf_i+0x112>
 80063bc:	6923      	ldr	r3, [r4, #16]
 80063be:	6862      	ldr	r2, [r4, #4]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	bfde      	ittt	le
 80063c4:	2330      	movle	r3, #48	; 0x30
 80063c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063ca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80063ce:	ebac 0305 	sub.w	r3, ip, r5
 80063d2:	6123      	str	r3, [r4, #16]
 80063d4:	f8cd 8000 	str.w	r8, [sp]
 80063d8:	463b      	mov	r3, r7
 80063da:	aa03      	add	r2, sp, #12
 80063dc:	4621      	mov	r1, r4
 80063de:	4630      	mov	r0, r6
 80063e0:	f7ff fef6 	bl	80061d0 <_printf_common>
 80063e4:	3001      	adds	r0, #1
 80063e6:	d14d      	bne.n	8006484 <_printf_i+0x1c8>
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063ec:	b005      	add	sp, #20
 80063ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063f2:	4839      	ldr	r0, [pc, #228]	; (80064d8 <_printf_i+0x21c>)
 80063f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80063f8:	6813      	ldr	r3, [r2, #0]
 80063fa:	6821      	ldr	r1, [r4, #0]
 80063fc:	1d1d      	adds	r5, r3, #4
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6015      	str	r5, [r2, #0]
 8006402:	060a      	lsls	r2, r1, #24
 8006404:	d50b      	bpl.n	800641e <_printf_i+0x162>
 8006406:	07ca      	lsls	r2, r1, #31
 8006408:	bf44      	itt	mi
 800640a:	f041 0120 	orrmi.w	r1, r1, #32
 800640e:	6021      	strmi	r1, [r4, #0]
 8006410:	b91b      	cbnz	r3, 800641a <_printf_i+0x15e>
 8006412:	6822      	ldr	r2, [r4, #0]
 8006414:	f022 0220 	bic.w	r2, r2, #32
 8006418:	6022      	str	r2, [r4, #0]
 800641a:	2210      	movs	r2, #16
 800641c:	e7b7      	b.n	800638e <_printf_i+0xd2>
 800641e:	064d      	lsls	r5, r1, #25
 8006420:	bf48      	it	mi
 8006422:	b29b      	uxthmi	r3, r3
 8006424:	e7ef      	b.n	8006406 <_printf_i+0x14a>
 8006426:	4665      	mov	r5, ip
 8006428:	fbb3 f1f2 	udiv	r1, r3, r2
 800642c:	fb02 3311 	mls	r3, r2, r1, r3
 8006430:	5cc3      	ldrb	r3, [r0, r3]
 8006432:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006436:	460b      	mov	r3, r1
 8006438:	2900      	cmp	r1, #0
 800643a:	d1f5      	bne.n	8006428 <_printf_i+0x16c>
 800643c:	e7b9      	b.n	80063b2 <_printf_i+0xf6>
 800643e:	6813      	ldr	r3, [r2, #0]
 8006440:	6825      	ldr	r5, [r4, #0]
 8006442:	6961      	ldr	r1, [r4, #20]
 8006444:	1d18      	adds	r0, r3, #4
 8006446:	6010      	str	r0, [r2, #0]
 8006448:	0628      	lsls	r0, r5, #24
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	d501      	bpl.n	8006452 <_printf_i+0x196>
 800644e:	6019      	str	r1, [r3, #0]
 8006450:	e002      	b.n	8006458 <_printf_i+0x19c>
 8006452:	066a      	lsls	r2, r5, #25
 8006454:	d5fb      	bpl.n	800644e <_printf_i+0x192>
 8006456:	8019      	strh	r1, [r3, #0]
 8006458:	2300      	movs	r3, #0
 800645a:	6123      	str	r3, [r4, #16]
 800645c:	4665      	mov	r5, ip
 800645e:	e7b9      	b.n	80063d4 <_printf_i+0x118>
 8006460:	6813      	ldr	r3, [r2, #0]
 8006462:	1d19      	adds	r1, r3, #4
 8006464:	6011      	str	r1, [r2, #0]
 8006466:	681d      	ldr	r5, [r3, #0]
 8006468:	6862      	ldr	r2, [r4, #4]
 800646a:	2100      	movs	r1, #0
 800646c:	4628      	mov	r0, r5
 800646e:	f7f9 feb7 	bl	80001e0 <memchr>
 8006472:	b108      	cbz	r0, 8006478 <_printf_i+0x1bc>
 8006474:	1b40      	subs	r0, r0, r5
 8006476:	6060      	str	r0, [r4, #4]
 8006478:	6863      	ldr	r3, [r4, #4]
 800647a:	6123      	str	r3, [r4, #16]
 800647c:	2300      	movs	r3, #0
 800647e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006482:	e7a7      	b.n	80063d4 <_printf_i+0x118>
 8006484:	6923      	ldr	r3, [r4, #16]
 8006486:	462a      	mov	r2, r5
 8006488:	4639      	mov	r1, r7
 800648a:	4630      	mov	r0, r6
 800648c:	47c0      	blx	r8
 800648e:	3001      	adds	r0, #1
 8006490:	d0aa      	beq.n	80063e8 <_printf_i+0x12c>
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	079b      	lsls	r3, r3, #30
 8006496:	d413      	bmi.n	80064c0 <_printf_i+0x204>
 8006498:	68e0      	ldr	r0, [r4, #12]
 800649a:	9b03      	ldr	r3, [sp, #12]
 800649c:	4298      	cmp	r0, r3
 800649e:	bfb8      	it	lt
 80064a0:	4618      	movlt	r0, r3
 80064a2:	e7a3      	b.n	80063ec <_printf_i+0x130>
 80064a4:	2301      	movs	r3, #1
 80064a6:	464a      	mov	r2, r9
 80064a8:	4639      	mov	r1, r7
 80064aa:	4630      	mov	r0, r6
 80064ac:	47c0      	blx	r8
 80064ae:	3001      	adds	r0, #1
 80064b0:	d09a      	beq.n	80063e8 <_printf_i+0x12c>
 80064b2:	3501      	adds	r5, #1
 80064b4:	68e3      	ldr	r3, [r4, #12]
 80064b6:	9a03      	ldr	r2, [sp, #12]
 80064b8:	1a9b      	subs	r3, r3, r2
 80064ba:	42ab      	cmp	r3, r5
 80064bc:	dcf2      	bgt.n	80064a4 <_printf_i+0x1e8>
 80064be:	e7eb      	b.n	8006498 <_printf_i+0x1dc>
 80064c0:	2500      	movs	r5, #0
 80064c2:	f104 0919 	add.w	r9, r4, #25
 80064c6:	e7f5      	b.n	80064b4 <_printf_i+0x1f8>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1ac      	bne.n	8006426 <_printf_i+0x16a>
 80064cc:	7803      	ldrb	r3, [r0, #0]
 80064ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064d6:	e76c      	b.n	80063b2 <_printf_i+0xf6>
 80064d8:	08006b71 	.word	0x08006b71
 80064dc:	08006b82 	.word	0x08006b82

080064e0 <_sbrk_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4c06      	ldr	r4, [pc, #24]	; (80064fc <_sbrk_r+0x1c>)
 80064e4:	2300      	movs	r3, #0
 80064e6:	4605      	mov	r5, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	6023      	str	r3, [r4, #0]
 80064ec:	f7fa ffca 	bl	8001484 <_sbrk>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d102      	bne.n	80064fa <_sbrk_r+0x1a>
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	b103      	cbz	r3, 80064fa <_sbrk_r+0x1a>
 80064f8:	602b      	str	r3, [r5, #0]
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	200073d8 	.word	0x200073d8

08006500 <__sread>:
 8006500:	b510      	push	{r4, lr}
 8006502:	460c      	mov	r4, r1
 8006504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006508:	f000 fa96 	bl	8006a38 <_read_r>
 800650c:	2800      	cmp	r0, #0
 800650e:	bfab      	itete	ge
 8006510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006512:	89a3      	ldrhlt	r3, [r4, #12]
 8006514:	181b      	addge	r3, r3, r0
 8006516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800651a:	bfac      	ite	ge
 800651c:	6563      	strge	r3, [r4, #84]	; 0x54
 800651e:	81a3      	strhlt	r3, [r4, #12]
 8006520:	bd10      	pop	{r4, pc}

08006522 <__swrite>:
 8006522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006526:	461f      	mov	r7, r3
 8006528:	898b      	ldrh	r3, [r1, #12]
 800652a:	05db      	lsls	r3, r3, #23
 800652c:	4605      	mov	r5, r0
 800652e:	460c      	mov	r4, r1
 8006530:	4616      	mov	r6, r2
 8006532:	d505      	bpl.n	8006540 <__swrite+0x1e>
 8006534:	2302      	movs	r3, #2
 8006536:	2200      	movs	r2, #0
 8006538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800653c:	f000 f9b6 	bl	80068ac <_lseek_r>
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800654a:	81a3      	strh	r3, [r4, #12]
 800654c:	4632      	mov	r2, r6
 800654e:	463b      	mov	r3, r7
 8006550:	4628      	mov	r0, r5
 8006552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006556:	f000 b869 	b.w	800662c <_write_r>

0800655a <__sseek>:
 800655a:	b510      	push	{r4, lr}
 800655c:	460c      	mov	r4, r1
 800655e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006562:	f000 f9a3 	bl	80068ac <_lseek_r>
 8006566:	1c43      	adds	r3, r0, #1
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	bf15      	itete	ne
 800656c:	6560      	strne	r0, [r4, #84]	; 0x54
 800656e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006576:	81a3      	strheq	r3, [r4, #12]
 8006578:	bf18      	it	ne
 800657a:	81a3      	strhne	r3, [r4, #12]
 800657c:	bd10      	pop	{r4, pc}

0800657e <__sclose>:
 800657e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006582:	f000 b8d3 	b.w	800672c <_close_r>
	...

08006588 <__swbuf_r>:
 8006588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658a:	460e      	mov	r6, r1
 800658c:	4614      	mov	r4, r2
 800658e:	4605      	mov	r5, r0
 8006590:	b118      	cbz	r0, 800659a <__swbuf_r+0x12>
 8006592:	6983      	ldr	r3, [r0, #24]
 8006594:	b90b      	cbnz	r3, 800659a <__swbuf_r+0x12>
 8006596:	f7ff fbf7 	bl	8005d88 <__sinit>
 800659a:	4b21      	ldr	r3, [pc, #132]	; (8006620 <__swbuf_r+0x98>)
 800659c:	429c      	cmp	r4, r3
 800659e:	d12a      	bne.n	80065f6 <__swbuf_r+0x6e>
 80065a0:	686c      	ldr	r4, [r5, #4]
 80065a2:	69a3      	ldr	r3, [r4, #24]
 80065a4:	60a3      	str	r3, [r4, #8]
 80065a6:	89a3      	ldrh	r3, [r4, #12]
 80065a8:	071a      	lsls	r2, r3, #28
 80065aa:	d52e      	bpl.n	800660a <__swbuf_r+0x82>
 80065ac:	6923      	ldr	r3, [r4, #16]
 80065ae:	b363      	cbz	r3, 800660a <__swbuf_r+0x82>
 80065b0:	6923      	ldr	r3, [r4, #16]
 80065b2:	6820      	ldr	r0, [r4, #0]
 80065b4:	1ac0      	subs	r0, r0, r3
 80065b6:	6963      	ldr	r3, [r4, #20]
 80065b8:	b2f6      	uxtb	r6, r6
 80065ba:	4283      	cmp	r3, r0
 80065bc:	4637      	mov	r7, r6
 80065be:	dc04      	bgt.n	80065ca <__swbuf_r+0x42>
 80065c0:	4621      	mov	r1, r4
 80065c2:	4628      	mov	r0, r5
 80065c4:	f000 f948 	bl	8006858 <_fflush_r>
 80065c8:	bb28      	cbnz	r0, 8006616 <__swbuf_r+0x8e>
 80065ca:	68a3      	ldr	r3, [r4, #8]
 80065cc:	3b01      	subs	r3, #1
 80065ce:	60a3      	str	r3, [r4, #8]
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	6022      	str	r2, [r4, #0]
 80065d6:	701e      	strb	r6, [r3, #0]
 80065d8:	6963      	ldr	r3, [r4, #20]
 80065da:	3001      	adds	r0, #1
 80065dc:	4283      	cmp	r3, r0
 80065de:	d004      	beq.n	80065ea <__swbuf_r+0x62>
 80065e0:	89a3      	ldrh	r3, [r4, #12]
 80065e2:	07db      	lsls	r3, r3, #31
 80065e4:	d519      	bpl.n	800661a <__swbuf_r+0x92>
 80065e6:	2e0a      	cmp	r6, #10
 80065e8:	d117      	bne.n	800661a <__swbuf_r+0x92>
 80065ea:	4621      	mov	r1, r4
 80065ec:	4628      	mov	r0, r5
 80065ee:	f000 f933 	bl	8006858 <_fflush_r>
 80065f2:	b190      	cbz	r0, 800661a <__swbuf_r+0x92>
 80065f4:	e00f      	b.n	8006616 <__swbuf_r+0x8e>
 80065f6:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <__swbuf_r+0x9c>)
 80065f8:	429c      	cmp	r4, r3
 80065fa:	d101      	bne.n	8006600 <__swbuf_r+0x78>
 80065fc:	68ac      	ldr	r4, [r5, #8]
 80065fe:	e7d0      	b.n	80065a2 <__swbuf_r+0x1a>
 8006600:	4b09      	ldr	r3, [pc, #36]	; (8006628 <__swbuf_r+0xa0>)
 8006602:	429c      	cmp	r4, r3
 8006604:	bf08      	it	eq
 8006606:	68ec      	ldreq	r4, [r5, #12]
 8006608:	e7cb      	b.n	80065a2 <__swbuf_r+0x1a>
 800660a:	4621      	mov	r1, r4
 800660c:	4628      	mov	r0, r5
 800660e:	f000 f81f 	bl	8006650 <__swsetup_r>
 8006612:	2800      	cmp	r0, #0
 8006614:	d0cc      	beq.n	80065b0 <__swbuf_r+0x28>
 8006616:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800661a:	4638      	mov	r0, r7
 800661c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800661e:	bf00      	nop
 8006620:	08006b20 	.word	0x08006b20
 8006624:	08006b40 	.word	0x08006b40
 8006628:	08006b00 	.word	0x08006b00

0800662c <_write_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4c07      	ldr	r4, [pc, #28]	; (800664c <_write_r+0x20>)
 8006630:	4605      	mov	r5, r0
 8006632:	4608      	mov	r0, r1
 8006634:	4611      	mov	r1, r2
 8006636:	2200      	movs	r2, #0
 8006638:	6022      	str	r2, [r4, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	f7fa fed1 	bl	80013e2 <_write>
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	d102      	bne.n	800664a <_write_r+0x1e>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	b103      	cbz	r3, 800664a <_write_r+0x1e>
 8006648:	602b      	str	r3, [r5, #0]
 800664a:	bd38      	pop	{r3, r4, r5, pc}
 800664c:	200073d8 	.word	0x200073d8

08006650 <__swsetup_r>:
 8006650:	4b32      	ldr	r3, [pc, #200]	; (800671c <__swsetup_r+0xcc>)
 8006652:	b570      	push	{r4, r5, r6, lr}
 8006654:	681d      	ldr	r5, [r3, #0]
 8006656:	4606      	mov	r6, r0
 8006658:	460c      	mov	r4, r1
 800665a:	b125      	cbz	r5, 8006666 <__swsetup_r+0x16>
 800665c:	69ab      	ldr	r3, [r5, #24]
 800665e:	b913      	cbnz	r3, 8006666 <__swsetup_r+0x16>
 8006660:	4628      	mov	r0, r5
 8006662:	f7ff fb91 	bl	8005d88 <__sinit>
 8006666:	4b2e      	ldr	r3, [pc, #184]	; (8006720 <__swsetup_r+0xd0>)
 8006668:	429c      	cmp	r4, r3
 800666a:	d10f      	bne.n	800668c <__swsetup_r+0x3c>
 800666c:	686c      	ldr	r4, [r5, #4]
 800666e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006672:	b29a      	uxth	r2, r3
 8006674:	0715      	lsls	r5, r2, #28
 8006676:	d42c      	bmi.n	80066d2 <__swsetup_r+0x82>
 8006678:	06d0      	lsls	r0, r2, #27
 800667a:	d411      	bmi.n	80066a0 <__swsetup_r+0x50>
 800667c:	2209      	movs	r2, #9
 800667e:	6032      	str	r2, [r6, #0]
 8006680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006684:	81a3      	strh	r3, [r4, #12]
 8006686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800668a:	e03e      	b.n	800670a <__swsetup_r+0xba>
 800668c:	4b25      	ldr	r3, [pc, #148]	; (8006724 <__swsetup_r+0xd4>)
 800668e:	429c      	cmp	r4, r3
 8006690:	d101      	bne.n	8006696 <__swsetup_r+0x46>
 8006692:	68ac      	ldr	r4, [r5, #8]
 8006694:	e7eb      	b.n	800666e <__swsetup_r+0x1e>
 8006696:	4b24      	ldr	r3, [pc, #144]	; (8006728 <__swsetup_r+0xd8>)
 8006698:	429c      	cmp	r4, r3
 800669a:	bf08      	it	eq
 800669c:	68ec      	ldreq	r4, [r5, #12]
 800669e:	e7e6      	b.n	800666e <__swsetup_r+0x1e>
 80066a0:	0751      	lsls	r1, r2, #29
 80066a2:	d512      	bpl.n	80066ca <__swsetup_r+0x7a>
 80066a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066a6:	b141      	cbz	r1, 80066ba <__swsetup_r+0x6a>
 80066a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066ac:	4299      	cmp	r1, r3
 80066ae:	d002      	beq.n	80066b6 <__swsetup_r+0x66>
 80066b0:	4630      	mov	r0, r6
 80066b2:	f000 f973 	bl	800699c <_free_r>
 80066b6:	2300      	movs	r3, #0
 80066b8:	6363      	str	r3, [r4, #52]	; 0x34
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066c0:	81a3      	strh	r3, [r4, #12]
 80066c2:	2300      	movs	r3, #0
 80066c4:	6063      	str	r3, [r4, #4]
 80066c6:	6923      	ldr	r3, [r4, #16]
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	89a3      	ldrh	r3, [r4, #12]
 80066cc:	f043 0308 	orr.w	r3, r3, #8
 80066d0:	81a3      	strh	r3, [r4, #12]
 80066d2:	6923      	ldr	r3, [r4, #16]
 80066d4:	b94b      	cbnz	r3, 80066ea <__swsetup_r+0x9a>
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e0:	d003      	beq.n	80066ea <__swsetup_r+0x9a>
 80066e2:	4621      	mov	r1, r4
 80066e4:	4630      	mov	r0, r6
 80066e6:	f000 f917 	bl	8006918 <__smakebuf_r>
 80066ea:	89a2      	ldrh	r2, [r4, #12]
 80066ec:	f012 0301 	ands.w	r3, r2, #1
 80066f0:	d00c      	beq.n	800670c <__swsetup_r+0xbc>
 80066f2:	2300      	movs	r3, #0
 80066f4:	60a3      	str	r3, [r4, #8]
 80066f6:	6963      	ldr	r3, [r4, #20]
 80066f8:	425b      	negs	r3, r3
 80066fa:	61a3      	str	r3, [r4, #24]
 80066fc:	6923      	ldr	r3, [r4, #16]
 80066fe:	b953      	cbnz	r3, 8006716 <__swsetup_r+0xc6>
 8006700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006704:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006708:	d1ba      	bne.n	8006680 <__swsetup_r+0x30>
 800670a:	bd70      	pop	{r4, r5, r6, pc}
 800670c:	0792      	lsls	r2, r2, #30
 800670e:	bf58      	it	pl
 8006710:	6963      	ldrpl	r3, [r4, #20]
 8006712:	60a3      	str	r3, [r4, #8]
 8006714:	e7f2      	b.n	80066fc <__swsetup_r+0xac>
 8006716:	2000      	movs	r0, #0
 8006718:	e7f7      	b.n	800670a <__swsetup_r+0xba>
 800671a:	bf00      	nop
 800671c:	2000008c 	.word	0x2000008c
 8006720:	08006b20 	.word	0x08006b20
 8006724:	08006b40 	.word	0x08006b40
 8006728:	08006b00 	.word	0x08006b00

0800672c <_close_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4c06      	ldr	r4, [pc, #24]	; (8006748 <_close_r+0x1c>)
 8006730:	2300      	movs	r3, #0
 8006732:	4605      	mov	r5, r0
 8006734:	4608      	mov	r0, r1
 8006736:	6023      	str	r3, [r4, #0]
 8006738:	f7fa fe6f 	bl	800141a <_close>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d102      	bne.n	8006746 <_close_r+0x1a>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	b103      	cbz	r3, 8006746 <_close_r+0x1a>
 8006744:	602b      	str	r3, [r5, #0]
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	200073d8 	.word	0x200073d8

0800674c <__sflush_r>:
 800674c:	898a      	ldrh	r2, [r1, #12]
 800674e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006752:	4605      	mov	r5, r0
 8006754:	0710      	lsls	r0, r2, #28
 8006756:	460c      	mov	r4, r1
 8006758:	d458      	bmi.n	800680c <__sflush_r+0xc0>
 800675a:	684b      	ldr	r3, [r1, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	dc05      	bgt.n	800676c <__sflush_r+0x20>
 8006760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	dc02      	bgt.n	800676c <__sflush_r+0x20>
 8006766:	2000      	movs	r0, #0
 8006768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800676c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800676e:	2e00      	cmp	r6, #0
 8006770:	d0f9      	beq.n	8006766 <__sflush_r+0x1a>
 8006772:	2300      	movs	r3, #0
 8006774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006778:	682f      	ldr	r7, [r5, #0]
 800677a:	6a21      	ldr	r1, [r4, #32]
 800677c:	602b      	str	r3, [r5, #0]
 800677e:	d032      	beq.n	80067e6 <__sflush_r+0x9a>
 8006780:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006782:	89a3      	ldrh	r3, [r4, #12]
 8006784:	075a      	lsls	r2, r3, #29
 8006786:	d505      	bpl.n	8006794 <__sflush_r+0x48>
 8006788:	6863      	ldr	r3, [r4, #4]
 800678a:	1ac0      	subs	r0, r0, r3
 800678c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800678e:	b10b      	cbz	r3, 8006794 <__sflush_r+0x48>
 8006790:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006792:	1ac0      	subs	r0, r0, r3
 8006794:	2300      	movs	r3, #0
 8006796:	4602      	mov	r2, r0
 8006798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800679a:	6a21      	ldr	r1, [r4, #32]
 800679c:	4628      	mov	r0, r5
 800679e:	47b0      	blx	r6
 80067a0:	1c43      	adds	r3, r0, #1
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	d106      	bne.n	80067b4 <__sflush_r+0x68>
 80067a6:	6829      	ldr	r1, [r5, #0]
 80067a8:	291d      	cmp	r1, #29
 80067aa:	d848      	bhi.n	800683e <__sflush_r+0xf2>
 80067ac:	4a29      	ldr	r2, [pc, #164]	; (8006854 <__sflush_r+0x108>)
 80067ae:	40ca      	lsrs	r2, r1
 80067b0:	07d6      	lsls	r6, r2, #31
 80067b2:	d544      	bpl.n	800683e <__sflush_r+0xf2>
 80067b4:	2200      	movs	r2, #0
 80067b6:	6062      	str	r2, [r4, #4]
 80067b8:	04d9      	lsls	r1, r3, #19
 80067ba:	6922      	ldr	r2, [r4, #16]
 80067bc:	6022      	str	r2, [r4, #0]
 80067be:	d504      	bpl.n	80067ca <__sflush_r+0x7e>
 80067c0:	1c42      	adds	r2, r0, #1
 80067c2:	d101      	bne.n	80067c8 <__sflush_r+0x7c>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	b903      	cbnz	r3, 80067ca <__sflush_r+0x7e>
 80067c8:	6560      	str	r0, [r4, #84]	; 0x54
 80067ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067cc:	602f      	str	r7, [r5, #0]
 80067ce:	2900      	cmp	r1, #0
 80067d0:	d0c9      	beq.n	8006766 <__sflush_r+0x1a>
 80067d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067d6:	4299      	cmp	r1, r3
 80067d8:	d002      	beq.n	80067e0 <__sflush_r+0x94>
 80067da:	4628      	mov	r0, r5
 80067dc:	f000 f8de 	bl	800699c <_free_r>
 80067e0:	2000      	movs	r0, #0
 80067e2:	6360      	str	r0, [r4, #52]	; 0x34
 80067e4:	e7c0      	b.n	8006768 <__sflush_r+0x1c>
 80067e6:	2301      	movs	r3, #1
 80067e8:	4628      	mov	r0, r5
 80067ea:	47b0      	blx	r6
 80067ec:	1c41      	adds	r1, r0, #1
 80067ee:	d1c8      	bne.n	8006782 <__sflush_r+0x36>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0c5      	beq.n	8006782 <__sflush_r+0x36>
 80067f6:	2b1d      	cmp	r3, #29
 80067f8:	d001      	beq.n	80067fe <__sflush_r+0xb2>
 80067fa:	2b16      	cmp	r3, #22
 80067fc:	d101      	bne.n	8006802 <__sflush_r+0xb6>
 80067fe:	602f      	str	r7, [r5, #0]
 8006800:	e7b1      	b.n	8006766 <__sflush_r+0x1a>
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006808:	81a3      	strh	r3, [r4, #12]
 800680a:	e7ad      	b.n	8006768 <__sflush_r+0x1c>
 800680c:	690f      	ldr	r7, [r1, #16]
 800680e:	2f00      	cmp	r7, #0
 8006810:	d0a9      	beq.n	8006766 <__sflush_r+0x1a>
 8006812:	0793      	lsls	r3, r2, #30
 8006814:	680e      	ldr	r6, [r1, #0]
 8006816:	bf08      	it	eq
 8006818:	694b      	ldreq	r3, [r1, #20]
 800681a:	600f      	str	r7, [r1, #0]
 800681c:	bf18      	it	ne
 800681e:	2300      	movne	r3, #0
 8006820:	eba6 0807 	sub.w	r8, r6, r7
 8006824:	608b      	str	r3, [r1, #8]
 8006826:	f1b8 0f00 	cmp.w	r8, #0
 800682a:	dd9c      	ble.n	8006766 <__sflush_r+0x1a>
 800682c:	4643      	mov	r3, r8
 800682e:	463a      	mov	r2, r7
 8006830:	6a21      	ldr	r1, [r4, #32]
 8006832:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006834:	4628      	mov	r0, r5
 8006836:	47b0      	blx	r6
 8006838:	2800      	cmp	r0, #0
 800683a:	dc06      	bgt.n	800684a <__sflush_r+0xfe>
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006842:	81a3      	strh	r3, [r4, #12]
 8006844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006848:	e78e      	b.n	8006768 <__sflush_r+0x1c>
 800684a:	4407      	add	r7, r0
 800684c:	eba8 0800 	sub.w	r8, r8, r0
 8006850:	e7e9      	b.n	8006826 <__sflush_r+0xda>
 8006852:	bf00      	nop
 8006854:	20400001 	.word	0x20400001

08006858 <_fflush_r>:
 8006858:	b538      	push	{r3, r4, r5, lr}
 800685a:	690b      	ldr	r3, [r1, #16]
 800685c:	4605      	mov	r5, r0
 800685e:	460c      	mov	r4, r1
 8006860:	b1db      	cbz	r3, 800689a <_fflush_r+0x42>
 8006862:	b118      	cbz	r0, 800686c <_fflush_r+0x14>
 8006864:	6983      	ldr	r3, [r0, #24]
 8006866:	b90b      	cbnz	r3, 800686c <_fflush_r+0x14>
 8006868:	f7ff fa8e 	bl	8005d88 <__sinit>
 800686c:	4b0c      	ldr	r3, [pc, #48]	; (80068a0 <_fflush_r+0x48>)
 800686e:	429c      	cmp	r4, r3
 8006870:	d109      	bne.n	8006886 <_fflush_r+0x2e>
 8006872:	686c      	ldr	r4, [r5, #4]
 8006874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006878:	b17b      	cbz	r3, 800689a <_fflush_r+0x42>
 800687a:	4621      	mov	r1, r4
 800687c:	4628      	mov	r0, r5
 800687e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006882:	f7ff bf63 	b.w	800674c <__sflush_r>
 8006886:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <_fflush_r+0x4c>)
 8006888:	429c      	cmp	r4, r3
 800688a:	d101      	bne.n	8006890 <_fflush_r+0x38>
 800688c:	68ac      	ldr	r4, [r5, #8]
 800688e:	e7f1      	b.n	8006874 <_fflush_r+0x1c>
 8006890:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <_fflush_r+0x50>)
 8006892:	429c      	cmp	r4, r3
 8006894:	bf08      	it	eq
 8006896:	68ec      	ldreq	r4, [r5, #12]
 8006898:	e7ec      	b.n	8006874 <_fflush_r+0x1c>
 800689a:	2000      	movs	r0, #0
 800689c:	bd38      	pop	{r3, r4, r5, pc}
 800689e:	bf00      	nop
 80068a0:	08006b20 	.word	0x08006b20
 80068a4:	08006b40 	.word	0x08006b40
 80068a8:	08006b00 	.word	0x08006b00

080068ac <_lseek_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4c07      	ldr	r4, [pc, #28]	; (80068cc <_lseek_r+0x20>)
 80068b0:	4605      	mov	r5, r0
 80068b2:	4608      	mov	r0, r1
 80068b4:	4611      	mov	r1, r2
 80068b6:	2200      	movs	r2, #0
 80068b8:	6022      	str	r2, [r4, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	f7fa fdd4 	bl	8001468 <_lseek>
 80068c0:	1c43      	adds	r3, r0, #1
 80068c2:	d102      	bne.n	80068ca <_lseek_r+0x1e>
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	b103      	cbz	r3, 80068ca <_lseek_r+0x1e>
 80068c8:	602b      	str	r3, [r5, #0]
 80068ca:	bd38      	pop	{r3, r4, r5, pc}
 80068cc:	200073d8 	.word	0x200073d8

080068d0 <__swhatbuf_r>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	460e      	mov	r6, r1
 80068d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d8:	2900      	cmp	r1, #0
 80068da:	b096      	sub	sp, #88	; 0x58
 80068dc:	4614      	mov	r4, r2
 80068de:	461d      	mov	r5, r3
 80068e0:	da07      	bge.n	80068f2 <__swhatbuf_r+0x22>
 80068e2:	2300      	movs	r3, #0
 80068e4:	602b      	str	r3, [r5, #0]
 80068e6:	89b3      	ldrh	r3, [r6, #12]
 80068e8:	061a      	lsls	r2, r3, #24
 80068ea:	d410      	bmi.n	800690e <__swhatbuf_r+0x3e>
 80068ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068f0:	e00e      	b.n	8006910 <__swhatbuf_r+0x40>
 80068f2:	466a      	mov	r2, sp
 80068f4:	f000 f8b2 	bl	8006a5c <_fstat_r>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	dbf2      	blt.n	80068e2 <__swhatbuf_r+0x12>
 80068fc:	9a01      	ldr	r2, [sp, #4]
 80068fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006902:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006906:	425a      	negs	r2, r3
 8006908:	415a      	adcs	r2, r3
 800690a:	602a      	str	r2, [r5, #0]
 800690c:	e7ee      	b.n	80068ec <__swhatbuf_r+0x1c>
 800690e:	2340      	movs	r3, #64	; 0x40
 8006910:	2000      	movs	r0, #0
 8006912:	6023      	str	r3, [r4, #0]
 8006914:	b016      	add	sp, #88	; 0x58
 8006916:	bd70      	pop	{r4, r5, r6, pc}

08006918 <__smakebuf_r>:
 8006918:	898b      	ldrh	r3, [r1, #12]
 800691a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800691c:	079d      	lsls	r5, r3, #30
 800691e:	4606      	mov	r6, r0
 8006920:	460c      	mov	r4, r1
 8006922:	d507      	bpl.n	8006934 <__smakebuf_r+0x1c>
 8006924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	2301      	movs	r3, #1
 800692e:	6163      	str	r3, [r4, #20]
 8006930:	b002      	add	sp, #8
 8006932:	bd70      	pop	{r4, r5, r6, pc}
 8006934:	ab01      	add	r3, sp, #4
 8006936:	466a      	mov	r2, sp
 8006938:	f7ff ffca 	bl	80068d0 <__swhatbuf_r>
 800693c:	9900      	ldr	r1, [sp, #0]
 800693e:	4605      	mov	r5, r0
 8006940:	4630      	mov	r0, r6
 8006942:	f7ff faab 	bl	8005e9c <_malloc_r>
 8006946:	b948      	cbnz	r0, 800695c <__smakebuf_r+0x44>
 8006948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800694c:	059a      	lsls	r2, r3, #22
 800694e:	d4ef      	bmi.n	8006930 <__smakebuf_r+0x18>
 8006950:	f023 0303 	bic.w	r3, r3, #3
 8006954:	f043 0302 	orr.w	r3, r3, #2
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	e7e3      	b.n	8006924 <__smakebuf_r+0xc>
 800695c:	4b0d      	ldr	r3, [pc, #52]	; (8006994 <__smakebuf_r+0x7c>)
 800695e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006960:	89a3      	ldrh	r3, [r4, #12]
 8006962:	6020      	str	r0, [r4, #0]
 8006964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006968:	81a3      	strh	r3, [r4, #12]
 800696a:	9b00      	ldr	r3, [sp, #0]
 800696c:	6163      	str	r3, [r4, #20]
 800696e:	9b01      	ldr	r3, [sp, #4]
 8006970:	6120      	str	r0, [r4, #16]
 8006972:	b15b      	cbz	r3, 800698c <__smakebuf_r+0x74>
 8006974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006978:	4630      	mov	r0, r6
 800697a:	f000 f881 	bl	8006a80 <_isatty_r>
 800697e:	b128      	cbz	r0, 800698c <__smakebuf_r+0x74>
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	f023 0303 	bic.w	r3, r3, #3
 8006986:	f043 0301 	orr.w	r3, r3, #1
 800698a:	81a3      	strh	r3, [r4, #12]
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	431d      	orrs	r5, r3
 8006990:	81a5      	strh	r5, [r4, #12]
 8006992:	e7cd      	b.n	8006930 <__smakebuf_r+0x18>
 8006994:	08005d51 	.word	0x08005d51

08006998 <__malloc_lock>:
 8006998:	4770      	bx	lr

0800699a <__malloc_unlock>:
 800699a:	4770      	bx	lr

0800699c <_free_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4605      	mov	r5, r0
 80069a0:	2900      	cmp	r1, #0
 80069a2:	d045      	beq.n	8006a30 <_free_r+0x94>
 80069a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069a8:	1f0c      	subs	r4, r1, #4
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	bfb8      	it	lt
 80069ae:	18e4      	addlt	r4, r4, r3
 80069b0:	f7ff fff2 	bl	8006998 <__malloc_lock>
 80069b4:	4a1f      	ldr	r2, [pc, #124]	; (8006a34 <_free_r+0x98>)
 80069b6:	6813      	ldr	r3, [r2, #0]
 80069b8:	4610      	mov	r0, r2
 80069ba:	b933      	cbnz	r3, 80069ca <_free_r+0x2e>
 80069bc:	6063      	str	r3, [r4, #4]
 80069be:	6014      	str	r4, [r2, #0]
 80069c0:	4628      	mov	r0, r5
 80069c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069c6:	f7ff bfe8 	b.w	800699a <__malloc_unlock>
 80069ca:	42a3      	cmp	r3, r4
 80069cc:	d90c      	bls.n	80069e8 <_free_r+0x4c>
 80069ce:	6821      	ldr	r1, [r4, #0]
 80069d0:	1862      	adds	r2, r4, r1
 80069d2:	4293      	cmp	r3, r2
 80069d4:	bf04      	itt	eq
 80069d6:	681a      	ldreq	r2, [r3, #0]
 80069d8:	685b      	ldreq	r3, [r3, #4]
 80069da:	6063      	str	r3, [r4, #4]
 80069dc:	bf04      	itt	eq
 80069de:	1852      	addeq	r2, r2, r1
 80069e0:	6022      	streq	r2, [r4, #0]
 80069e2:	6004      	str	r4, [r0, #0]
 80069e4:	e7ec      	b.n	80069c0 <_free_r+0x24>
 80069e6:	4613      	mov	r3, r2
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	b10a      	cbz	r2, 80069f0 <_free_r+0x54>
 80069ec:	42a2      	cmp	r2, r4
 80069ee:	d9fa      	bls.n	80069e6 <_free_r+0x4a>
 80069f0:	6819      	ldr	r1, [r3, #0]
 80069f2:	1858      	adds	r0, r3, r1
 80069f4:	42a0      	cmp	r0, r4
 80069f6:	d10b      	bne.n	8006a10 <_free_r+0x74>
 80069f8:	6820      	ldr	r0, [r4, #0]
 80069fa:	4401      	add	r1, r0
 80069fc:	1858      	adds	r0, r3, r1
 80069fe:	4282      	cmp	r2, r0
 8006a00:	6019      	str	r1, [r3, #0]
 8006a02:	d1dd      	bne.n	80069c0 <_free_r+0x24>
 8006a04:	6810      	ldr	r0, [r2, #0]
 8006a06:	6852      	ldr	r2, [r2, #4]
 8006a08:	605a      	str	r2, [r3, #4]
 8006a0a:	4401      	add	r1, r0
 8006a0c:	6019      	str	r1, [r3, #0]
 8006a0e:	e7d7      	b.n	80069c0 <_free_r+0x24>
 8006a10:	d902      	bls.n	8006a18 <_free_r+0x7c>
 8006a12:	230c      	movs	r3, #12
 8006a14:	602b      	str	r3, [r5, #0]
 8006a16:	e7d3      	b.n	80069c0 <_free_r+0x24>
 8006a18:	6820      	ldr	r0, [r4, #0]
 8006a1a:	1821      	adds	r1, r4, r0
 8006a1c:	428a      	cmp	r2, r1
 8006a1e:	bf04      	itt	eq
 8006a20:	6811      	ldreq	r1, [r2, #0]
 8006a22:	6852      	ldreq	r2, [r2, #4]
 8006a24:	6062      	str	r2, [r4, #4]
 8006a26:	bf04      	itt	eq
 8006a28:	1809      	addeq	r1, r1, r0
 8006a2a:	6021      	streq	r1, [r4, #0]
 8006a2c:	605c      	str	r4, [r3, #4]
 8006a2e:	e7c7      	b.n	80069c0 <_free_r+0x24>
 8006a30:	bd38      	pop	{r3, r4, r5, pc}
 8006a32:	bf00      	nop
 8006a34:	20000124 	.word	0x20000124

08006a38 <_read_r>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	4c07      	ldr	r4, [pc, #28]	; (8006a58 <_read_r+0x20>)
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	4608      	mov	r0, r1
 8006a40:	4611      	mov	r1, r2
 8006a42:	2200      	movs	r2, #0
 8006a44:	6022      	str	r2, [r4, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	f7fa fcae 	bl	80013a8 <_read>
 8006a4c:	1c43      	adds	r3, r0, #1
 8006a4e:	d102      	bne.n	8006a56 <_read_r+0x1e>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	b103      	cbz	r3, 8006a56 <_read_r+0x1e>
 8006a54:	602b      	str	r3, [r5, #0]
 8006a56:	bd38      	pop	{r3, r4, r5, pc}
 8006a58:	200073d8 	.word	0x200073d8

08006a5c <_fstat_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	4c07      	ldr	r4, [pc, #28]	; (8006a7c <_fstat_r+0x20>)
 8006a60:	2300      	movs	r3, #0
 8006a62:	4605      	mov	r5, r0
 8006a64:	4608      	mov	r0, r1
 8006a66:	4611      	mov	r1, r2
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	f7fa fce2 	bl	8001432 <_fstat>
 8006a6e:	1c43      	adds	r3, r0, #1
 8006a70:	d102      	bne.n	8006a78 <_fstat_r+0x1c>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	b103      	cbz	r3, 8006a78 <_fstat_r+0x1c>
 8006a76:	602b      	str	r3, [r5, #0]
 8006a78:	bd38      	pop	{r3, r4, r5, pc}
 8006a7a:	bf00      	nop
 8006a7c:	200073d8 	.word	0x200073d8

08006a80 <_isatty_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4c06      	ldr	r4, [pc, #24]	; (8006a9c <_isatty_r+0x1c>)
 8006a84:	2300      	movs	r3, #0
 8006a86:	4605      	mov	r5, r0
 8006a88:	4608      	mov	r0, r1
 8006a8a:	6023      	str	r3, [r4, #0]
 8006a8c:	f7fa fce1 	bl	8001452 <_isatty>
 8006a90:	1c43      	adds	r3, r0, #1
 8006a92:	d102      	bne.n	8006a9a <_isatty_r+0x1a>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	b103      	cbz	r3, 8006a9a <_isatty_r+0x1a>
 8006a98:	602b      	str	r3, [r5, #0]
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	200073d8 	.word	0x200073d8

08006aa0 <_init>:
 8006aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa2:	bf00      	nop
 8006aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa6:	bc08      	pop	{r3}
 8006aa8:	469e      	mov	lr, r3
 8006aaa:	4770      	bx	lr

08006aac <_fini>:
 8006aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aae:	bf00      	nop
 8006ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab2:	bc08      	pop	{r3}
 8006ab4:	469e      	mov	lr, r3
 8006ab6:	4770      	bx	lr
