
BNIRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030fc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003290  08003290  00013290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003348  08003348  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003348  08003348  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003348  08003348  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003348  08003348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800334c  0800334c  0001334c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  0800335c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  0800335c  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b975  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019ba  00000000  00000000  0002b9b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  0002d370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  0002df88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c6ae  00000000  00000000  0002eac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000091fd  00000000  00000000  0004b176  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ab8fa  00000000  00000000  00054373  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ffc6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d0  00000000  00000000  000ffce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003278 	.word	0x08003278

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003278 	.word	0x08003278

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b0a0      	sub	sp, #128	; 0x80
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fab1 	bl	8000740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f84b 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f92b 	bl	800043c <MX_GPIO_Init>
  MX_DMA_Init();
 80001e6:	f000 f90b 	bl	8000400 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80001ea:	f000 f8d9 	bl	80003a0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80001ee:	f000 f8a1 	bl	8000334 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //binary sequence to be written in the BSRR register of the GPIOA port pin PA0
  uint32_t DIBS_sequence[] =
 80001f2:	4a1c      	ldr	r2, [pc, #112]	; (8000264 <main+0x90>)
 80001f4:	463b      	mov	r3, r7
 80001f6:	4611      	mov	r1, r2
 80001f8:	2280      	movs	r2, #128	; 0x80
 80001fa:	4618      	mov	r0, r3
 80001fc:	f003 f828 	bl	8003250 <memcpy>
  {1,1,1,65536,65536,65536,65536,65536,1,1,65536,1,1,65536,1,65536,1,1,1,65536,65536,65536,65536,65536,1,1,65536,1,1,65536,1,65536}; // 1 -> High & 65536 -> Low

  HAL_TIM_Base_Init(&htim6);
 8000200:	4819      	ldr	r0, [pc, #100]	; (8000268 <main+0x94>)
 8000202:	f002 fab7 	bl	8002774 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim6);
 8000206:	4818      	ldr	r0, [pc, #96]	; (8000268 <main+0x94>)
 8000208:	f002 fae0 	bl	80027cc <HAL_TIM_Base_Start>

  hdma_tim6_up.Instance = DMA1_Channel3;
 800020c:	4b17      	ldr	r3, [pc, #92]	; (800026c <main+0x98>)
 800020e:	4a18      	ldr	r2, [pc, #96]	; (8000270 <main+0x9c>)
 8000210:	601a      	str	r2, [r3, #0]
  hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000212:	4b16      	ldr	r3, [pc, #88]	; (800026c <main+0x98>)
 8000214:	2210      	movs	r2, #16
 8000216:	605a      	str	r2, [r3, #4]
  hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000218:	4b14      	ldr	r3, [pc, #80]	; (800026c <main+0x98>)
 800021a:	2200      	movs	r2, #0
 800021c:	609a      	str	r2, [r3, #8]
  hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 800021e:	4b13      	ldr	r3, [pc, #76]	; (800026c <main+0x98>)
 8000220:	2280      	movs	r2, #128	; 0x80
 8000222:	60da      	str	r2, [r3, #12]
  hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <main+0x98>)
 8000226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800022a:	611a      	str	r2, [r3, #16]
  hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <main+0x98>)
 800022e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000232:	615a      	str	r2, [r3, #20]
  hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 8000234:	4b0d      	ldr	r3, [pc, #52]	; (800026c <main+0x98>)
 8000236:	2220      	movs	r2, #32
 8000238:	619a      	str	r2, [r3, #24]
  hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <main+0x98>)
 800023c:	2200      	movs	r2, #0
 800023e:	61da      	str	r2, [r3, #28]
  HAL_DMA_Init(&hdma_tim6_up);
 8000240:	480a      	ldr	r0, [pc, #40]	; (800026c <main+0x98>)
 8000242:	f000 fbf4 	bl	8000a2e <HAL_DMA_Init>

  HAL_DMA_Start(&hdma_tim6_up, (uint32_t)DIBS_sequence, (uint32_t)&GPIOA->BSRR, 32); //initialization of data transfer in the DIBS_sequence buffer to the GPIOA periphery
 8000246:	4639      	mov	r1, r7
 8000248:	2320      	movs	r3, #32
 800024a:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <main+0xa0>)
 800024c:	4807      	ldr	r0, [pc, #28]	; (800026c <main+0x98>)
 800024e:	f000 fc35 	bl	8000abc <HAL_DMA_Start>
  __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8000252:	4b05      	ldr	r3, [pc, #20]	; (8000268 <main+0x94>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	68da      	ldr	r2, [r3, #12]
 8000258:	4b03      	ldr	r3, [pc, #12]	; (8000268 <main+0x94>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000260:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000262:	e7fe      	b.n	8000262 <main+0x8e>
 8000264:	08003290 	.word	0x08003290
 8000268:	200000ec 	.word	0x200000ec
 800026c:	200000a8 	.word	0x200000a8
 8000270:	40020030 	.word	0x40020030
 8000274:	48000018 	.word	0x48000018

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b0a6      	sub	sp, #152	; 0x98
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f002 ffed 	bl	8003266 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2258      	movs	r2, #88	; 0x58
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 ffdf 	bl	8003266 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a8:	2302      	movs	r3, #2
 80002aa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b0:	2310      	movs	r3, #16
 80002b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b6:	2302      	movs	r3, #2
 80002b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fee2 	bl	80010a0 <HAL_RCC_OscConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002e2:	f000 f8f5 	bl	80004d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	230f      	movs	r3, #15
 80002e8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ea:	2302      	movs	r3, #2
 80002ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000300:	2102      	movs	r1, #2
 8000302:	4618      	mov	r0, r3
 8000304:	f001 fde2 	bl	8001ecc <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800030e:	f000 f8df 	bl	80004d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000312:	2304      	movs	r3, #4
 8000314:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4618      	mov	r0, r3
 800031e:	f002 f80b 	bl	8002338 <HAL_RCCEx_PeriphCLKConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000328:	f000 f8d2 	bl	80004d0 <Error_Handler>
  }
}
 800032c:	bf00      	nop
 800032e:	3798      	adds	r7, #152	; 0x98
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000344:	4b14      	ldr	r3, [pc, #80]	; (8000398 <MX_TIM6_Init+0x64>)
 8000346:	4a15      	ldr	r2, [pc, #84]	; (800039c <MX_TIM6_Init+0x68>)
 8000348:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17999;
 800034a:	4b13      	ldr	r3, [pc, #76]	; (8000398 <MX_TIM6_Init+0x64>)
 800034c:	f244 624f 	movw	r2, #17999	; 0x464f
 8000350:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_TIM6_Init+0x64>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_TIM6_Init+0x64>)
 800035a:	2201      	movs	r2, #1
 800035c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_TIM6_Init+0x64>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <MX_TIM6_Init+0x64>)
 8000366:	f002 fa05 	bl	8002774 <HAL_TIM_Base_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000370:	f000 f8ae 	bl	80004d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000374:	2300      	movs	r3, #0
 8000376:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4619      	mov	r1, r3
 8000380:	4805      	ldr	r0, [pc, #20]	; (8000398 <MX_TIM6_Init+0x64>)
 8000382:	f002 faeb 	bl	800295c <HAL_TIMEx_MasterConfigSynchronization>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800038c:	f000 f8a0 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200000ec 	.word	0x200000ec
 800039c:	40001000 	.word	0x40001000

080003a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <MX_USART3_UART_Init+0x58>)
 80003a6:	4a15      	ldr	r2, [pc, #84]	; (80003fc <MX_USART3_UART_Init+0x5c>)
 80003a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <MX_USART3_UART_Init+0x58>)
 80003ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_USART3_UART_Init+0x58>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <MX_USART3_UART_Init+0x58>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_USART3_UART_Init+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_USART3_UART_Init+0x58>)
 80003c6:	220c      	movs	r2, #12
 80003c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <MX_USART3_UART_Init+0x58>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_USART3_UART_Init+0x58>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <MX_USART3_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MX_USART3_UART_Init+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80003e2:	4805      	ldr	r0, [pc, #20]	; (80003f8 <MX_USART3_UART_Init+0x58>)
 80003e4:	f002 fb46 	bl	8002a74 <HAL_UART_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80003ee:	f000 f86f 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000028 	.word	0x20000028
 80003fc:	40004800 	.word	0x40004800

08000400 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_DMA_Init+0x38>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a0b      	ldr	r2, [pc, #44]	; (8000438 <MX_DMA_Init+0x38>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <MX_DMA_Init+0x38>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800041e:	2200      	movs	r2, #0
 8000420:	2100      	movs	r1, #0
 8000422:	200d      	movs	r0, #13
 8000424:	f000 facd 	bl	80009c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000428:	200d      	movs	r0, #13
 800042a:	f000 fae6 	bl	80009fa <HAL_NVIC_EnableIRQ>

}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000

0800043c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	f107 030c 	add.w	r3, r7, #12
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
 8000450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000452:	4b1e      	ldr	r3, [pc, #120]	; (80004cc <MX_GPIO_Init+0x90>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a1d      	ldr	r2, [pc, #116]	; (80004cc <MX_GPIO_Init+0x90>)
 8000458:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <MX_GPIO_Init+0x90>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	4b18      	ldr	r3, [pc, #96]	; (80004cc <MX_GPIO_Init+0x90>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a17      	ldr	r2, [pc, #92]	; (80004cc <MX_GPIO_Init+0x90>)
 8000470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000474:	6153      	str	r3, [r2, #20]
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <MX_GPIO_Init+0x90>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <MX_GPIO_Init+0x90>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a11      	ldr	r2, [pc, #68]	; (80004cc <MX_GPIO_Init+0x90>)
 8000488:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_GPIO_Init+0x90>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000496:	603b      	str	r3, [r7, #0]
 8000498:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2101      	movs	r1, #1
 800049e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a2:	f000 fde5 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004a6:	2301      	movs	r3, #1
 80004a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2300      	movs	r3, #0
 80004b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b6:	f107 030c 	add.w	r3, r7, #12
 80004ba:	4619      	mov	r1, r3
 80004bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c0:	f000 fc4c 	bl	8000d5c <HAL_GPIO_Init>

}
 80004c4:	bf00      	nop
 80004c6:	3720      	adds	r7, #32
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40021000 	.word	0x40021000

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
	...

080004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <HAL_MspInit+0x44>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_MspInit+0x44>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <HAL_MspInit+0x44>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <HAL_MspInit+0x44>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	4a08      	ldr	r2, [pc, #32]	; (8000524 <HAL_MspInit+0x44>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000508:	61d3      	str	r3, [r2, #28]
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <HAL_MspInit+0x44>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a1f      	ldr	r2, [pc, #124]	; (80005b4 <HAL_TIM_Base_MspInit+0x8c>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d137      	bne.n	80005aa <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800053a:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <HAL_TIM_Base_MspInit+0x90>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a1e      	ldr	r2, [pc, #120]	; (80005b8 <HAL_TIM_Base_MspInit+0x90>)
 8000540:	f043 0310 	orr.w	r3, r3, #16
 8000544:	61d3      	str	r3, [r2, #28]
 8000546:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <HAL_TIM_Base_MspInit+0x90>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f003 0310 	and.w	r3, r3, #16
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM6 DMA Init */
    /* TIM6_UP Init */
    hdma_tim6_up.Instance = DMA1_Channel3;
 8000552:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <HAL_TIM_Base_MspInit+0x94>)
 8000554:	4a1a      	ldr	r2, [pc, #104]	; (80005c0 <HAL_TIM_Base_MspInit+0x98>)
 8000556:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <HAL_TIM_Base_MspInit+0x94>)
 800055a:	2200      	movs	r2, #0
 800055c:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <HAL_TIM_Base_MspInit+0x94>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <HAL_TIM_Base_MspInit+0x94>)
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <HAL_TIM_Base_MspInit+0x94>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_TIM_Base_MspInit+0x94>)
 8000572:	2200      	movs	r2, #0
 8000574:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <HAL_TIM_Base_MspInit+0x94>)
 8000578:	2220      	movs	r2, #32
 800057a:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_TIM_Base_MspInit+0x94>)
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8000582:	480e      	ldr	r0, [pc, #56]	; (80005bc <HAL_TIM_Base_MspInit+0x94>)
 8000584:	f000 fa53 	bl	8000a2e <HAL_DMA_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <HAL_TIM_Base_MspInit+0x6a>
    {
      Error_Handler();
 800058e:	f7ff ff9f 	bl	80004d0 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_TIM_Base_MspInit+0x9c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <HAL_TIM_Base_MspInit+0x9c>)
 8000598:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800059c:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <HAL_TIM_Base_MspInit+0x94>)
 80005a2:	621a      	str	r2, [r3, #32]
 80005a4:	4a05      	ldr	r2, [pc, #20]	; (80005bc <HAL_TIM_Base_MspInit+0x94>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40001000 	.word	0x40001000
 80005b8:	40021000 	.word	0x40021000
 80005bc:	200000a8 	.word	0x200000a8
 80005c0:	40020030 	.word	0x40020030
 80005c4:	40010000 	.word	0x40010000

080005c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a17      	ldr	r2, [pc, #92]	; (8000644 <HAL_UART_MspInit+0x7c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d128      	bne.n	800063c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_UART_MspInit+0x80>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a16      	ldr	r2, [pc, #88]	; (8000648 <HAL_UART_MspInit+0x80>)
 80005f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <HAL_UART_MspInit+0x80>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <HAL_UART_MspInit+0x80>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a10      	ldr	r2, [pc, #64]	; (8000648 <HAL_UART_MspInit+0x80>)
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <HAL_UART_MspInit+0x80>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800061a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800061e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000620:	2302      	movs	r3, #2
 8000622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800062c:	2307      	movs	r3, #7
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4619      	mov	r1, r3
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <HAL_UART_MspInit+0x84>)
 8000638:	f000 fb90 	bl	8000d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800063c:	bf00      	nop
 800063e:	3728      	adds	r7, #40	; 0x28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40004800 	.word	0x40004800
 8000648:	40021000 	.word	0x40021000
 800064c:	48000c00 	.word	0x48000c00

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <HardFault_Handler+0x4>

08000664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <MemManage_Handler+0x4>

0800066a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <BusFault_Handler+0x4>

08000670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <UsageFault_Handler+0x4>

08000676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a4:	f000 f892 	bl	80007cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <DMA1_Channel3_IRQHandler+0x10>)
 80006b2:	f000 fa45 	bl	8000b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200000a8 	.word	0x200000a8

080006c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <SystemInit+0x28>)
 80006c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <SystemInit+0x28>)
 80006cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <SystemInit+0x28>)
 80006d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006da:	609a      	str	r2, [r3, #8]
#endif
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000724 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006f2:	e003      	b.n	80006fc <LoopCopyDataInit>

080006f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006fa:	3104      	adds	r1, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006fc:	480b      	ldr	r0, [pc, #44]	; (800072c <LoopForever+0xa>)
	ldr	r3, =_edata
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000700:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000702:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000704:	d3f6      	bcc.n	80006f4 <CopyDataInit>
	ldr	r2, =_sbss
 8000706:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000708:	e002      	b.n	8000710 <LoopFillZerobss>

0800070a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800070a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800070c:	f842 3b04 	str.w	r3, [r2], #4

08000710 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <LoopForever+0x16>)
	cmp	r2, r3
 8000712:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000714:	d3f9      	bcc.n	800070a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000716:	f7ff ffd3 	bl	80006c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800071a:	f002 fd75 	bl	8003208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800071e:	f7ff fd59 	bl	80001d4 <main>

08000722 <LoopForever>:

LoopForever:
    b LoopForever
 8000722:	e7fe      	b.n	8000722 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000724:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000728:	08003350 	.word	0x08003350
	ldr	r0, =_sdata
 800072c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000730:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000734:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000738:	20000130 	.word	0x20000130

0800073c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC1_2_IRQHandler>
	...

08000740 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <HAL_Init+0x28>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a07      	ldr	r2, [pc, #28]	; (8000768 <HAL_Init+0x28>)
 800074a:	f043 0310 	orr.w	r3, r3, #16
 800074e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000750:	2003      	movs	r0, #3
 8000752:	f000 f92b 	bl	80009ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000756:	2000      	movs	r0, #0
 8000758:	f000 f808 	bl	800076c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800075c:	f7ff fec0 	bl	80004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40022000 	.word	0x40022000

0800076c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_InitTick+0x54>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_InitTick+0x58>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000782:	fbb3 f3f1 	udiv	r3, r3, r1
 8000786:	fbb2 f3f3 	udiv	r3, r2, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f943 	bl	8000a16 <HAL_SYSTICK_Config>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e00e      	b.n	80007b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	d80a      	bhi.n	80007b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a0:	2200      	movs	r2, #0
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007a8:	f000 f90b 	bl	80009c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ac:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <HAL_InitTick+0x5c>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e000      	b.n	80007b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000004 	.word	0x20000004

080007cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_IncTick+0x20>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_IncTick+0x24>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4413      	add	r3, r2
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <HAL_IncTick+0x24>)
 80007de:	6013      	str	r3, [r2, #0]
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000008 	.word	0x20000008
 80007f0:	2000012c 	.word	0x2000012c

080007f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <HAL_GetTick+0x14>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	2000012c 	.word	0x2000012c

0800080c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000828:	4013      	ands	r3, r2
 800082a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083e:	4a04      	ldr	r2, [pc, #16]	; (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	60d3      	str	r3, [r2, #12]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <__NVIC_GetPriorityGrouping+0x18>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	f003 0307 	and.w	r3, r3, #7
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	2b00      	cmp	r3, #0
 8000880:	db0b      	blt.n	800089a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	f003 021f 	and.w	r2, r3, #31
 8000888:	4907      	ldr	r1, [pc, #28]	; (80008a8 <__NVIC_EnableIRQ+0x38>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	095b      	lsrs	r3, r3, #5
 8000890:	2001      	movs	r0, #1
 8000892:	fa00 f202 	lsl.w	r2, r0, r2
 8000896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000e100 	.word	0xe000e100

080008ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	db0a      	blt.n	80008d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	490c      	ldr	r1, [pc, #48]	; (80008f8 <__NVIC_SetPriority+0x4c>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	0112      	lsls	r2, r2, #4
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	440b      	add	r3, r1
 80008d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d4:	e00a      	b.n	80008ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4908      	ldr	r1, [pc, #32]	; (80008fc <__NVIC_SetPriority+0x50>)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	f003 030f 	and.w	r3, r3, #15
 80008e2:	3b04      	subs	r3, #4
 80008e4:	0112      	lsls	r2, r2, #4
 80008e6:	b2d2      	uxtb	r2, r2
 80008e8:	440b      	add	r3, r1
 80008ea:	761a      	strb	r2, [r3, #24]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000e100 	.word	0xe000e100
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000900:	b480      	push	{r7}
 8000902:	b089      	sub	sp, #36	; 0x24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	f1c3 0307 	rsb	r3, r3, #7
 800091a:	2b04      	cmp	r3, #4
 800091c:	bf28      	it	cs
 800091e:	2304      	movcs	r3, #4
 8000920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	3304      	adds	r3, #4
 8000926:	2b06      	cmp	r3, #6
 8000928:	d902      	bls.n	8000930 <NVIC_EncodePriority+0x30>
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3b03      	subs	r3, #3
 800092e:	e000      	b.n	8000932 <NVIC_EncodePriority+0x32>
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43da      	mvns	r2, r3
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	401a      	ands	r2, r3
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	fa01 f303 	lsl.w	r3, r1, r3
 8000952:	43d9      	mvns	r1, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	4313      	orrs	r3, r2
         );
}
 800095a:	4618      	mov	r0, r3
 800095c:	3724      	adds	r7, #36	; 0x24
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
	...

08000968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000978:	d301      	bcc.n	800097e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097a:	2301      	movs	r3, #1
 800097c:	e00f      	b.n	800099e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <SysTick_Config+0x40>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000986:	210f      	movs	r1, #15
 8000988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800098c:	f7ff ff8e 	bl	80008ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <SysTick_Config+0x40>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <SysTick_Config+0x40>)
 8000998:	2207      	movs	r2, #7
 800099a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	e000e010 	.word	0xe000e010

080009ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff29 	bl	800080c <__NVIC_SetPriorityGrouping>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4603      	mov	r3, r0
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d4:	f7ff ff3e 	bl	8000854 <__NVIC_GetPriorityGrouping>
 80009d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	6978      	ldr	r0, [r7, #20]
 80009e0:	f7ff ff8e 	bl	8000900 <NVIC_EncodePriority>
 80009e4:	4602      	mov	r2, r0
 80009e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff5d 	bl	80008ac <__NVIC_SetPriority>
}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff31 	bl	8000870 <__NVIC_EnableIRQ>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff ffa2 	bl	8000968 <SysTick_Config>
 8000a24:	4603      	mov	r3, r0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b084      	sub	sp, #16
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d101      	bne.n	8000a44 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e037      	b.n	8000ab4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2202      	movs	r2, #2
 8000a48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 f924 	bl	8000ce4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
}  
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d101      	bne.n	8000adc <HAL_DMA_Start+0x20>
 8000ad8:	2302      	movs	r3, #2
 8000ada:	e02d      	b.n	8000b38 <HAL_DMA_Start+0x7c>
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d11d      	bne.n	8000b2a <HAL_DMA_Start+0x6e>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2202      	movs	r2, #2
 8000af2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2200      	movs	r2, #0
 8000afa:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f022 0201 	bic.w	r2, r2, #1
 8000b0a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	f000 f8b7 	bl	8000c86 <DMA_SetConfig>
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;  
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f042 0201 	orr.w	r2, r2, #1
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	e005      	b.n	8000b36 <HAL_DMA_Start+0x7a>
  }
  else
  {
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	/* Remain BUSY */
  	status = HAL_BUSY;
 8000b32:	2302      	movs	r3, #2
 8000b34:	75fb      	strb	r3, [r7, #23]
  }  

  return status; 
 8000b36:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4013      	ands	r3, r2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d024      	beq.n	8000bb2 <HAL_DMA_IRQHandler+0x72>
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d01f      	beq.n	8000bb2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 0320 	and.w	r3, r3, #32
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d107      	bne.n	8000b90 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 0204 	bic.w	r2, r2, #4
 8000b8e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b98:	2104      	movs	r1, #4
 8000b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d06a      	beq.n	8000c7e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000bb0:	e065      	b.n	8000c7e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	409a      	lsls	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d02c      	beq.n	8000c1c <HAL_DMA_IRQHandler+0xdc>
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d027      	beq.n	8000c1c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0320 	and.w	r3, r3, #32
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d10b      	bne.n	8000bf2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 020a 	bic.w	r2, r2, #10
 8000be8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000c00:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d035      	beq.n	8000c7e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000c1a:	e030      	b.n	8000c7e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	2208      	movs	r2, #8
 8000c22:	409a      	lsls	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4013      	ands	r3, r2
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d028      	beq.n	8000c7e <HAL_DMA_IRQHandler+0x13e>
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d023      	beq.n	8000c7e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 020e 	bic.w	r2, r2, #14
 8000c44:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c4e:	2101      	movs	r1, #1
 8000c50:	fa01 f202 	lsl.w	r2, r1, r2
 8000c54:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d004      	beq.n	8000c7e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	4798      	blx	r3
    }
  }
}  
 8000c7c:	e7ff      	b.n	8000c7e <HAL_DMA_IRQHandler+0x13e>
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b085      	sub	sp, #20
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b10      	cmp	r3, #16
 8000cb2:	d108      	bne.n	8000cc6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000cc4:	e007      	b.n	8000cd6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	60da      	str	r2, [r3, #12]
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <DMA_CalcBaseAndBitshift+0x60>)
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d80f      	bhi.n	8000d18 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <DMA_CalcBaseAndBitshift+0x64>)
 8000d00:	4413      	add	r3, r2
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <DMA_CalcBaseAndBitshift+0x68>)
 8000d04:	fba2 2303 	umull	r2, r3, r2, r3
 8000d08:	091b      	lsrs	r3, r3, #4
 8000d0a:	009a      	lsls	r2, r3, #2
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <DMA_CalcBaseAndBitshift+0x6c>)
 8000d14:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000d16:	e00e      	b.n	8000d36 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <DMA_CalcBaseAndBitshift+0x70>)
 8000d20:	4413      	add	r3, r2
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <DMA_CalcBaseAndBitshift+0x68>)
 8000d24:	fba2 2303 	umull	r2, r3, r2, r3
 8000d28:	091b      	lsrs	r3, r3, #4
 8000d2a:	009a      	lsls	r2, r3, #2
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <DMA_CalcBaseAndBitshift+0x74>)
 8000d34:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40020407 	.word	0x40020407
 8000d48:	bffdfff8 	.word	0xbffdfff8
 8000d4c:	cccccccd 	.word	0xcccccccd
 8000d50:	40020000 	.word	0x40020000
 8000d54:	bffdfbf8 	.word	0xbffdfbf8
 8000d58:	40020400 	.word	0x40020400

08000d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6a:	e160      	b.n	800102e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	2101      	movs	r1, #1
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 8152 	beq.w	8001028 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x38>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b12      	cmp	r3, #18
 8000d92:	d123      	bne.n	8000ddc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	08da      	lsrs	r2, r3, #3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3208      	adds	r2, #8
 8000d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	691a      	ldr	r2, [r3, #16]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	6939      	ldr	r1, [r7, #16]
 8000dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0203 	and.w	r2, r3, #3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d00b      	beq.n	8000e30 <HAL_GPIO_Init+0xd4>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d007      	beq.n	8000e30 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e24:	2b11      	cmp	r3, #17
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b12      	cmp	r3, #18
 8000e2e:	d130      	bne.n	8000e92 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e66:	2201      	movs	r2, #1
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	091b      	lsrs	r3, r3, #4
 8000e7c:	f003 0201 	and.w	r2, r3, #1
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 80ac 	beq.w	8001028 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed0:	4b5e      	ldr	r3, [pc, #376]	; (800104c <HAL_GPIO_Init+0x2f0>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a5d      	ldr	r2, [pc, #372]	; (800104c <HAL_GPIO_Init+0x2f0>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b5b      	ldr	r3, [pc, #364]	; (800104c <HAL_GPIO_Init+0x2f0>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ee8:	4a59      	ldr	r2, [pc, #356]	; (8001050 <HAL_GPIO_Init+0x2f4>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f12:	d025      	beq.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a4f      	ldr	r2, [pc, #316]	; (8001054 <HAL_GPIO_Init+0x2f8>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d01f      	beq.n	8000f5c <HAL_GPIO_Init+0x200>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a4e      	ldr	r2, [pc, #312]	; (8001058 <HAL_GPIO_Init+0x2fc>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d019      	beq.n	8000f58 <HAL_GPIO_Init+0x1fc>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a4d      	ldr	r2, [pc, #308]	; (800105c <HAL_GPIO_Init+0x300>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d013      	beq.n	8000f54 <HAL_GPIO_Init+0x1f8>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a4c      	ldr	r2, [pc, #304]	; (8001060 <HAL_GPIO_Init+0x304>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d00d      	beq.n	8000f50 <HAL_GPIO_Init+0x1f4>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a4b      	ldr	r2, [pc, #300]	; (8001064 <HAL_GPIO_Init+0x308>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d007      	beq.n	8000f4c <HAL_GPIO_Init+0x1f0>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a4a      	ldr	r2, [pc, #296]	; (8001068 <HAL_GPIO_Init+0x30c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d101      	bne.n	8000f48 <HAL_GPIO_Init+0x1ec>
 8000f44:	2306      	movs	r3, #6
 8000f46:	e00c      	b.n	8000f62 <HAL_GPIO_Init+0x206>
 8000f48:	2307      	movs	r3, #7
 8000f4a:	e00a      	b.n	8000f62 <HAL_GPIO_Init+0x206>
 8000f4c:	2305      	movs	r3, #5
 8000f4e:	e008      	b.n	8000f62 <HAL_GPIO_Init+0x206>
 8000f50:	2304      	movs	r3, #4
 8000f52:	e006      	b.n	8000f62 <HAL_GPIO_Init+0x206>
 8000f54:	2303      	movs	r3, #3
 8000f56:	e004      	b.n	8000f62 <HAL_GPIO_Init+0x206>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	e002      	b.n	8000f62 <HAL_GPIO_Init+0x206>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <HAL_GPIO_Init+0x206>
 8000f60:	2300      	movs	r3, #0
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	f002 0203 	and.w	r2, r2, #3
 8000f68:	0092      	lsls	r2, r2, #2
 8000f6a:	4093      	lsls	r3, r2
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f72:	4937      	ldr	r1, [pc, #220]	; (8001050 <HAL_GPIO_Init+0x2f4>)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	3302      	adds	r3, #2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f80:	4b3a      	ldr	r3, [pc, #232]	; (800106c <HAL_GPIO_Init+0x310>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fa4:	4a31      	ldr	r2, [pc, #196]	; (800106c <HAL_GPIO_Init+0x310>)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000faa:	4b30      	ldr	r3, [pc, #192]	; (800106c <HAL_GPIO_Init+0x310>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fce:	4a27      	ldr	r2, [pc, #156]	; (800106c <HAL_GPIO_Init+0x310>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd4:	4b25      	ldr	r3, [pc, #148]	; (800106c <HAL_GPIO_Init+0x310>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ff8:	4a1c      	ldr	r2, [pc, #112]	; (800106c <HAL_GPIO_Init+0x310>)
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <HAL_GPIO_Init+0x310>)
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <HAL_GPIO_Init+0x310>)
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3301      	adds	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	fa22 f303 	lsr.w	r3, r2, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	f47f ae97 	bne.w	8000d6c <HAL_GPIO_Init+0x10>
  }
}
 800103e:	bf00      	nop
 8001040:	371c      	adds	r7, #28
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000
 8001050:	40010000 	.word	0x40010000
 8001054:	48000400 	.word	0x48000400
 8001058:	48000800 	.word	0x48000800
 800105c:	48000c00 	.word	0x48000c00
 8001060:	48001000 	.word	0x48001000
 8001064:	48001400 	.word	0x48001400
 8001068:	48001800 	.word	0x48001800
 800106c:	40010400 	.word	0x40010400

08001070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800108c:	e002      	b.n	8001094 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	f000 bf01 	b.w	8001ebc <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 8160 	beq.w	800138a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010ca:	4bae      	ldr	r3, [pc, #696]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d00c      	beq.n	80010f0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d6:	4bab      	ldr	r3, [pc, #684]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d159      	bne.n	8001196 <HAL_RCC_OscConfig+0xf6>
 80010e2:	4ba8      	ldr	r3, [pc, #672]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80010ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ee:	d152      	bne.n	8001196 <HAL_RCC_OscConfig+0xf6>
 80010f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80010fc:	fa93 f3a3 	rbit	r3, r3
 8001100:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001104:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001108:	fab3 f383 	clz	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	b2db      	uxtb	r3, r3
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d102      	bne.n	8001122 <HAL_RCC_OscConfig+0x82>
 800111c:	4b99      	ldr	r3, [pc, #612]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	e015      	b.n	800114e <HAL_RCC_OscConfig+0xae>
 8001122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001126:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800113a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800113e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001142:	fa93 f3a3 	rbit	r3, r3
 8001146:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800114a:	4b8e      	ldr	r3, [pc, #568]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001152:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001156:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800115a:	fa92 f2a2 	rbit	r2, r2
 800115e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001162:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001166:	fab2 f282 	clz	r2, r2
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	f042 0220 	orr.w	r2, r2, #32
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	f002 021f 	and.w	r2, r2, #31
 8001176:	2101      	movs	r1, #1
 8001178:	fa01 f202 	lsl.w	r2, r1, r2
 800117c:	4013      	ands	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 8102 	beq.w	8001388 <HAL_RCC_OscConfig+0x2e8>
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	f040 80fc 	bne.w	8001388 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	f000 be93 	b.w	8001ebc <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a0:	d106      	bne.n	80011b0 <HAL_RCC_OscConfig+0x110>
 80011a2:	4b78      	ldr	r3, [pc, #480]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a77      	ldr	r2, [pc, #476]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 80011a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e030      	b.n	8001212 <HAL_RCC_OscConfig+0x172>
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10c      	bne.n	80011d4 <HAL_RCC_OscConfig+0x134>
 80011ba:	4b72      	ldr	r3, [pc, #456]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a71      	ldr	r2, [pc, #452]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 80011c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	4b6f      	ldr	r3, [pc, #444]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a6e      	ldr	r2, [pc, #440]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 80011cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e01e      	b.n	8001212 <HAL_RCC_OscConfig+0x172>
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011de:	d10c      	bne.n	80011fa <HAL_RCC_OscConfig+0x15a>
 80011e0:	4b68      	ldr	r3, [pc, #416]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a67      	ldr	r2, [pc, #412]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 80011e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b65      	ldr	r3, [pc, #404]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a64      	ldr	r2, [pc, #400]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 80011f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	e00b      	b.n	8001212 <HAL_RCC_OscConfig+0x172>
 80011fa:	4b62      	ldr	r3, [pc, #392]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a61      	ldr	r2, [pc, #388]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 8001200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b5f      	ldr	r3, [pc, #380]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a5e      	ldr	r2, [pc, #376]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 800120c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001210:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d059      	beq.n	80012d0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff faea 	bl	80007f4 <HAL_GetTick>
 8001220:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001226:	f7ff fae5 	bl	80007f4 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d902      	bls.n	800123c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	f000 be40 	b.w	8001ebc <HAL_RCC_OscConfig+0xe1c>
 800123c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001240:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001244:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001248:	fa93 f3a3 	rbit	r3, r3
 800124c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001250:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001254:	fab3 f383 	clz	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	095b      	lsrs	r3, r3, #5
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d102      	bne.n	800126e <HAL_RCC_OscConfig+0x1ce>
 8001268:	4b46      	ldr	r3, [pc, #280]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	e015      	b.n	800129a <HAL_RCC_OscConfig+0x1fa>
 800126e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001272:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001282:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001286:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800128a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001296:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800129e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80012a2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80012a6:	fa92 f2a2 	rbit	r2, r2
 80012aa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80012ae:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012b2:	fab2 f282 	clz	r2, r2
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	f042 0220 	orr.w	r2, r2, #32
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	f002 021f 	and.w	r2, r2, #31
 80012c2:	2101      	movs	r1, #1
 80012c4:	fa01 f202 	lsl.w	r2, r1, r2
 80012c8:	4013      	ands	r3, r2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0ab      	beq.n	8001226 <HAL_RCC_OscConfig+0x186>
 80012ce:	e05c      	b.n	800138a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fa90 	bl	80007f4 <HAL_GetTick>
 80012d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d8:	e00a      	b.n	80012f0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012da:	f7ff fa8b 	bl	80007f4 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d902      	bls.n	80012f0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	f000 bde6 	b.w	8001ebc <HAL_RCC_OscConfig+0xe1c>
 80012f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80012fc:	fa93 f3a3 	rbit	r3, r3
 8001300:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001304:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001308:	fab3 f383 	clz	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	b2db      	uxtb	r3, r3
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b01      	cmp	r3, #1
 800131a:	d102      	bne.n	8001322 <HAL_RCC_OscConfig+0x282>
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	e015      	b.n	800134e <HAL_RCC_OscConfig+0x2ae>
 8001322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001326:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800133a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800133e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_RCC_OscConfig+0x2e4>)
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001352:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001356:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800135a:	fa92 f2a2 	rbit	r2, r2
 800135e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001362:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001366:	fab2 f282 	clz	r2, r2
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	f042 0220 	orr.w	r2, r2, #32
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	f002 021f 	and.w	r2, r2, #31
 8001376:	2101      	movs	r1, #1
 8001378:	fa01 f202 	lsl.w	r2, r1, r2
 800137c:	4013      	ands	r3, r2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1ab      	bne.n	80012da <HAL_RCC_OscConfig+0x23a>
 8001382:	e002      	b.n	800138a <HAL_RCC_OscConfig+0x2ea>
 8001384:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8170 	beq.w	800167a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800139a:	4bd0      	ldr	r3, [pc, #832]	; (80016dc <HAL_RCC_OscConfig+0x63c>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00c      	beq.n	80013c0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013a6:	4bcd      	ldr	r3, [pc, #820]	; (80016dc <HAL_RCC_OscConfig+0x63c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d16d      	bne.n	800148e <HAL_RCC_OscConfig+0x3ee>
 80013b2:	4bca      	ldr	r3, [pc, #808]	; (80016dc <HAL_RCC_OscConfig+0x63c>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013be:	d166      	bne.n	800148e <HAL_RCC_OscConfig+0x3ee>
 80013c0:	2302      	movs	r3, #2
 80013c2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80013d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	095b      	lsrs	r3, r3, #5
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d102      	bne.n	80013f0 <HAL_RCC_OscConfig+0x350>
 80013ea:	4bbc      	ldr	r3, [pc, #752]	; (80016dc <HAL_RCC_OscConfig+0x63c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	e013      	b.n	8001418 <HAL_RCC_OscConfig+0x378>
 80013f0:	2302      	movs	r3, #2
 80013f2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80013fa:	fa93 f3a3 	rbit	r3, r3
 80013fe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001408:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800140c:	fa93 f3a3 	rbit	r3, r3
 8001410:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001414:	4bb1      	ldr	r3, [pc, #708]	; (80016dc <HAL_RCC_OscConfig+0x63c>)
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	2202      	movs	r2, #2
 800141a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800141e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001422:	fa92 f2a2 	rbit	r2, r2
 8001426:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800142a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800142e:	fab2 f282 	clz	r2, r2
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	f042 0220 	orr.w	r2, r2, #32
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	f002 021f 	and.w	r2, r2, #31
 800143e:	2101      	movs	r1, #1
 8001440:	fa01 f202 	lsl.w	r2, r1, r2
 8001444:	4013      	ands	r3, r2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_RCC_OscConfig+0x3ba>
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d002      	beq.n	800145a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	f000 bd31 	b.w	8001ebc <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145a:	4ba0      	ldr	r3, [pc, #640]	; (80016dc <HAL_RCC_OscConfig+0x63c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	21f8      	movs	r1, #248	; 0xf8
 800146a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001472:	fa91 f1a1 	rbit	r1, r1
 8001476:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800147a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800147e:	fab1 f181 	clz	r1, r1
 8001482:	b2c9      	uxtb	r1, r1
 8001484:	408b      	lsls	r3, r1
 8001486:	4995      	ldr	r1, [pc, #596]	; (80016dc <HAL_RCC_OscConfig+0x63c>)
 8001488:	4313      	orrs	r3, r2
 800148a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148c:	e0f5      	b.n	800167a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 8085 	beq.w	80015a4 <HAL_RCC_OscConfig+0x504>
 800149a:	2301      	movs	r3, #1
 800149c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80014a4:	fa93 f3a3 	rbit	r3, r3
 80014a8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80014ac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b0:	fab3 f383 	clz	r3, r3
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	461a      	mov	r2, r3
 80014c2:	2301      	movs	r3, #1
 80014c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c6:	f7ff f995 	bl	80007f4 <HAL_GetTick>
 80014ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ce:	e00a      	b.n	80014e6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff f990 	bl	80007f4 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d902      	bls.n	80014e6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	f000 bceb 	b.w	8001ebc <HAL_RCC_OscConfig+0xe1c>
 80014e6:	2302      	movs	r3, #2
 80014e8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ec:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80014f0:	fa93 f3a3 	rbit	r3, r3
 80014f4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80014f8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fc:	fab3 f383 	clz	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	b2db      	uxtb	r3, r3
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d102      	bne.n	8001516 <HAL_RCC_OscConfig+0x476>
 8001510:	4b72      	ldr	r3, [pc, #456]	; (80016dc <HAL_RCC_OscConfig+0x63c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	e013      	b.n	800153e <HAL_RCC_OscConfig+0x49e>
 8001516:	2302      	movs	r3, #2
 8001518:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001528:	2302      	movs	r3, #2
 800152a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800152e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001532:	fa93 f3a3 	rbit	r3, r3
 8001536:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800153a:	4b68      	ldr	r3, [pc, #416]	; (80016dc <HAL_RCC_OscConfig+0x63c>)
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	2202      	movs	r2, #2
 8001540:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001544:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001548:	fa92 f2a2 	rbit	r2, r2
 800154c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001550:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001554:	fab2 f282 	clz	r2, r2
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	f042 0220 	orr.w	r2, r2, #32
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	f002 021f 	and.w	r2, r2, #31
 8001564:	2101      	movs	r1, #1
 8001566:	fa01 f202 	lsl.w	r2, r1, r2
 800156a:	4013      	ands	r3, r2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0af      	beq.n	80014d0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	4b5a      	ldr	r3, [pc, #360]	; (80016dc <HAL_RCC_OscConfig+0x63c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	21f8      	movs	r1, #248	; 0xf8
 8001580:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001584:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001588:	fa91 f1a1 	rbit	r1, r1
 800158c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001590:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001594:	fab1 f181 	clz	r1, r1
 8001598:	b2c9      	uxtb	r1, r1
 800159a:	408b      	lsls	r3, r1
 800159c:	494f      	ldr	r1, [pc, #316]	; (80016dc <HAL_RCC_OscConfig+0x63c>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
 80015a2:	e06a      	b.n	800167a <HAL_RCC_OscConfig+0x5da>
 80015a4:	2301      	movs	r3, #1
 80015a6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015aa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80015ae:	fa93 f3a3 	rbit	r3, r3
 80015b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80015b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ba:	fab3 f383 	clz	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	461a      	mov	r2, r3
 80015cc:	2300      	movs	r3, #0
 80015ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff f910 	bl	80007f4 <HAL_GetTick>
 80015d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d8:	e00a      	b.n	80015f0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015da:	f7ff f90b 	bl	80007f4 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d902      	bls.n	80015f0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	f000 bc66 	b.w	8001ebc <HAL_RCC_OscConfig+0xe1c>
 80015f0:	2302      	movs	r3, #2
 80015f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80015fa:	fa93 f3a3 	rbit	r3, r3
 80015fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001602:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	095b      	lsrs	r3, r3, #5
 800160e:	b2db      	uxtb	r3, r3
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d102      	bne.n	8001620 <HAL_RCC_OscConfig+0x580>
 800161a:	4b30      	ldr	r3, [pc, #192]	; (80016dc <HAL_RCC_OscConfig+0x63c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	e013      	b.n	8001648 <HAL_RCC_OscConfig+0x5a8>
 8001620:	2302      	movs	r3, #2
 8001622:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800162a:	fa93 f3a3 	rbit	r3, r3
 800162e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001632:	2302      	movs	r3, #2
 8001634:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001638:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <HAL_RCC_OscConfig+0x63c>)
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	2202      	movs	r2, #2
 800164a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800164e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001652:	fa92 f2a2 	rbit	r2, r2
 8001656:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800165a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800165e:	fab2 f282 	clz	r2, r2
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	f042 0220 	orr.w	r2, r2, #32
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	f002 021f 	and.w	r2, r2, #31
 800166e:	2101      	movs	r1, #1
 8001670:	fa01 f202 	lsl.w	r2, r1, r2
 8001674:	4013      	ands	r3, r2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1af      	bne.n	80015da <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80da 	beq.w	800183e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d069      	beq.n	8001768 <HAL_RCC_OscConfig+0x6c8>
 8001694:	2301      	movs	r3, #1
 8001696:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800169e:	fa93 f3a3 	rbit	r3, r3
 80016a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80016a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016aa:	fab3 f383 	clz	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_RCC_OscConfig+0x640>)
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	461a      	mov	r2, r3
 80016ba:	2301      	movs	r3, #1
 80016bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016be:	f7ff f899 	bl	80007f4 <HAL_GetTick>
 80016c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	e00d      	b.n	80016e4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c8:	f7ff f894 	bl	80007f4 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d905      	bls.n	80016e4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e3ef      	b.n	8001ebc <HAL_RCC_OscConfig+0xe1c>
 80016dc:	40021000 	.word	0x40021000
 80016e0:	10908120 	.word	0x10908120
 80016e4:	2302      	movs	r3, #2
 80016e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016ee:	fa93 f2a3 	rbit	r2, r3
 80016f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80016fc:	2202      	movs	r2, #2
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	fa93 f2a3 	rbit	r2, r3
 800170a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001714:	2202      	movs	r2, #2
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	fa93 f2a3 	rbit	r2, r3
 8001722:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001726:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001728:	4ba4      	ldr	r3, [pc, #656]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 800172a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800172c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001730:	2102      	movs	r1, #2
 8001732:	6019      	str	r1, [r3, #0]
 8001734:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	fa93 f1a3 	rbit	r1, r3
 800173e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001742:	6019      	str	r1, [r3, #0]
  return result;
 8001744:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f003 031f 	and.w	r3, r3, #31
 800175a:	2101      	movs	r1, #1
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	4013      	ands	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0b0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x628>
 8001766:	e06a      	b.n	800183e <HAL_RCC_OscConfig+0x79e>
 8001768:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	fa93 f2a3 	rbit	r2, r3
 800177a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800177e:	601a      	str	r2, [r3, #0]
  return result;
 8001780:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001784:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001786:	fab3 f383 	clz	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	4b8c      	ldr	r3, [pc, #560]	; (80019c0 <HAL_RCC_OscConfig+0x920>)
 8001790:	4413      	add	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	461a      	mov	r2, r3
 8001796:	2300      	movs	r3, #0
 8001798:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179a:	f7ff f82b 	bl	80007f4 <HAL_GetTick>
 800179e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a2:	e009      	b.n	80017b8 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a4:	f7ff f826 	bl	80007f4 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e381      	b.n	8001ebc <HAL_RCC_OscConfig+0xe1c>
 80017b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017bc:	2202      	movs	r2, #2
 80017be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	fa93 f2a3 	rbit	r2, r3
 80017ca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017d4:	2202      	movs	r2, #2
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	fa93 f2a3 	rbit	r2, r3
 80017e2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017ec:	2202      	movs	r2, #2
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	fa93 f2a3 	rbit	r2, r3
 80017fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001800:	4b6e      	ldr	r3, [pc, #440]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 8001802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001804:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001808:	2102      	movs	r1, #2
 800180a:	6019      	str	r1, [r3, #0]
 800180c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fa93 f1a3 	rbit	r1, r3
 8001816:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800181a:	6019      	str	r1, [r3, #0]
  return result;
 800181c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800182c:	b2db      	uxtb	r3, r3
 800182e:	f003 031f 	and.w	r3, r3, #31
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1b2      	bne.n	80017a4 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8157 	beq.w	8001afc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001854:	4b59      	ldr	r3, [pc, #356]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d112      	bne.n	8001886 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001860:	4b56      	ldr	r3, [pc, #344]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	4a55      	ldr	r2, [pc, #340]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 8001866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186a:	61d3      	str	r3, [r2, #28]
 800186c:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001880:	2301      	movs	r3, #1
 8001882:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001886:	4b4f      	ldr	r3, [pc, #316]	; (80019c4 <HAL_RCC_OscConfig+0x924>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d11a      	bne.n	80018c8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001892:	4b4c      	ldr	r3, [pc, #304]	; (80019c4 <HAL_RCC_OscConfig+0x924>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a4b      	ldr	r2, [pc, #300]	; (80019c4 <HAL_RCC_OscConfig+0x924>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189e:	f7fe ffa9 	bl	80007f4 <HAL_GetTick>
 80018a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	e009      	b.n	80018bc <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a8:	f7fe ffa4 	bl	80007f4 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b64      	cmp	r3, #100	; 0x64
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e2ff      	b.n	8001ebc <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <HAL_RCC_OscConfig+0x924>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0ef      	beq.n	80018a8 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d106      	bne.n	80018e0 <HAL_RCC_OscConfig+0x840>
 80018d2:	4b3a      	ldr	r3, [pc, #232]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	4a39      	ldr	r2, [pc, #228]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6213      	str	r3, [r2, #32]
 80018de:	e02f      	b.n	8001940 <HAL_RCC_OscConfig+0x8a0>
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x864>
 80018ea:	4b34      	ldr	r3, [pc, #208]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a33      	ldr	r2, [pc, #204]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	6213      	str	r3, [r2, #32]
 80018f6:	4b31      	ldr	r3, [pc, #196]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4a30      	ldr	r2, [pc, #192]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 80018fc:	f023 0304 	bic.w	r3, r3, #4
 8001900:	6213      	str	r3, [r2, #32]
 8001902:	e01d      	b.n	8001940 <HAL_RCC_OscConfig+0x8a0>
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b05      	cmp	r3, #5
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x888>
 800190e:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4a2a      	ldr	r2, [pc, #168]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6213      	str	r3, [r2, #32]
 800191a:	4b28      	ldr	r3, [pc, #160]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4a27      	ldr	r2, [pc, #156]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6213      	str	r3, [r2, #32]
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0x8a0>
 8001928:	4b24      	ldr	r3, [pc, #144]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4a23      	ldr	r2, [pc, #140]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 800192e:	f023 0301 	bic.w	r3, r3, #1
 8001932:	6213      	str	r3, [r2, #32]
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	4a20      	ldr	r2, [pc, #128]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 800193a:	f023 0304 	bic.w	r3, r3, #4
 800193e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d06a      	beq.n	8001a20 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7fe ff53 	bl	80007f4 <HAL_GetTick>
 800194e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001952:	e00b      	b.n	800196c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7fe ff4e 	bl	80007f4 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f241 3288 	movw	r2, #5000	; 0x1388
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e2a7      	b.n	8001ebc <HAL_RCC_OscConfig+0xe1c>
 800196c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001970:	2202      	movs	r2, #2
 8001972:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	fa93 f2a3 	rbit	r2, r3
 800197e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001988:	2202      	movs	r2, #2
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	fa93 f2a3 	rbit	r2, r3
 8001996:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800199a:	601a      	str	r2, [r3, #0]
  return result;
 800199c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019a0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a2:	fab3 f383 	clz	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	095b      	lsrs	r3, r3, #5
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d108      	bne.n	80019c8 <HAL_RCC_OscConfig+0x928>
 80019b6:	4b01      	ldr	r3, [pc, #4]	; (80019bc <HAL_RCC_OscConfig+0x91c>)
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	e013      	b.n	80019e4 <HAL_RCC_OscConfig+0x944>
 80019bc:	40021000 	.word	0x40021000
 80019c0:	10908120 	.word	0x10908120
 80019c4:	40007000 	.word	0x40007000
 80019c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019cc:	2202      	movs	r2, #2
 80019ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	4bc0      	ldr	r3, [pc, #768]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80019e8:	2102      	movs	r1, #2
 80019ea:	6011      	str	r1, [r2, #0]
 80019ec:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	fa92 f1a2 	rbit	r1, r2
 80019f6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019fa:	6011      	str	r1, [r2, #0]
  return result;
 80019fc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	fab2 f282 	clz	r2, r2
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	f002 021f 	and.w	r2, r2, #31
 8001a12:	2101      	movs	r1, #1
 8001a14:	fa01 f202 	lsl.w	r2, r1, r2
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d09a      	beq.n	8001954 <HAL_RCC_OscConfig+0x8b4>
 8001a1e:	e063      	b.n	8001ae8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a20:	f7fe fee8 	bl	80007f4 <HAL_GetTick>
 8001a24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a28:	e00b      	b.n	8001a42 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7fe fee3 	bl	80007f4 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e23c      	b.n	8001ebc <HAL_RCC_OscConfig+0xe1c>
 8001a42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a46:	2202      	movs	r2, #2
 8001a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	fa93 f2a3 	rbit	r2, r3
 8001a54:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a5e:	2202      	movs	r2, #2
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	fa93 f2a3 	rbit	r2, r3
 8001a6c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a70:	601a      	str	r2, [r3, #0]
  return result;
 8001a72:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f043 0302 	orr.w	r3, r3, #2
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d102      	bne.n	8001a92 <HAL_RCC_OscConfig+0x9f2>
 8001a8c:	4b95      	ldr	r3, [pc, #596]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	e00d      	b.n	8001aae <HAL_RCC_OscConfig+0xa0e>
 8001a92:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a96:	2202      	movs	r2, #2
 8001a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	fa93 f2a3 	rbit	r2, r3
 8001aa4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	4b8e      	ldr	r3, [pc, #568]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	6011      	str	r1, [r2, #0]
 8001ab6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	fa92 f1a2 	rbit	r1, r2
 8001ac0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ac4:	6011      	str	r1, [r2, #0]
  return result;
 8001ac6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	fab2 f282 	clz	r2, r2
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	f002 021f 	and.w	r2, r2, #31
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1a0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ae8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d105      	bne.n	8001afc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af0:	4b7c      	ldr	r3, [pc, #496]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	4a7b      	ldr	r2, [pc, #492]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001afa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 81d9 	beq.w	8001eba <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b08:	4b76      	ldr	r3, [pc, #472]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	f000 81a6 	beq.w	8001e62 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	f040 811e 	bne.w	8001d5e <HAL_RCC_OscConfig+0xcbe>
 8001b22:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fa93 f2a3 	rbit	r2, r3
 8001b36:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b3a:	601a      	str	r2, [r3, #0]
  return result;
 8001b3c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b40:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	461a      	mov	r2, r3
 8001b54:	2300      	movs	r3, #0
 8001b56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7fe fe4c 	bl	80007f4 <HAL_GetTick>
 8001b5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b60:	e009      	b.n	8001b76 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b62:	f7fe fe47 	bl	80007f4 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1a2      	b.n	8001ebc <HAL_RCC_OscConfig+0xe1c>
 8001b76:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	fa93 f2a3 	rbit	r2, r3
 8001b8a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b8e:	601a      	str	r2, [r3, #0]
  return result;
 8001b90:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	095b      	lsrs	r3, r3, #5
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d102      	bne.n	8001bb0 <HAL_RCC_OscConfig+0xb10>
 8001baa:	4b4e      	ldr	r3, [pc, #312]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	e01b      	b.n	8001be8 <HAL_RCC_OscConfig+0xb48>
 8001bb0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f2a3 	rbit	r2, r3
 8001bc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	4b3f      	ldr	r3, [pc, #252]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001bec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bf0:	6011      	str	r1, [r2, #0]
 8001bf2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	fa92 f1a2 	rbit	r1, r2
 8001bfc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c00:	6011      	str	r1, [r2, #0]
  return result;
 8001c02:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	fab2 f282 	clz	r2, r2
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	f042 0220 	orr.w	r2, r2, #32
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	f002 021f 	and.w	r2, r2, #31
 8001c18:	2101      	movs	r1, #1
 8001c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d19e      	bne.n	8001b62 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c24:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	f023 020f 	bic.w	r2, r3, #15
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	492c      	ldr	r1, [pc, #176]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6a19      	ldr	r1, [r3, #32]
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	4925      	ldr	r1, [pc, #148]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
 8001c54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	fa93 f2a3 	rbit	r2, r3
 8001c68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c6c:	601a      	str	r2, [r3, #0]
  return result;
 8001c6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c72:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	461a      	mov	r2, r3
 8001c86:	2301      	movs	r3, #1
 8001c88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7fe fdb3 	bl	80007f4 <HAL_GetTick>
 8001c8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c92:	e009      	b.n	8001ca8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c94:	f7fe fdae 	bl	80007f4 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e109      	b.n	8001ebc <HAL_RCC_OscConfig+0xe1c>
 8001ca8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	fa93 f2a3 	rbit	r2, r3
 8001cbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cc0:	601a      	str	r2, [r3, #0]
  return result;
 8001cc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cc6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d105      	bne.n	8001ce8 <HAL_RCC_OscConfig+0xc48>
 8001cdc:	4b01      	ldr	r3, [pc, #4]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	e01e      	b.n	8001d20 <HAL_RCC_OscConfig+0xc80>
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	fa93 f2a3 	rbit	r2, r3
 8001d16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	4b6a      	ldr	r3, [pc, #424]	; (8001ec8 <HAL_RCC_OscConfig+0xe28>)
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d28:	6011      	str	r1, [r2, #0]
 8001d2a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	fa92 f1a2 	rbit	r1, r2
 8001d34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d38:	6011      	str	r1, [r2, #0]
  return result;
 8001d3a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	fab2 f282 	clz	r2, r2
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	f002 021f 	and.w	r2, r2, #31
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d09b      	beq.n	8001c94 <HAL_RCC_OscConfig+0xbf4>
 8001d5c:	e0ad      	b.n	8001eba <HAL_RCC_OscConfig+0xe1a>
 8001d5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	fa93 f2a3 	rbit	r2, r3
 8001d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d76:	601a      	str	r2, [r3, #0]
  return result;
 8001d78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d7c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2300      	movs	r3, #0
 8001d92:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7fe fd2e 	bl	80007f4 <HAL_GetTick>
 8001d98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9c:	e009      	b.n	8001db2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7fe fd29 	bl	80007f4 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e084      	b.n	8001ebc <HAL_RCC_OscConfig+0xe1c>
 8001db2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	fa93 f2a3 	rbit	r2, r3
 8001dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dca:	601a      	str	r2, [r3, #0]
  return result;
 8001dcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	095b      	lsrs	r3, r3, #5
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d102      	bne.n	8001dec <HAL_RCC_OscConfig+0xd4c>
 8001de6:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <HAL_RCC_OscConfig+0xe28>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	e01b      	b.n	8001e24 <HAL_RCC_OscConfig+0xd84>
 8001dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	fa93 f2a3 	rbit	r2, r3
 8001e00:	f107 0320 	add.w	r3, r7, #32
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fa93 f2a3 	rbit	r2, r3
 8001e1a:	f107 0318 	add.w	r3, r7, #24
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <HAL_RCC_OscConfig+0xe28>)
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	f107 0214 	add.w	r2, r7, #20
 8001e28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e2c:	6011      	str	r1, [r2, #0]
 8001e2e:	f107 0214 	add.w	r2, r7, #20
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	fa92 f1a2 	rbit	r1, r2
 8001e38:	f107 0210 	add.w	r2, r7, #16
 8001e3c:	6011      	str	r1, [r2, #0]
  return result;
 8001e3e:	f107 0210 	add.w	r2, r7, #16
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	fab2 f282 	clz	r2, r2
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f042 0220 	orr.w	r2, r2, #32
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	f002 021f 	and.w	r2, r2, #31
 8001e54:	2101      	movs	r1, #1
 8001e56:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d19e      	bne.n	8001d9e <HAL_RCC_OscConfig+0xcfe>
 8001e60:	e02b      	b.n	8001eba <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e025      	b.n	8001ebc <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_RCC_OscConfig+0xe28>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <HAL_RCC_OscConfig+0xe28>)
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e84:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d111      	bne.n	8001eb6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e92:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d108      	bne.n	8001eb6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ea8:	f003 020f 	and.w	r2, r3, #15
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000

08001ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b09e      	sub	sp, #120	; 0x78
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e162      	b.n	80021aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b90      	ldr	r3, [pc, #576]	; (8002128 <HAL_RCC_ClockConfig+0x25c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d910      	bls.n	8001f14 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b8d      	ldr	r3, [pc, #564]	; (8002128 <HAL_RCC_ClockConfig+0x25c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 0207 	bic.w	r2, r3, #7
 8001efa:	498b      	ldr	r1, [pc, #556]	; (8002128 <HAL_RCC_ClockConfig+0x25c>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b89      	ldr	r3, [pc, #548]	; (8002128 <HAL_RCC_ClockConfig+0x25c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e14a      	b.n	80021aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f20:	4b82      	ldr	r3, [pc, #520]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	497f      	ldr	r1, [pc, #508]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80dc 	beq.w	80020f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d13c      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xf6>
 8001f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f4c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d102      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xa6>
 8001f6c:	4b6f      	ldr	r3, [pc, #444]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	e00f      	b.n	8001f92 <HAL_RCC_ClockConfig+0xc6>
 8001f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	667b      	str	r3, [r7, #100]	; 0x64
 8001f80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f84:	663b      	str	r3, [r7, #96]	; 0x60
 8001f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f88:	fa93 f3a3 	rbit	r3, r3
 8001f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f8e:	4b67      	ldr	r3, [pc, #412]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f96:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f9a:	fa92 f2a2 	rbit	r2, r2
 8001f9e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001fa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fa2:	fab2 f282 	clz	r2, r2
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	f042 0220 	orr.w	r2, r2, #32
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	f002 021f 	and.w	r2, r2, #31
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d17b      	bne.n	80020b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0f3      	b.n	80021aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d13c      	bne.n	8002044 <HAL_RCC_ClockConfig+0x178>
 8001fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fd2:	fa93 f3a3 	rbit	r3, r3
 8001fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d102      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x128>
 8001fee:	4b4f      	ldr	r3, [pc, #316]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	e00f      	b.n	8002014 <HAL_RCC_ClockConfig+0x148>
 8001ff4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	647b      	str	r3, [r7, #68]	; 0x44
 8002002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002006:	643b      	str	r3, [r7, #64]	; 0x40
 8002008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002010:	4b46      	ldr	r3, [pc, #280]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002018:	63ba      	str	r2, [r7, #56]	; 0x38
 800201a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800201c:	fa92 f2a2 	rbit	r2, r2
 8002020:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002024:	fab2 f282 	clz	r2, r2
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	f042 0220 	orr.w	r2, r2, #32
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	f002 021f 	and.w	r2, r2, #31
 8002034:	2101      	movs	r1, #1
 8002036:	fa01 f202 	lsl.w	r2, r1, r2
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d13a      	bne.n	80020b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0b2      	b.n	80021aa <HAL_RCC_ClockConfig+0x2de>
 8002044:	2302      	movs	r3, #2
 8002046:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	095b      	lsrs	r3, r3, #5
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d102      	bne.n	800206c <HAL_RCC_ClockConfig+0x1a0>
 8002066:	4b31      	ldr	r3, [pc, #196]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	e00d      	b.n	8002088 <HAL_RCC_ClockConfig+0x1bc>
 800206c:	2302      	movs	r3, #2
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
 8002078:	2302      	movs	r3, #2
 800207a:	623b      	str	r3, [r7, #32]
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	4b29      	ldr	r3, [pc, #164]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	2202      	movs	r2, #2
 800208a:	61ba      	str	r2, [r7, #24]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	fa92 f2a2 	rbit	r2, r2
 8002092:	617a      	str	r2, [r7, #20]
  return result;
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	fab2 f282 	clz	r2, r2
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f042 0220 	orr.w	r2, r2, #32
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f002 021f 	and.w	r2, r2, #31
 80020a6:	2101      	movs	r1, #1
 80020a8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e079      	b.n	80021aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b6:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f023 0203 	bic.w	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	491a      	ldr	r1, [pc, #104]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c8:	f7fe fb94 	bl	80007f4 <HAL_GetTick>
 80020cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d0:	f7fe fb90 	bl	80007f4 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e061      	b.n	80021aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 020c 	and.w	r2, r3, #12
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1eb      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCC_ClockConfig+0x25c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d214      	bcs.n	8002130 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_RCC_ClockConfig+0x25c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 0207 	bic.w	r2, r3, #7
 800210e:	4906      	ldr	r1, [pc, #24]	; (8002128 <HAL_RCC_ClockConfig+0x25c>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <HAL_RCC_ClockConfig+0x25c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d005      	beq.n	8002130 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e040      	b.n	80021aa <HAL_RCC_ClockConfig+0x2de>
 8002128:	40022000 	.word	0x40022000
 800212c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_RCC_ClockConfig+0x2e8>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	491a      	ldr	r1, [pc, #104]	; (80021b4 <HAL_RCC_ClockConfig+0x2e8>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d009      	beq.n	800216e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <HAL_RCC_ClockConfig+0x2e8>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4912      	ldr	r1, [pc, #72]	; (80021b4 <HAL_RCC_ClockConfig+0x2e8>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800216e:	f000 f829 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8002172:	4601      	mov	r1, r0
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_RCC_ClockConfig+0x2e8>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800217c:	22f0      	movs	r2, #240	; 0xf0
 800217e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	fa92 f2a2 	rbit	r2, r2
 8002186:	60fa      	str	r2, [r7, #12]
  return result;
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	fab2 f282 	clz	r2, r2
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	40d3      	lsrs	r3, r2
 8002192:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x2ec>)
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	fa21 f303 	lsr.w	r3, r1, r3
 800219a:	4a08      	ldr	r2, [pc, #32]	; (80021bc <HAL_RCC_ClockConfig+0x2f0>)
 800219c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_RCC_ClockConfig+0x2f4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe fae2 	bl	800076c <HAL_InitTick>
  
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3778      	adds	r7, #120	; 0x78
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	08003310 	.word	0x08003310
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000004 	.word	0x20000004

080021c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b08b      	sub	sp, #44	; 0x2c
 80021c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021de:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d002      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x30>
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d003      	beq.n	80021fa <HAL_RCC_GetSysClockFreq+0x36>
 80021f2:	e03f      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <HAL_RCC_GetSysClockFreq+0xc8>)
 80021f6:	623b      	str	r3, [r7, #32]
      break;
 80021f8:	e03f      	b.n	800227a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002200:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002204:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	fa92 f2a2 	rbit	r2, r2
 800220c:	607a      	str	r2, [r7, #4]
  return result;
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	fab2 f282 	clz	r2, r2
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	40d3      	lsrs	r3, r2
 8002218:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <HAL_RCC_GetSysClockFreq+0xcc>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	220f      	movs	r2, #15
 8002228:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	fa92 f2a2 	rbit	r2, r2
 8002230:	60fa      	str	r2, [r7, #12]
  return result;
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	fab2 f282 	clz	r2, r2
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	40d3      	lsrs	r3, r2
 800223c:	4a15      	ldr	r2, [pc, #84]	; (8002294 <HAL_RCC_GetSysClockFreq+0xd0>)
 800223e:	5cd3      	ldrb	r3, [r2, r3]
 8002240:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800224c:	4a0f      	ldr	r2, [pc, #60]	; (800228c <HAL_RCC_GetSysClockFreq+0xc8>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	fbb2 f2f3 	udiv	r2, r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fb02 f303 	mul.w	r3, r2, r3
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
 800225c:	e007      	b.n	800226e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800225e:	4a0b      	ldr	r2, [pc, #44]	; (800228c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	fbb2 f2f3 	udiv	r2, r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	623b      	str	r3, [r7, #32]
      break;
 8002272:	e002      	b.n	800227a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002276:	623b      	str	r3, [r7, #32]
      break;
 8002278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227a:	6a3b      	ldr	r3, [r7, #32]
}
 800227c:	4618      	mov	r0, r3
 800227e:	372c      	adds	r7, #44	; 0x2c
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40021000 	.word	0x40021000
 800228c:	007a1200 	.word	0x007a1200
 8002290:	08003328 	.word	0x08003328
 8002294:	08003338 	.word	0x08003338

08002298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <HAL_RCC_GetHCLKFreq+0x14>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000000 	.word	0x20000000

080022b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022b6:	f7ff ffef 	bl	8002298 <HAL_RCC_GetHCLKFreq>
 80022ba:	4601      	mov	r1, r0
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	fa92 f2a2 	rbit	r2, r2
 80022d0:	603a      	str	r2, [r7, #0]
  return result;
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	fab2 f282 	clz	r2, r2
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	40d3      	lsrs	r3, r2
 80022dc:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80022de:	5cd3      	ldrb	r3, [r2, r3]
 80022e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	08003320 	.word	0x08003320

080022f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80022fa:	f7ff ffcd 	bl	8002298 <HAL_RCC_GetHCLKFreq>
 80022fe:	4601      	mov	r1, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002308:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800230c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	fa92 f2a2 	rbit	r2, r2
 8002314:	603a      	str	r2, [r7, #0]
  return result;
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	fab2 f282 	clz	r2, r2
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	40d3      	lsrs	r3, r2
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002322:	5cd3      	ldrb	r3, [r2, r3]
 8002324:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	08003320 	.word	0x08003320

08002338 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b092      	sub	sp, #72	; 0x48
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80d7 	beq.w	8002504 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235c:	4b4e      	ldr	r3, [pc, #312]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10e      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002368:	4b4b      	ldr	r3, [pc, #300]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	4a4a      	ldr	r2, [pc, #296]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002372:	61d3      	str	r3, [r2, #28]
 8002374:	4b48      	ldr	r3, [pc, #288]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002380:	2301      	movs	r3, #1
 8002382:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	4b45      	ldr	r3, [pc, #276]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d118      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002392:	4b42      	ldr	r3, [pc, #264]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a41      	ldr	r2, [pc, #260]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800239e:	f7fe fa29 	bl	80007f4 <HAL_GetTick>
 80023a2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	e008      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a6:	f7fe fa25 	bl	80007f4 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b64      	cmp	r3, #100	; 0x64
 80023b2:	d901      	bls.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e1d6      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b8:	4b38      	ldr	r3, [pc, #224]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023c4:	4b34      	ldr	r3, [pc, #208]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 8084 	beq.w	80024de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d07c      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023e4:	4b2c      	ldr	r3, [pc, #176]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	461a      	mov	r2, r3
 800240e:	2301      	movs	r3, #1
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002416:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	461a      	mov	r2, r3
 8002432:	2300      	movs	r3, #0
 8002434:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002436:	4a18      	ldr	r2, [pc, #96]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800243c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d04b      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7fe f9d5 	bl	80007f4 <HAL_GetTick>
 800244a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe f9d1 	bl	80007f4 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e180      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002464:	2302      	movs	r3, #2
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
 8002470:	2302      	movs	r3, #2
 8002472:	623b      	str	r3, [r7, #32]
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	fa93 f3a3 	rbit	r3, r3
 800247a:	61fb      	str	r3, [r7, #28]
  return result;
 800247c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	095b      	lsrs	r3, r3, #5
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d108      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002492:	4b01      	ldr	r3, [pc, #4]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	e00d      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002498:	40021000 	.word	0x40021000
 800249c:	40007000 	.word	0x40007000
 80024a0:	10908100 	.word	0x10908100
 80024a4:	2302      	movs	r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	4ba0      	ldr	r3, [pc, #640]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	2202      	movs	r2, #2
 80024b6:	613a      	str	r2, [r7, #16]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	fa92 f2a2 	rbit	r2, r2
 80024be:	60fa      	str	r2, [r7, #12]
  return result;
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	fab2 f282 	clz	r2, r2
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	f002 021f 	and.w	r2, r2, #31
 80024d2:	2101      	movs	r1, #1
 80024d4:	fa01 f202 	lsl.w	r2, r1, r2
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0b7      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024de:	4b95      	ldr	r3, [pc, #596]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4992      	ldr	r1, [pc, #584]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d105      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f8:	4b8e      	ldr	r3, [pc, #568]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	4a8d      	ldr	r2, [pc, #564]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002502:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002510:	4b88      	ldr	r3, [pc, #544]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4985      	ldr	r1, [pc, #532]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800251e:	4313      	orrs	r3, r2
 8002520:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800252e:	4b81      	ldr	r3, [pc, #516]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	497e      	ldr	r1, [pc, #504]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800253c:	4313      	orrs	r3, r2
 800253e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800254c:	4b79      	ldr	r3, [pc, #484]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	4976      	ldr	r1, [pc, #472]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800256a:	4b72      	ldr	r3, [pc, #456]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f023 0210 	bic.w	r2, r3, #16
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	496f      	ldr	r1, [pc, #444]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002578:	4313      	orrs	r3, r2
 800257a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002588:	4b6a      	ldr	r3, [pc, #424]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002594:	4967      	ldr	r1, [pc, #412]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025a6:	4b63      	ldr	r3, [pc, #396]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f023 0220 	bic.w	r2, r3, #32
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4960      	ldr	r1, [pc, #384]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025c4:	4b5b      	ldr	r3, [pc, #364]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	4958      	ldr	r1, [pc, #352]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025e2:	4b54      	ldr	r3, [pc, #336]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	4951      	ldr	r1, [pc, #324]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002600:	4b4c      	ldr	r3, [pc, #304]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	4949      	ldr	r1, [pc, #292]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800261e:	4b45      	ldr	r3, [pc, #276]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	4942      	ldr	r1, [pc, #264]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800263c:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	493a      	ldr	r1, [pc, #232]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d008      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800265a:	4b36      	ldr	r3, [pc, #216]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002666:	4933      	ldr	r1, [pc, #204]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002678:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002684:	492b      	ldr	r1, [pc, #172]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002686:	4313      	orrs	r3, r2
 8002688:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002696:	4b27      	ldr	r3, [pc, #156]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4924      	ldr	r1, [pc, #144]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80026b4:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	491c      	ldr	r1, [pc, #112]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80026d2:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026de:	4915      	ldr	r1, [pc, #84]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026f0:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	490d      	ldr	r1, [pc, #52]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271a:	4906      	ldr	r1, [pc, #24]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800271c:	4313      	orrs	r3, r2
 800271e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00c      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800272c:	4b01      	ldr	r3, [pc, #4]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	e002      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002740:	490b      	ldr	r1, [pc, #44]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002742:	4313      	orrs	r3, r2
 8002744:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d008      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275e:	4904      	ldr	r1, [pc, #16]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002760:	4313      	orrs	r3, r2
 8002762:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3748      	adds	r7, #72	; 0x48
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000

08002774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e01d      	b.n	80027c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fd fec4 	bl	8000528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3304      	adds	r3, #4
 80027b0:	4619      	mov	r1, r3
 80027b2:	4610      	mov	r0, r2
 80027b4:	f000 f834 	bl	8002820 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_TIM_Base_Start+0x50>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d00b      	beq.n	8002806 <HAL_TIM_Base_Start+0x3a>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f4:	d007      	beq.n	8002806 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	00010007 	.word	0x00010007

08002820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a42      	ldr	r2, [pc, #264]	; (800293c <TIM_Base_SetConfig+0x11c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <TIM_Base_SetConfig+0x40>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283e:	d00f      	beq.n	8002860 <TIM_Base_SetConfig+0x40>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a3f      	ldr	r2, [pc, #252]	; (8002940 <TIM_Base_SetConfig+0x120>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d00b      	beq.n	8002860 <TIM_Base_SetConfig+0x40>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a3e      	ldr	r2, [pc, #248]	; (8002944 <TIM_Base_SetConfig+0x124>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d007      	beq.n	8002860 <TIM_Base_SetConfig+0x40>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a3d      	ldr	r2, [pc, #244]	; (8002948 <TIM_Base_SetConfig+0x128>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d003      	beq.n	8002860 <TIM_Base_SetConfig+0x40>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a3c      	ldr	r2, [pc, #240]	; (800294c <TIM_Base_SetConfig+0x12c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d108      	bne.n	8002872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a31      	ldr	r2, [pc, #196]	; (800293c <TIM_Base_SetConfig+0x11c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01f      	beq.n	80028ba <TIM_Base_SetConfig+0x9a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002880:	d01b      	beq.n	80028ba <TIM_Base_SetConfig+0x9a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a2e      	ldr	r2, [pc, #184]	; (8002940 <TIM_Base_SetConfig+0x120>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d017      	beq.n	80028ba <TIM_Base_SetConfig+0x9a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a2d      	ldr	r2, [pc, #180]	; (8002944 <TIM_Base_SetConfig+0x124>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d013      	beq.n	80028ba <TIM_Base_SetConfig+0x9a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a2c      	ldr	r2, [pc, #176]	; (8002948 <TIM_Base_SetConfig+0x128>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00f      	beq.n	80028ba <TIM_Base_SetConfig+0x9a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a2c      	ldr	r2, [pc, #176]	; (8002950 <TIM_Base_SetConfig+0x130>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00b      	beq.n	80028ba <TIM_Base_SetConfig+0x9a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a2b      	ldr	r2, [pc, #172]	; (8002954 <TIM_Base_SetConfig+0x134>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <TIM_Base_SetConfig+0x9a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a2a      	ldr	r2, [pc, #168]	; (8002958 <TIM_Base_SetConfig+0x138>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d003      	beq.n	80028ba <TIM_Base_SetConfig+0x9a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a25      	ldr	r2, [pc, #148]	; (800294c <TIM_Base_SetConfig+0x12c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d108      	bne.n	80028cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a12      	ldr	r2, [pc, #72]	; (800293c <TIM_Base_SetConfig+0x11c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d013      	beq.n	8002920 <TIM_Base_SetConfig+0x100>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a13      	ldr	r2, [pc, #76]	; (8002948 <TIM_Base_SetConfig+0x128>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00f      	beq.n	8002920 <TIM_Base_SetConfig+0x100>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a13      	ldr	r2, [pc, #76]	; (8002950 <TIM_Base_SetConfig+0x130>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00b      	beq.n	8002920 <TIM_Base_SetConfig+0x100>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <TIM_Base_SetConfig+0x134>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d007      	beq.n	8002920 <TIM_Base_SetConfig+0x100>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a11      	ldr	r2, [pc, #68]	; (8002958 <TIM_Base_SetConfig+0x138>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d003      	beq.n	8002920 <TIM_Base_SetConfig+0x100>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a0c      	ldr	r2, [pc, #48]	; (800294c <TIM_Base_SetConfig+0x12c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d103      	bne.n	8002928 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	615a      	str	r2, [r3, #20]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40000400 	.word	0x40000400
 8002944:	40000800 	.word	0x40000800
 8002948:	40013400 	.word	0x40013400
 800294c:	40015000 	.word	0x40015000
 8002950:	40014000 	.word	0x40014000
 8002954:	40014400 	.word	0x40014400
 8002958:	40014800 	.word	0x40014800

0800295c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002970:	2302      	movs	r3, #2
 8002972:	e06d      	b.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a30      	ldr	r2, [pc, #192]	; (8002a5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d009      	beq.n	80029b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2f      	ldr	r2, [pc, #188]	; (8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d004      	beq.n	80029b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a2d      	ldr	r2, [pc, #180]	; (8002a64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d108      	bne.n	80029c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80029b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1e      	ldr	r2, [pc, #120]	; (8002a5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d01d      	beq.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f0:	d018      	beq.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d013      	beq.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00e      	beq.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a15      	ldr	r2, [pc, #84]	; (8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d009      	beq.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a16      	ldr	r2, [pc, #88]	; (8002a70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d004      	beq.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d10c      	bne.n	8002a3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40013400 	.word	0x40013400
 8002a64:	40015000 	.word	0x40015000
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40000800 	.word	0x40000800
 8002a70:	40014000 	.word	0x40014000

08002a74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e040      	b.n	8002b08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fd fd96 	bl	80005c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2224      	movs	r2, #36	; 0x24
 8002aa0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0201 	bic.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f82c 	bl	8002b10 <UART_SetConfig>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e022      	b.n	8002b08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fa3a 	bl	8002f44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ade:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 fac1 	bl	8003088 <UART_CheckIdleState>
 8002b06:	4603      	mov	r3, r0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	4bac      	ldr	r3, [pc, #688]	; (8002df0 <UART_SetConfig+0x2e0>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	6939      	ldr	r1, [r7, #16]
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a9a      	ldr	r2, [pc, #616]	; (8002df4 <UART_SetConfig+0x2e4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d121      	bne.n	8002bd4 <UART_SetConfig+0xc4>
 8002b90:	4b99      	ldr	r3, [pc, #612]	; (8002df8 <UART_SetConfig+0x2e8>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d817      	bhi.n	8002bcc <UART_SetConfig+0xbc>
 8002b9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <UART_SetConfig+0x94>)
 8002b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba2:	bf00      	nop
 8002ba4:	08002bb5 	.word	0x08002bb5
 8002ba8:	08002bc1 	.word	0x08002bc1
 8002bac:	08002bc7 	.word	0x08002bc7
 8002bb0:	08002bbb 	.word	0x08002bbb
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	77fb      	strb	r3, [r7, #31]
 8002bb8:	e0b2      	b.n	8002d20 <UART_SetConfig+0x210>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	77fb      	strb	r3, [r7, #31]
 8002bbe:	e0af      	b.n	8002d20 <UART_SetConfig+0x210>
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	e0ac      	b.n	8002d20 <UART_SetConfig+0x210>
 8002bc6:	2308      	movs	r3, #8
 8002bc8:	77fb      	strb	r3, [r7, #31]
 8002bca:	e0a9      	b.n	8002d20 <UART_SetConfig+0x210>
 8002bcc:	2310      	movs	r3, #16
 8002bce:	77fb      	strb	r3, [r7, #31]
 8002bd0:	bf00      	nop
 8002bd2:	e0a5      	b.n	8002d20 <UART_SetConfig+0x210>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a88      	ldr	r2, [pc, #544]	; (8002dfc <UART_SetConfig+0x2ec>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d123      	bne.n	8002c26 <UART_SetConfig+0x116>
 8002bde:	4b86      	ldr	r3, [pc, #536]	; (8002df8 <UART_SetConfig+0x2e8>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bea:	d012      	beq.n	8002c12 <UART_SetConfig+0x102>
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf0:	d802      	bhi.n	8002bf8 <UART_SetConfig+0xe8>
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <UART_SetConfig+0xf6>
 8002bf6:	e012      	b.n	8002c1e <UART_SetConfig+0x10e>
 8002bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bfc:	d00c      	beq.n	8002c18 <UART_SetConfig+0x108>
 8002bfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c02:	d003      	beq.n	8002c0c <UART_SetConfig+0xfc>
 8002c04:	e00b      	b.n	8002c1e <UART_SetConfig+0x10e>
 8002c06:	2300      	movs	r3, #0
 8002c08:	77fb      	strb	r3, [r7, #31]
 8002c0a:	e089      	b.n	8002d20 <UART_SetConfig+0x210>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	e086      	b.n	8002d20 <UART_SetConfig+0x210>
 8002c12:	2304      	movs	r3, #4
 8002c14:	77fb      	strb	r3, [r7, #31]
 8002c16:	e083      	b.n	8002d20 <UART_SetConfig+0x210>
 8002c18:	2308      	movs	r3, #8
 8002c1a:	77fb      	strb	r3, [r7, #31]
 8002c1c:	e080      	b.n	8002d20 <UART_SetConfig+0x210>
 8002c1e:	2310      	movs	r3, #16
 8002c20:	77fb      	strb	r3, [r7, #31]
 8002c22:	bf00      	nop
 8002c24:	e07c      	b.n	8002d20 <UART_SetConfig+0x210>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a75      	ldr	r2, [pc, #468]	; (8002e00 <UART_SetConfig+0x2f0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d123      	bne.n	8002c78 <UART_SetConfig+0x168>
 8002c30:	4b71      	ldr	r3, [pc, #452]	; (8002df8 <UART_SetConfig+0x2e8>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002c38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c3c:	d012      	beq.n	8002c64 <UART_SetConfig+0x154>
 8002c3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c42:	d802      	bhi.n	8002c4a <UART_SetConfig+0x13a>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d007      	beq.n	8002c58 <UART_SetConfig+0x148>
 8002c48:	e012      	b.n	8002c70 <UART_SetConfig+0x160>
 8002c4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c4e:	d00c      	beq.n	8002c6a <UART_SetConfig+0x15a>
 8002c50:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c54:	d003      	beq.n	8002c5e <UART_SetConfig+0x14e>
 8002c56:	e00b      	b.n	8002c70 <UART_SetConfig+0x160>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	77fb      	strb	r3, [r7, #31]
 8002c5c:	e060      	b.n	8002d20 <UART_SetConfig+0x210>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	77fb      	strb	r3, [r7, #31]
 8002c62:	e05d      	b.n	8002d20 <UART_SetConfig+0x210>
 8002c64:	2304      	movs	r3, #4
 8002c66:	77fb      	strb	r3, [r7, #31]
 8002c68:	e05a      	b.n	8002d20 <UART_SetConfig+0x210>
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	77fb      	strb	r3, [r7, #31]
 8002c6e:	e057      	b.n	8002d20 <UART_SetConfig+0x210>
 8002c70:	2310      	movs	r3, #16
 8002c72:	77fb      	strb	r3, [r7, #31]
 8002c74:	bf00      	nop
 8002c76:	e053      	b.n	8002d20 <UART_SetConfig+0x210>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a61      	ldr	r2, [pc, #388]	; (8002e04 <UART_SetConfig+0x2f4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d123      	bne.n	8002cca <UART_SetConfig+0x1ba>
 8002c82:	4b5d      	ldr	r3, [pc, #372]	; (8002df8 <UART_SetConfig+0x2e8>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c8e:	d012      	beq.n	8002cb6 <UART_SetConfig+0x1a6>
 8002c90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c94:	d802      	bhi.n	8002c9c <UART_SetConfig+0x18c>
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d007      	beq.n	8002caa <UART_SetConfig+0x19a>
 8002c9a:	e012      	b.n	8002cc2 <UART_SetConfig+0x1b2>
 8002c9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ca0:	d00c      	beq.n	8002cbc <UART_SetConfig+0x1ac>
 8002ca2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ca6:	d003      	beq.n	8002cb0 <UART_SetConfig+0x1a0>
 8002ca8:	e00b      	b.n	8002cc2 <UART_SetConfig+0x1b2>
 8002caa:	2300      	movs	r3, #0
 8002cac:	77fb      	strb	r3, [r7, #31]
 8002cae:	e037      	b.n	8002d20 <UART_SetConfig+0x210>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	77fb      	strb	r3, [r7, #31]
 8002cb4:	e034      	b.n	8002d20 <UART_SetConfig+0x210>
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	77fb      	strb	r3, [r7, #31]
 8002cba:	e031      	b.n	8002d20 <UART_SetConfig+0x210>
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	77fb      	strb	r3, [r7, #31]
 8002cc0:	e02e      	b.n	8002d20 <UART_SetConfig+0x210>
 8002cc2:	2310      	movs	r3, #16
 8002cc4:	77fb      	strb	r3, [r7, #31]
 8002cc6:	bf00      	nop
 8002cc8:	e02a      	b.n	8002d20 <UART_SetConfig+0x210>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a4e      	ldr	r2, [pc, #312]	; (8002e08 <UART_SetConfig+0x2f8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d123      	bne.n	8002d1c <UART_SetConfig+0x20c>
 8002cd4:	4b48      	ldr	r3, [pc, #288]	; (8002df8 <UART_SetConfig+0x2e8>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce0:	d012      	beq.n	8002d08 <UART_SetConfig+0x1f8>
 8002ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce6:	d802      	bhi.n	8002cee <UART_SetConfig+0x1de>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <UART_SetConfig+0x1ec>
 8002cec:	e012      	b.n	8002d14 <UART_SetConfig+0x204>
 8002cee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cf2:	d00c      	beq.n	8002d0e <UART_SetConfig+0x1fe>
 8002cf4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cf8:	d003      	beq.n	8002d02 <UART_SetConfig+0x1f2>
 8002cfa:	e00b      	b.n	8002d14 <UART_SetConfig+0x204>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	77fb      	strb	r3, [r7, #31]
 8002d00:	e00e      	b.n	8002d20 <UART_SetConfig+0x210>
 8002d02:	2302      	movs	r3, #2
 8002d04:	77fb      	strb	r3, [r7, #31]
 8002d06:	e00b      	b.n	8002d20 <UART_SetConfig+0x210>
 8002d08:	2304      	movs	r3, #4
 8002d0a:	77fb      	strb	r3, [r7, #31]
 8002d0c:	e008      	b.n	8002d20 <UART_SetConfig+0x210>
 8002d0e:	2308      	movs	r3, #8
 8002d10:	77fb      	strb	r3, [r7, #31]
 8002d12:	e005      	b.n	8002d20 <UART_SetConfig+0x210>
 8002d14:	2310      	movs	r3, #16
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	bf00      	nop
 8002d1a:	e001      	b.n	8002d20 <UART_SetConfig+0x210>
 8002d1c:	2310      	movs	r3, #16
 8002d1e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d28:	f040 8090 	bne.w	8002e4c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8002d2c:	7ffb      	ldrb	r3, [r7, #31]
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d86c      	bhi.n	8002e0c <UART_SetConfig+0x2fc>
 8002d32:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <UART_SetConfig+0x228>)
 8002d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d38:	08002d5d 	.word	0x08002d5d
 8002d3c:	08002d7d 	.word	0x08002d7d
 8002d40:	08002d9d 	.word	0x08002d9d
 8002d44:	08002e0d 	.word	0x08002e0d
 8002d48:	08002db9 	.word	0x08002db9
 8002d4c:	08002e0d 	.word	0x08002e0d
 8002d50:	08002e0d 	.word	0x08002e0d
 8002d54:	08002e0d 	.word	0x08002e0d
 8002d58:	08002dd9 	.word	0x08002dd9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d5c:	f7ff faa8 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 8002d60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	005a      	lsls	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	441a      	add	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	61bb      	str	r3, [r7, #24]
        break;
 8002d7a:	e04a      	b.n	8002e12 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d7c:	f7ff faba 	bl	80022f4 <HAL_RCC_GetPCLK2Freq>
 8002d80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	005a      	lsls	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	441a      	add	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	61bb      	str	r3, [r7, #24]
        break;
 8002d9a:	e03a      	b.n	8002e12 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002da6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6852      	ldr	r2, [r2, #4]
 8002dae:	fbb3 f3f2 	udiv	r3, r3, r2
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	61bb      	str	r3, [r7, #24]
        break;
 8002db6:	e02c      	b.n	8002e12 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002db8:	f7ff fa04 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8002dbc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	005a      	lsls	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	441a      	add	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	61bb      	str	r3, [r7, #24]
        break;
 8002dd6:	e01c      	b.n	8002e12 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	085b      	lsrs	r3, r3, #1
 8002dde:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	61bb      	str	r3, [r7, #24]
        break;
 8002dee:	e010      	b.n	8002e12 <UART_SetConfig+0x302>
 8002df0:	efff69f3 	.word	0xefff69f3
 8002df4:	40013800 	.word	0x40013800
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40004400 	.word	0x40004400
 8002e00:	40004800 	.word	0x40004800
 8002e04:	40004c00 	.word	0x40004c00
 8002e08:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	75fb      	strb	r3, [r7, #23]
        break;
 8002e10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	2b0f      	cmp	r3, #15
 8002e16:	d916      	bls.n	8002e46 <UART_SetConfig+0x336>
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1e:	d212      	bcs.n	8002e46 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	f023 030f 	bic.w	r3, r3, #15
 8002e28:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	085b      	lsrs	r3, r3, #1
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	897b      	ldrh	r3, [r7, #10]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	897a      	ldrh	r2, [r7, #10]
 8002e42:	60da      	str	r2, [r3, #12]
 8002e44:	e072      	b.n	8002f2c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	75fb      	strb	r3, [r7, #23]
 8002e4a:	e06f      	b.n	8002f2c <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8002e4c:	7ffb      	ldrb	r3, [r7, #31]
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d85b      	bhi.n	8002f0a <UART_SetConfig+0x3fa>
 8002e52:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <UART_SetConfig+0x348>)
 8002e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e58:	08002e7d 	.word	0x08002e7d
 8002e5c:	08002e9b 	.word	0x08002e9b
 8002e60:	08002eb9 	.word	0x08002eb9
 8002e64:	08002f0b 	.word	0x08002f0b
 8002e68:	08002ed5 	.word	0x08002ed5
 8002e6c:	08002f0b 	.word	0x08002f0b
 8002e70:	08002f0b 	.word	0x08002f0b
 8002e74:	08002f0b 	.word	0x08002f0b
 8002e78:	08002ef3 	.word	0x08002ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e7c:	f7ff fa18 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 8002e80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	085a      	lsrs	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	441a      	add	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	61bb      	str	r3, [r7, #24]
        break;
 8002e98:	e03a      	b.n	8002f10 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e9a:	f7ff fa2b 	bl	80022f4 <HAL_RCC_GetPCLK2Freq>
 8002e9e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	085a      	lsrs	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	441a      	add	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	61bb      	str	r3, [r7, #24]
        break;
 8002eb6:	e02b      	b.n	8002f10 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002ec2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6852      	ldr	r2, [r2, #4]
 8002eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	61bb      	str	r3, [r7, #24]
        break;
 8002ed2:	e01d      	b.n	8002f10 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ed4:	f7ff f976 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8002ed8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	085a      	lsrs	r2, r3, #1
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	441a      	add	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	61bb      	str	r3, [r7, #24]
        break;
 8002ef0:	e00e      	b.n	8002f10 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	61bb      	str	r3, [r7, #24]
        break;
 8002f08:	e002      	b.n	8002f10 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	75fb      	strb	r3, [r7, #23]
        break;
 8002f0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b0f      	cmp	r3, #15
 8002f14:	d908      	bls.n	8002f28 <UART_SetConfig+0x418>
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1c:	d204      	bcs.n	8002f28 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	e001      	b.n	8002f2c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3720      	adds	r7, #32
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop

08002f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01a      	beq.n	800305a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003042:	d10a      	bne.n	800305a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	605a      	str	r2, [r3, #4]
  }
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af02      	add	r7, sp, #8
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003096:	f7fd fbad 	bl	80007f4 <HAL_GetTick>
 800309a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d10e      	bne.n	80030c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f82a 	bl	8003112 <UART_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e020      	b.n	800310a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d10e      	bne.n	80030f4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f814 	bl	8003112 <UART_WaitOnFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e00a      	b.n	800310a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	4613      	mov	r3, r2
 8003120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003122:	e05d      	b.n	80031e0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800312a:	d059      	beq.n	80031e0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312c:	f7fd fb62 	bl	80007f4 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	429a      	cmp	r2, r3
 800313a:	d302      	bcc.n	8003142 <UART_WaitOnFlagUntilTimeout+0x30>
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d11b      	bne.n	800317a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003150:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0201 	bic.w	r2, r2, #1
 8003160:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e042      	b.n	8003200 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d02b      	beq.n	80031e0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003196:	d123      	bne.n	80031e0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031a0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e00f      	b.n	8003200 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69da      	ldr	r2, [r3, #28]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4013      	ands	r3, r2
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d092      	beq.n	8003124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <__libc_init_array>:
 8003208:	b570      	push	{r4, r5, r6, lr}
 800320a:	4e0d      	ldr	r6, [pc, #52]	; (8003240 <__libc_init_array+0x38>)
 800320c:	4c0d      	ldr	r4, [pc, #52]	; (8003244 <__libc_init_array+0x3c>)
 800320e:	1ba4      	subs	r4, r4, r6
 8003210:	10a4      	asrs	r4, r4, #2
 8003212:	2500      	movs	r5, #0
 8003214:	42a5      	cmp	r5, r4
 8003216:	d109      	bne.n	800322c <__libc_init_array+0x24>
 8003218:	4e0b      	ldr	r6, [pc, #44]	; (8003248 <__libc_init_array+0x40>)
 800321a:	4c0c      	ldr	r4, [pc, #48]	; (800324c <__libc_init_array+0x44>)
 800321c:	f000 f82c 	bl	8003278 <_init>
 8003220:	1ba4      	subs	r4, r4, r6
 8003222:	10a4      	asrs	r4, r4, #2
 8003224:	2500      	movs	r5, #0
 8003226:	42a5      	cmp	r5, r4
 8003228:	d105      	bne.n	8003236 <__libc_init_array+0x2e>
 800322a:	bd70      	pop	{r4, r5, r6, pc}
 800322c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003230:	4798      	blx	r3
 8003232:	3501      	adds	r5, #1
 8003234:	e7ee      	b.n	8003214 <__libc_init_array+0xc>
 8003236:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800323a:	4798      	blx	r3
 800323c:	3501      	adds	r5, #1
 800323e:	e7f2      	b.n	8003226 <__libc_init_array+0x1e>
 8003240:	08003348 	.word	0x08003348
 8003244:	08003348 	.word	0x08003348
 8003248:	08003348 	.word	0x08003348
 800324c:	0800334c 	.word	0x0800334c

08003250 <memcpy>:
 8003250:	b510      	push	{r4, lr}
 8003252:	1e43      	subs	r3, r0, #1
 8003254:	440a      	add	r2, r1
 8003256:	4291      	cmp	r1, r2
 8003258:	d100      	bne.n	800325c <memcpy+0xc>
 800325a:	bd10      	pop	{r4, pc}
 800325c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003260:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003264:	e7f7      	b.n	8003256 <memcpy+0x6>

08003266 <memset>:
 8003266:	4402      	add	r2, r0
 8003268:	4603      	mov	r3, r0
 800326a:	4293      	cmp	r3, r2
 800326c:	d100      	bne.n	8003270 <memset+0xa>
 800326e:	4770      	bx	lr
 8003270:	f803 1b01 	strb.w	r1, [r3], #1
 8003274:	e7f9      	b.n	800326a <memset+0x4>
	...

08003278 <_init>:
 8003278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327a:	bf00      	nop
 800327c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327e:	bc08      	pop	{r3}
 8003280:	469e      	mov	lr, r3
 8003282:	4770      	bx	lr

08003284 <_fini>:
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	bf00      	nop
 8003288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328a:	bc08      	pop	{r3}
 800328c:	469e      	mov	lr, r3
 800328e:	4770      	bx	lr
